<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CM_SEW_WithBrake" Id="{d8988437-f8ba-4649-8850-7b7474b271b5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CM_SEW_WithBrake EXTENDS CM_Base //IMPLEMENTS I_Motor_base
VAR_INPUT
	i_stSettings : ST_SettingsSEW_WithBrake;
	i_bIclkForward : BOOL := TRUE; //TRUE = interlocked
	i_bIclkBackward : BOOL := TRUE; //TRUE = interlocked
END_VAR
VAR
	// Inputs
	I_bStaReadyForOperation AT %I* : BOOL; // Drive is ready operation (no error)
	
	// Outputs
	Q_bCmdStart AT %Q* : BOOL; // Command to start (+ reset one shot)
	Q_bCmdReverseDirection AT %Q* : BOOL; // Command to reverse direction
	Q_bCmdReleaseBrake AT %Q* : BOOL; // Command to release brake
	Q_nSetTargetSpeed AT %Q* : INT; // Target speed
	
	// Requests
	s_bReqStop : BOOL;
	s_bReqStartForward : BOOL;
	s_bReqStartBackward : BOOL;
	s_bReqReleaseBrake : BOOL;
	s_bReqApplyBrake : BOOL;
	s_bReqReset : BOOL;
	
	// Commands
	//--s_bCmdStop : BOOL;
	s_bCmdForward : BOOL;
	s_bCmdBackward : BOOL;
	s_bCmdReleaseBrake : BOOL;
	//--s_bCmdApplyBrake : BOOL;
	s_bCmdReset : BOOL;
	
	// States
	s_bStaReadyForOperation: BOOL;
	s_bStaDriveError: BOOL;
	s_bStaBrakeReleased : BOOL;
	s_bStaMotorStopped : BOOL;
	s_bStaWarning : BOOL;
	
	// Setpoints
	s_fTargetSpeed : LREAL; // Target speed [mm/s]
	
	// Timers
	s_tofResetPulse : TOF;
	s_tonMotorStoppedDelay : TON;
	s_tonBrakeReleasedDelay : TON;
	
	// Alarms
	s_fbAlarmHandlerDriveError : FB_AlarmHandler;
	s_fbAlarmHandlerApplyingBrakeNotAllowed : FB_AlarmHandler;
	s_fbAlarmHandlerStartMotorNotAllowed : FB_AlarmHandler;
	s_fbAlarmHandlerMotorForwardInterlocked : FB_AlarmHandler;
	s_fbAlarmHandlerMotorBackwardInterlocked : FB_AlarmHandler;
	
	s_errDriveError : BOOL;
	s_wrnApplyingBrakeNotAllowed : BOOL;
	s_wrnStartMotorNotAllowed : BOOL;
	s_wrnMotorForwardInterlocked : BOOL;
	s_wrnMotorBackwardInterlocked : BOOL;
	
	//Hmi
	s_fbHmiBtnManualReleaseBrake: FB_HmiBtn;
	s_fbHmiBtnManualApplyBrake	: FB_HmiBtn;
	s_fbHmiBtnManualForward		: FB_HmiBtn;
	s_fbHmiBtnManualBackward	: FB_HmiBtn;
	s_fbHmiBtnManualStop		: FB_HmiBtn;
	s_fbHmiBtnManualReset		: FB_HmiBtn;
	
	s_fbHmiLedBrakeReleased		: FB_HmiLed;
	s_fbHmiLedMotorStopped		: FB_HmiLed;
	s_fbHmiLedDriveError		: FB_HmiLed;
	
	//Sequence
	eSeqSEW_WithBrake : E_SeqSEW_WithBrake;
	seqTimer : TON;
	seqPreStep : E_SeqSEW_WithBrake;
	s_sActStep : STRING;
	
END_VAR

VAR CONSTANT
	cMAX_INT_VALUE : INT := 32767;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{fea5fc79-9587-4159-bfcb-2bdf1bcbabe5}" />
    <Folder Name="Properties" Id="{90bb6a76-9d90-4e6c-a11c-e7f0ed29a681}" />
    <Method Name="_m_Alarms" Id="{4deaa654-c608-48ef-b852-683d2aa00f57}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

// Set error bits
s_errDriveError := i_bReqEnable AND s_bStaDriveError;// AND NOT(i_bCmdReset);

// Interlock warnings
IF i_bIclkForward AND NOT(s_bStaMotorStopped) THEN	
	s_wrnMotorForwardInterlocked := TRUE;
	m_Stop();
ELSIF NOT(i_bIclkForward) OR i_bCmdReset THEN
	s_wrnMotorForwardInterlocked := FALSE;
END_IF

IF i_bIclkBackward AND NOT(s_bStaMotorStopped) THEN
	s_wrnMotorBackwardInterlocked := TRUE;
	m_Stop();
ELSIF NOT(i_bIclkBackward) OR i_bCmdReset THEN
	s_wrnMotorBackwardInterlocked := FALSE;
END_IF

// Alarm Handlers
s_fbAlarmHandlerDriveError(
	i_bStaActive := s_errDriveError,
	i_eAlarmLevel := E_AlarmLevel.Alarm,
	i_sAlarmText := CONCAT(i_sCmName, ': Drive - has error (check SEW-drive).'));
	
s_fbAlarmHandlerApplyingBrakeNotAllowed(
	i_bStaActive := s_wrnApplyingBrakeNotAllowed,
	i_eAlarmLevel := E_AlarmLevel.Warning,
	i_sAlarmText := CONCAT(i_sCmName, ': Brake - not allowed to be applied (motor not stopped).'));
	
s_wrnApplyingBrakeNotAllowed R= s_bStaMotorStopped;
	
s_fbAlarmHandlerStartMotorNotAllowed(
	i_bStaActive := s_wrnStartMotorNotAllowed,
	i_eAlarmLevel := E_AlarmLevel.Warning,
	i_sAlarmText := CONCAT(i_sCmName, ': Motor - not allowed to start (brake not released).'));
	
s_wrnStartMotorNotAllowed R= s_bStaBrakeReleased;
	
s_fbAlarmHandlerMotorForwardInterlocked(
	i_bStaActive := s_wrnMotorForwardInterlocked,
	i_eAlarmLevel := E_AlarmLevel.Warning,
	i_sAlarmText := CONCAT(i_sCmName, ': Motor - not allowed to move forward (external interlock).'));
	
s_fbAlarmHandlerMotorBackwardInterlocked(
	i_bStaActive := s_wrnMotorBackwardInterlocked,
	i_eAlarmLevel := E_AlarmLevel.Warning,
	i_sAlarmText := CONCAT(i_sCmName, ': Motor - not allowed to move backward (external interlock).'));

// Alarm collector	
s_bStaError := 
	s_fbAlarmHandlerDriveError.q_bStaActive;

// Warning collector
s_bStaWarning := 
	s_fbAlarmHandlerApplyingBrakeNotAllowed.q_bStaActive
	OR s_fbAlarmHandlerStartMotorNotAllowed.q_bStaActive
	OR s_fbAlarmHandlerMotorForwardInterlocked.q_bStaActive
	OR s_fbAlarmHandlerMotorBackwardInterlocked.q_bStaActive;
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{7cf2b106-f168-4b96-b992-17948b9589f2}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

//Exception error
IF (s_bStaError OR NOT(i_bReqEnable))
	AND (eSeqSEW_WithBrake < E_SeqSEW_WithBrake.STOPPING) THEN
		eSeqSEW_WithBrake := E_SeqSEW_WithBrake.STOPPING;
END_IF 

seqTimer(
	IN := (eSeqSEW_WithBrake = seqPreStep),
	PT := T#3600S);
	
seqPreStep := eSeqSEW_WithBrake;

s_sActStep := TO_STRING(eSeqSEW_WithBrake);
	
CASE eSeqSEW_WithBrake OF
	
	E_SeqSEW_WithBrake.INIT:
		_m_ResetAllRequests();
	
		//Reset commands
		s_bCmdForward := FALSE;
		s_bCmdBackward := FALSE;	
		s_bCmdReleaseBrake := FALSE;
		s_bCmdReset := FALSE;
		s_fTargetSpeed := 0;
		
		//Reset states
		s_bStaBrakeReleased := FALSE;
		s_bStaDriveError := FALSE;
		s_bStaMotorStopped := FALSE;
		s_bStaReadyForOperation := FALSE;
	
		eSeqSEW_WithBrake := E_SeqSEW_WithBrake.STOPPED; 
		
	E_SeqSEW_WithBrake.STOPPED:
		s_bStaBrakeReleased := FALSE;
		//--s_bStaDriveError := FALSE;
		s_bStaMotorStopped := TRUE;
		s_bReqStop := FALSE;
		s_bStaReadyForOperation := TRUE;
		
		IF (s_bReqReleaseBrake OR s_bReqStartForward OR s_bReqStartBackward) (*AND NOT(s_bReqStop)*) THEN
			eSeqSEW_WithBrake := E_SeqSEW_WithBrake.RELEASE_BRAKE;
		END_IF

		IF s_bReqApplyBrake THEN
			eSeqSEW_WithBrake := E_SeqSEW_WithBrake.APPLY_BRAKE;
		END_IF	
		
	E_SeqSEW_WithBrake.RELEASE_BRAKE:
		s_bCmdReleaseBrake := TRUE;
		s_bReqReleaseBrake := FALSE;
		
		IF seqTimer.ET > i_stSettings.tBrakeReleasedDelay THEN
			s_bStaBrakeReleased := TRUE;
		END_IF
		
		IF s_bReqStop THEN
			eSeqSEW_WithBrake := E_SeqSEW_WithBrake.STOPPING;
		ELSIF s_bStaBrakeReleased AND s_bReqStartForward THEN
			eSeqSEW_WithBrake := E_SeqSEW_WithBrake.MOVING_FORWARD;
		ELSIF s_bStaBrakeReleased AND s_bReqStartBackward THEN
			eSeqSEW_WithBrake := E_SeqSEW_WithBrake.MOVING_BACKWARD;
		ELSIF s_bReqApplyBrake THEN
			eSeqSEW_WithBrake := E_SeqSEW_WithBrake.APPLY_BRAKE;
		END_IF
	
	E_SeqSEW_WithBrake.MOVING_FORWARD:
		s_bCmdForward := TRUE;
		s_bReqStartForward := FALSE;
		
		s_bStaMotorStopped := FALSE;
		//s_fTargetSpeed is written by method 
	
		IF s_bReqStop THEN
			eSeqSEW_WithBrake := E_SeqSEW_WithBrake.STOPPING;
		END_IF
		
	E_SeqSEW_WithBrake.MOVING_BACKWARD:
		s_bCmdBackward := TRUE;
		s_bReqStartBackward := FALSE;
		
		s_bStaMotorStopped := FALSE;
		//s_fTargetSpeed is written by method 
	
		IF s_bReqStop THEN
			eSeqSEW_WithBrake := E_SeqSEW_WithBrake.STOPPING;
		END_IF
	
	E_SeqSEW_WithBrake.STOPPING:
		s_bCmdForward := FALSE;
		s_bCmdBackward := FALSE;
		s_bReqStop := FALSE;
		
		IF seqTimer.ET > i_stSettings.tMotorStoppedDelay THEN
			s_bStaMotorStopped := TRUE;
			eSeqSEW_WithBrake := E_SeqSEW_WithBrake.APPLY_BRAKE;
		END_IF	
	
	E_SeqSEW_WithBrake.APPLY_BRAKE:
		s_bCmdReleaseBrake := FALSE;
		s_bReqApplyBrake := FALSE;
		
		IF seqTimer.ET > i_stSettings.tBrakeReleasedDelay THEN
			s_bStaBrakeReleased := FALSE;
			
			IF (s_bStaError OR NOT(i_bReqEnable)) THEN
				eSeqSEW_WithBrake := E_SeqSEW_WithBrake.ERROR;
			ELSE
				_m_ResetAllRequests();
				eSeqSEW_WithBrake := E_SeqSEW_WithBrake.STOPPED;
			END_IF	
		END_IF
		
	E_SeqSEW_WithBrake.ERROR:
		s_bCmdReset := i_bCmdReset OR s_bReqReset;
		s_bReqReset := FALSE;
		
		IF (NOT(s_bStaError) AND i_bReqEnable) THEN
			eSeqSEW_WithBrake := E_SeqSEW_WithBrake.INIT;
		END_IF
		
END_CASE

_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{247a12f4-0dca-4cad-aba1-676ebffdadcb}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnManualReleaseBrake();
s_fbHmiBtnManualApplyBrake();
s_fbHmiBtnManualForward();
s_fbHmiBtnManualBackward();
s_fbHmiBtnManualStop();
s_fbHmiBtnManualReset();

//Led
s_fbHmiLedBrakeReleased(i_bStaLed := s_bStaBrakeReleased);
s_fbHmiLedMotorStopped(i_bStaLed := s_bStaMotorStopped);
s_fbHmiLedDriveError(i_bStaLed := s_bStaDriveError);

{warning '#TODO: Add manual control from hmi'}
CASE i_eCtrlMode OF

	E_CtrlMode.IDLE..
	E_CtrlMode.AUTOMATIC:
		s_fbHmiBtnManualReleaseBrake.p_bStaVisible := FALSE;
		s_fbHmiBtnManualReleaseBrake.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnManualApplyBrake.p_bStaVisible := FALSE;
		s_fbHmiBtnManualApplyBrake.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnManualForward.p_bStaVisible := FALSE;
		s_fbHmiBtnManualForward.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnManualBackward.p_bStaVisible := FALSE;
		s_fbHmiBtnManualBackward.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnManualStop.p_bStaVisible := FALSE;
		s_fbHmiBtnManualStop.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnManualReset.p_bStaVisible := FALSE;
		s_fbHmiBtnManualReset.p_bStaEnabled := FALSE;
	
	E_CtrlMode.MANUAL:
		//Is het de bedoeling om op deze plekken de hmi knoppen aan te sturen, OF moet dat gedaan worden in METHOD hmi?
		s_fbHmiBtnManualReleaseBrake.p_bStaVisible := TRUE;
		s_fbHmiBtnManualReleaseBrake.p_bStaEnabled := i_bReqEnable;
		
		s_fbHmiBtnManualApplyBrake.p_bStaVisible := TRUE;
		s_fbHmiBtnManualApplyBrake.p_bStaEnabled := i_bReqEnable AND s_bStaMotorStopped;
		
		s_fbHmiBtnManualForward.p_bStaVisible := TRUE;
		s_fbHmiBtnManualForward.p_bStaEnabled := i_bReqEnable AND s_bStaMotorStopped AND s_bStaBrakeReleased;
		
		s_fbHmiBtnManualBackward.p_bStaVisible := TRUE;
		s_fbHmiBtnManualBackward.p_bStaEnabled := i_bReqEnable AND s_bStaMotorStopped AND s_bStaBrakeReleased;
		
		s_fbHmiBtnManualStop.p_bStaVisible := TRUE;
		s_fbHmiBtnManualStop.p_bStaEnabled := TRUE;
		
		s_fbHmiBtnManualReset.p_bStaVisible := TRUE;
		s_fbHmiBtnManualReset.p_bStaEnabled := TRUE;
		
		IF s_fbHmiBtnManualReleaseBrake.p_osrBtnPress THEN
			m_ReleaseBrake();
		END_IF
	
		IF s_fbHmiBtnManualApplyBrake.p_osrBtnPress THEN
			m_ApplyBrake();
		END_IF
			
		IF s_fbHmiBtnManualStop.p_osrBtnPress THEN
			m_Stop();	
		ELSIF s_fbHmiBtnManualForward.p_osrBtnPress THEN
			m_StartForward(i_rTargetSpeed := s_fTargetSpeed);
		ELSIF s_fbHmiBtnManualBackward.p_osrBtnPress THEN
			m_StartBackward(i_rTargetSpeed := s_fTargetSpeed);
		END_IF

		IF s_fbHmiBtnManualReset.p_osrBtnPress THEN
			m_Reset();
		END_IF	
	
END_CASE
	
_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{e95de6ba-8291-48d3-aa10-18b69b93d9d4}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

{warning '#TODO: Not sure if this control module needs initialzation'}
//--s_DOValve.i_stSettings.bCfgDelay 		:= FALSE;
//--s_DOValve.i_stSettings.tmOutputDelay 	:= T#0S;

//Hmi 
	s_fbHmiBtnManualReleaseBrake.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualReleaseBrake.p_bStaVisible := FALSE;
	s_fbHmiBtnManualReleaseBrake.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualReleaseBrake.p_sBtnText := 'Release Brake';
	
	s_fbHmiBtnManualApplyBrake.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualApplyBrake.p_bStaVisible := FALSE;
	s_fbHmiBtnManualApplyBrake.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualApplyBrake.p_sBtnText := 'Apply Brake';
	
	s_fbHmiBtnManualForward.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualForward.p_bStaVisible := FALSE;
	s_fbHmiBtnManualForward.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualForward.p_sBtnText := 'Move Forward';
	
	s_fbHmiBtnManualBackward.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualBackward.p_bStaVisible := FALSE;
	s_fbHmiBtnManualBackward.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualBackward.p_sBtnText := 'Move Backward';
	
	s_fbHmiBtnManualStop.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualStop.p_bStaVisible := FALSE;
	s_fbHmiBtnManualStop.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualStop.p_sBtnText := 'Stop';

	s_fbHmiBtnManualReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualReset.p_bStaVisible := FALSE;
	s_fbHmiBtnManualReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualReset.p_sBtnText := 'Reset';
	
	s_fbHmiLedBrakeReleased.p_bStaVisible := FALSE;
	s_fbHmiLedBrakeReleased.p_sToHmiDescriptionLed := 'Brake Released';
	
	s_fbHmiLedMotorStopped.p_bStaVisible := FALSE;
	s_fbHmiLedMotorStopped.p_sToHmiDescriptionLed := 'Motor Stopped';
	
	s_fbHmiLedDriveError.p_bStaVisible := FALSE;
	s_fbHmiLedDriveError.p_sToHmiDescriptionLed := 'Drive Error';
	
_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{3dd66686-d1af-4a23-8b08-c424814fad43}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

s_bStaReadyForOperation := I_bStaReadyForOperation;
s_bStaDriveError := NOT(I_bStaReadyForOperation);

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{f0e0fd71-b4a5-4c65-b115-0d3a3aae58a1}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
VAR_INST
	bCmdStart : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

//Write outputs to drive

bCmdStart := s_bCmdReset OR s_bCmdForward OR s_bCmdBackward;

Q_bCmdReleaseBrake := s_bCmdReleaseBrake;
Q_bCmdReverseDirection := s_bCmdBackward;
Q_bCmdStart := bCmdStart; 
Q_nSetTargetSpeed := LREAL_TO_INT(s_fTargetSpeed / i_stSettings.rMaxTargetSpeed * cMAX_INT_VALUE);
	
(*
// Generate reset pulse for resetting SEW-drive (via IO, one-shot on start)
s_tofResetPulse(
	IN := (i_bCmdReset OR s_bReqReset) AND s_bStaDriveError AND NOT(s_tofResetPulse.Q),
	PT := i_stSettings.tResetPulseDuration);
s_bReqReset := FALSE;

// Generate time delays for starting motor and brake
s_tonMotorStoppedDelay(
	IN := NOT(bCmdStart), //NOT(Q_bCmdStart),
	PT := i_stSettings.tMotorStoppedDelay,
	Q => s_bStaMotorStopped);

s_tonBrakeReleasedDelay(
	IN := Q_bCmdReleaseBrake,
	PT := i_stSettings.tBrakeReleasedDelay,
	Q => s_bStaBrakeReleased); 
	
Q_bCmdReleaseBrake := (i_bReqEnable AND s_bReqReleaseBrake)
						OR ((s_bReqStartForward AND NOT(i_bIclkForward)) OR (s_bReqStartBackward AND NOT(i_bIclkBackward)))
						OR NOT(s_bStaMotorStopped); // Make sure the brake can't be applied when drive is not stopped	

bCmdStart := i_bReqEnable AND ((s_bReqStartForward AND NOT(i_bIclkForward)) OR (s_bReqStartBackward AND NOT(i_bIclkBackward)));
Q_bCmdStart := s_tofResetPulse.Q OR (bCmdStart AND s_bStaBrakeReleased); // Make sure that drive can't start when brake is not released	
				
Q_bCmdReverseDirection := i_bReqEnable AND (s_bReqStartBackward AND NOT(i_bIclkBackward));

// Write (convert) target speed drive (analog output)
IF i_bReqEnable AND ((s_bReqStartForward AND NOT(i_bIclkForward)) OR (s_bReqStartBackward AND NOT(i_bIclkBackward))) THEN
	Q_nSetTargetSpeed := LREAL_TO_INT(s_fTargetSpeed / i_stSettings.rMaxTargetSpeed * cMAX_INT_VALUE);
ELSE
	Q_nSetTargetSpeed := 0;	
END_IF	
*)	
_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_ResetAllRequests" Id="{57997c19-826a-4646-b9a9-ad521099ef68}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PRIVATE _m_ResetAllRequests
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_bReqStop :=
s_bReqStartForward :=
s_bReqStartBackward :=
s_bReqReleaseBrake :=
s_bReqApplyBrake :=
s_bReqReset := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ApplyBrake" Id="{84406420-53a7-4cd1-828e-c4d2ed555d95}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_ApplyBrake : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqApplyBrake := TRUE;

m_ApplyBrake := NOT(s_bStaBrakeReleased);
//--m_ApplyBrake := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReleaseBrake" Id="{710cca1b-1464-4a44-9af2-adc97e3f5673}" FolderPath="Methods\">
      <Declaration><![CDATA[/// Release brake
METHOD PUBLIC m_ReleaseBrake : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqReleaseBrake := TRUE;

m_ReleaseBrake := s_bStaBrakeReleased;
//--m_ReleaseBrake := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Reset" Id="{7a4bff47-bee3-4de3-b793-bf5b0f24ba84}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqReset := TRUE;

m_Reset := s_bCmdReset;
//--m_Reset := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_StartBackward" Id="{49196a88-b792-4b99-9376-81b43964f03b}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_StartBackward : BOOL
VAR_INPUT
	i_rTargetSpeed : LREAL; // Target speed [mm/s]
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(i_bIclkBackward) THEN
	s_bReqStartBackward := TRUE;
	
	IF i_rTargetSpeed < 0 THEN
		s_fTargetSpeed := 0;
	ELSIF i_rTargetSpeed > cMAX_INT_VALUE THEN	
		i_rTargetSpeed := cMAX_INT_VALUE;
	ELSE 
		s_fTargetSpeed := i_rTargetSpeed;
	END_IF
	
ELSE
	s_wrnMotorBackwardInterlocked := TRUE;
END_IF

m_StartBackward := s_bCmdBackward;
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_StartForward" Id="{551b77ef-9474-4bb1-9b3d-8c47176aa994}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_StartForward : BOOL
VAR_INPUT
	i_rTargetSpeed : LREAL; // Target speed [mm/s]
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(i_bIclkForward) THEN
	s_bReqStartForward := TRUE;
	
	IF i_rTargetSpeed < 0 THEN
		s_fTargetSpeed := 0;
	ELSIF i_rTargetSpeed > cMAX_INT_VALUE THEN	
		i_rTargetSpeed := cMAX_INT_VALUE;
	ELSE 
		s_fTargetSpeed := i_rTargetSpeed;
	END_IF
	
ELSE	
	s_wrnMotorForwardInterlocked := TRUE;
END_IF

m_StartForward := s_bCmdForward;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Stop" Id="{e9ddf609-54b2-4594-bc3c-53ac00446898}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqStop := TRUE;

m_Stop := s_bStaMotorStopped;
//--m_Stop := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bStaBrakeReleased" Id="{9fbced02-9547-4710-b53f-47079111072e}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaBrakeReleased : BOOL]]></Declaration>
      <Get Name="Get" Id="{4b22f759-5b10-4a1a-8c0a-aa7be90f3a40}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaBrakeReleased := s_bStaBrakeReleased;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaMotorRunning" Id="{05cc9b52-a456-4963-9313-489e38d28904}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaMotorRunning : BOOL]]></Declaration>
      <Get Name="Get" Id="{48de4f54-9de3-4f86-a416-721c15990310}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaMotorRunning := s_bStaReadyForOperation AND NOT(s_bStaMotorStopped);
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaMotorStopped" Id="{a6d82e37-5355-4a67-b5f0-d07baedba186}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaMotorStopped : BOOL]]></Declaration>
      <Get Name="Get" Id="{88de46fd-3b89-42e4-ad0b-d4b96e0ab51a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaMotorStopped := s_bStaMotorStopped;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaWarning" Id="{3e920515-596a-4c3d-84da-0ea6f37727ef}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaWarning : BOOL]]></Declaration>
      <Get Name="Get" Id="{2fe82b32-7c2f-47ad-ae79-3e6ae11c117a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaWarning := s_bStaWarning;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="CM_SEW_WithBrake">
      <LineId Id="410" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="411" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake._m_Alarms">
      <LineId Id="28" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="103" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="159" Count="2" />
      <LineId Id="158" Count="0" />
      <LineId Id="163" Count="5" />
      <LineId Id="162" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="122" Count="3" />
      <LineId Id="128" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="129" Count="3" />
      <LineId Id="121" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="143" Count="2" />
      <LineId Id="140" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="2" />
      <LineId Id="147" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="176" Count="1" />
      <LineId Id="179" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake._m_Devices">
      <LineId Id="6" Count="3" />
      <LineId Id="76" Count="0" />
      <LineId Id="265" Count="3" />
      <LineId Id="155" Count="0" />
      <LineId Id="150" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="242" Count="1" />
      <LineId Id="73" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="270" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="134" Count="2" />
      <LineId Id="132" Count="0" />
      <LineId Id="138" Count="1" />
      <LineId Id="145" Count="0" />
      <LineId Id="140" Count="3" />
      <LineId Id="101" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="220" Count="2" />
      <LineId Id="273" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="275" Count="2" />
      <LineId Id="274" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="156" Count="3" />
      <LineId Id="177" Count="0" />
      <LineId Id="180" Count="1" />
      <LineId Id="186" Count="0" />
      <LineId Id="183" Count="2" />
      <LineId Id="196" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="259" Count="2" />
      <LineId Id="188" Count="3" />
      <LineId Id="119" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="211" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="200" Count="2" />
      <LineId Id="215" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="236" Count="3" />
      <LineId Id="272" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="229" Count="2" />
      <LineId Id="264" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="234" Count="1" />
      <LineId Id="233" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake._m_Hmi">
      <LineId Id="17" Count="3" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="132" Count="3" />
      <LineId Id="128" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="137" Count="4" />
      <LineId Id="136" Count="0" />
      <LineId Id="146" Count="2" />
      <LineId Id="90" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="159" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="161" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="163" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="165" Count="1" />
      <LineId Id="149" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="150" Count="1" />
      <LineId Id="189" Count="0" />
      <LineId Id="172" Count="15" />
      <LineId Id="168" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="200" Count="2" />
      <LineId Id="215" Count="1" />
      <LineId Id="213" Count="0" />
      <LineId Id="206" Count="6" />
      <LineId Id="191" Count="0" />
      <LineId Id="218" Count="2" />
      <LineId Id="217" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="87" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake._m_Init">
      <LineId Id="21" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="34" Count="22" />
      <LineId Id="27" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="6" />
      <LineId Id="67" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake._m_Inputs">
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="10" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake._m_Outputs">
      <LineId Id="29" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="123" Count="1" />
      <LineId Id="148" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="125" Count="3" />
      <LineId Id="147" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="95" Count="2" />
      <LineId Id="86" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="89" Count="2" />
      <LineId Id="94" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="109" Count="1" />
      <LineId Id="112" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake._m_ResetAllRequests">
      <LineId Id="6" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake.m_ApplyBrake">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake.m_ReleaseBrake">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="61" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake.m_Reset">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="38" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake.m_StartBackward">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="52" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake.m_StartForward">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="73" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="5" />
      <LineId Id="49" Count="0" />
      <LineId Id="74" Count="2" />
      <LineId Id="78" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake.m_Stop">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake.p_bStaBrakeReleased.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake.p_bStaMotorRunning.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake.p_bStaMotorStopped.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_SEW_WithBrake.p_bStaWarning.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>