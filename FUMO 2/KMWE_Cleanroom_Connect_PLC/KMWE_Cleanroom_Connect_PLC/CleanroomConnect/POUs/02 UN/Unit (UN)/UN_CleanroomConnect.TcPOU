<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="UN_CleanroomConnect" Id="{8b93890b-f796-4713-9491-f75e01fbeba7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK UN_CleanroomConnect EXTENDS Un_Base
VAR
	s_stSettings : ST_UN_CleanroomConnectSettings;	
	
	s_bTestDisableCabinDoors : BOOL := FALSE;

//------------------------------------------//
//Function Blocks
	sFbModeStateControl : FB_ModeStateControl;

	//EM Pallet Conveyor
	s_fbIlckHandlerConvBwd : FB_InterlockHandler;
	s_fbIlckHandlerConvFwd : FB_InterlockHandler;
	
	//EM Docking Interface
	s_fbIlckHandlerClampsToClose : FB_InterlockHandler;
	s_fbIlckHandlerClampsToOpen : FB_InterlockHandler;
	s_fbIlckHandlerDoorOpenerToClose : FB_InterlockHandler;
	s_fbIlckHandlerDoorOpenerToOpen : FB_InterlockHandler;
	s_fbIlckHandlerDoorShutterToClose : FB_InterlockHandler;
	s_fbIlckHandlerDoorShutterToOpen : FB_InterlockHandler;
	
	//EM Lifting Transport
	s_fbIlckHandlerTranportExtract : FB_InterlockHandler;
	
	//EM Doors
	s_fbIlckHandlerOuterCabinDoorOpen : FB_InterlockHandler;
	s_fbIlckHandlerOuterCabinDoorClose : FB_InterlockHandler;
	s_fbIlckHandlerInnerCabinDoorOpen : FB_InterlockHandler;
	s_fbIlckHandlerInnerCabinDoorClose : FB_InterlockHandler;
		
//------------------------------------------//

//------------------------------------------//
//Inputs
//??	s_diTwoHandControl			: FB_DigInput;

//------------------------------------------//

//------------------------------------------//
//Alarms
//------------------------------------------//
	
//------------------------------------------//
//Params

//------------------------------------------//

//--	s_bReqInbound : BOOL;
//--	s_bReqOutbound : BOOL;
//--	s_bReqDockTB : BOOL;
//--	s_bReqUndockTB : BOOL;
//--	s_bReqPickTrolleyFromTB : BOOL;
//--	s_bReqPlaceTrolleyInTB : BOOL;
	
	//--s_nStaInboundState : USINT;

//------------------------------------------//
//Variables
	s_bStaWarning : BOOL;
	s_bStaRunning : BOOL;
	
	s_bStaAllEmReady : BOOL;
	s_bStaEmError : BOOL;
	s_bCmdAbort : BOOL;
	s_bCmdHold : BOOL;
	
	s_eCtrlState : E_CtrlState;
//------------------------------------------//

//------------------------------------------//
//Properties

//------------------------------------------//

	//Sequencers
	s_eSeqCleanroomConnect : E_SeqCleanroomConnect;
	s_fbSeqControlCleanroomConnect : FB_SeqControl;
	
	s_ePreviousStep : E_SeqCleanroomConnect;
	s_eResumeStep : E_SeqCleanroomConnect;

	s_eReqAction : E_ReqAction;

(*	s_bStaTbIsDocked : BOOL;
	s_bStaTbIsUnDocked : BOOL;
	s_bStaInnerTbDoorIsOpen : BOOL;
	s_bStaInnerTbDoorIsClosed : BOOL;
*)	
	s_tonTimer : TON;
	
//------------------------------------------//
//Hmi
	s_fbHmiBtnAlarms : FB_HmiBtn;
	s_fbHmiBtnReset : FB_HmiBtn;
	
	s_fbHmiBtnInbound : FB_HmiBtn;
	s_fbHmiBtnOutbound : FB_HmiBtn;
	s_fbHmiBtnDockTB : FB_HmiBtn;
	s_fbHmiBtnUndockTB : FB_HmiBtn;
	s_fbHmiBtnOpenInnerTBDoor : FB_HmiBtn;
	s_fbHmiBtnCloseInnerTBDoor : FB_HmiBtn;
	s_fbHmiBtnPickTrolleyFromTB : FB_HmiBtn;
	s_fbHmiBtnPlaceTrolleyInTB : FB_HmiBtn;
	
//------------------------------------------//

//--s_bCreate : BOOL;
//--s_bDestroy : BOOL;

//--s_arr_bBoolTest : ARRAY [0..15] OF BOOL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Method Name="_m_Alarms" Id="{c0f56159-8f50-4d36-acac-c259038873b1}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

//overbruggen in automode tot en met place table blablabla
s_errEmergencyBtn(i_bStaActive 			:= NOT s_DiEmergencyBtn.p_bStaInput AND NOT GVL.g_fbHmiBtnSimulation.p_bStaBtn AND GVL.g_bConnectTestEquipment ,
				  i_eAlarmLevel 		:= E_AlarmLevel.Alarm,
				  i_sAlarmText 			:= 'Emergency button pressed');

IF GVL_KMWEGenericLib.g_fbAlarmManager.p_bAlarmActive THEN 
	GVL.g_eStaLedColor := E_KmweLedColors.Red;
END_IF

s_bStaError := s_errEmergencyBtn.q_bStaActive;

_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{68eeb98b-de01-4c23-9e4b-e0a75e4ed7ba}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

//------------------------------------------//
// Control Modules

//------------------------------------------//

//------------------------------------------//
//Outputs
//------------------------------------------//

//------------------------------------------//
//Inputs
//??	s_diTwoHandControl();
//------------------------------------------//

_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{6e489294-edbd-4c11-9b41-7f97eb3787da}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
VAR_INST
	s_sPrevPageAlarms 		: STRING;
	s_sPrevBottom1Alarms	: STRING;
	
	s_sCompanySelectionVisible	: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//------------------------------------------//
//Mode management
IF GVL_KMWEGenericLib.g_fbHmiBtnReturnToStart.p_osfBtnPress THEN
	s_eCtrlMode := E_CtrlMode.IDLE;

	GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= TRUE;
	GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= TRUE;	
END_IF

//------------------------------------------//

//------------------------------------------//
//Alarm Button can always be pressed
IF s_fbHmiBtnAlarms.p_osrBtnPress AND GVL.g_sToHmiMiddleContent <> GVL.g_stHmiMiddle.AlarmManager THEN
	s_sPrevPageAlarms			:= GVL.g_sToHmiMiddleContent;
	s_sPrevBottom1Alarms		:= GvL.g_sToHmiBottomContent;
	GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.AlarmManager;
	GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Alarm;
	
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible 			:= TRUE;
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled 			:= TRUE;
END_IF

IF GVL.g_sToHmiMiddleContent = GVL.g_stHmiMiddle.AlarmManager AND GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_osfBtnPress THEN
	GVL.g_sToHmiMiddleContent 	:=	s_sPrevPageAlarms;
	GVL.g_sToHmiBottomContent	:=	s_sPrevBottom1Alarms;
	
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible 			:= FALSE;
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled 			:= FALSE;
END_IF
//------------------------------------------//

//------------------------------------------//
//Hmi view management (General, Em can set module specific pages)
CASE s_eCtrlMode OF
	E_CtrlMode.IDLE:
(*		GVL.g_bConnectTestEquipment		:= TRUE;

		IF NOT GVL_KMWEGenericLib.g_fbAlarmManager.p_bAlarmActive THEN
			GVL.g_bLedFlashFast	:= FALSE;
			GVL.g_bLedFlashSlow	:= FALSE;
			GVL.g_eStaLedColor := E_KmweLedColors.Idle;
		END_IF
	
		s_fbHmiBtnTesterConfig.p_sBtnText		:= 'Tester Configuration';	
	
		IF GVL_KMWEGenericLib.g_fbHmiBtnReturnToStart.p_osfBtnPress THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := FALSE;

			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.Start;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Start;
		END_IF
		
		IF s_fbHmiBtnTesterConfig.p_osrBtnPress THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_nFolderIndex 	:= 1;
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := TRUE;

			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.TesterConfig;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.General_ReturnToStart;
		END_IF
		
		IF s_fbHmiBtnAutomatic.p_osrBtnPress THEN
			s_eCtrlMode 					:= E_CtrlMode.AUTOMATIC;
			GVL.g_bConnectTestEquipment		:= FALSE;
			
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_sBtnText		:= 'Acknowledge';
			
			GVL_KMWEGenericLib.g_fbParamManager.p_nFolderIndex 		:= 2;
			
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= FALSE;
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= FALSE;
	
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible		:= TRUE;
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled		:= TRUE;
			
			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.OperatorInputData;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Procedure;
		END_IF
		
		IF s_fbHmiBtnManual.p_osrBtnPress THEN
			s_eCtrlMode := E_CtrlMode.MANUAL;
			
			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.Manual;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.General_ReturnToStart;
		END_IF
*)
	E_CtrlMode.AUTOMATIC:
(*		s_fbHmiBtnTesterConfig.p_sBtnText		:= 'Procedure Configuration';
		
		IF GVL.g_sToHmiMiddleContent = GVL.g_stHmiMiddle.OperatorInputData 
			AND GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_osrBtnPress 
		THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := FALSE;

			GVL.g_sToHmiMiddleContent 							:= GVL.g_stHmiMiddle.Start;
			GVL.g_sToHmiBottomContent							:= GVL.g_stHmiBottomBar.Start;
			
			s_eCtrlMode 										:= E_CtrlMode.IDLE;	
		END_IF
		
		IF s_fbHmiBtnTesterConfig.p_osrBtnPress THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_nFolderIndex 	:= 2;
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := TRUE;

			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= FALSE;
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= FALSE;
			
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible		:= TRUE;
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled		:= TRUE;

			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.TesterConfig;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.General_Return;
		END_IF
		
		IF GVL.g_sToHmiMiddleContent = GVL.g_stHmiMiddle.TesterConfig THEN
			IF GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_osrBtnPress THEN
				GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.OperatorInputData;
				GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Procedure;
				
				GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible		:= FALSE;
				GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled		:= FALSE;
			END_IF
		END_IF
*)		
	E_CtrlMode.MANUAL:
		IF GVL_KMWEGenericLib.g_fbAlarmManager.p_osrAlarmsResolved THEN
			GVL.g_eStaLedColor := E_KmweLedColors.Green;
		END_IF
	
		GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= FALSE;
		GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= FALSE;
		
//		IF GVL_KMWEGenericLib.g_fbHmiBtnReturnToStart.p_osrBtnPress THEN
//			GVL.g_sToHmiMiddleContent 	:= ST_HmiMiddle.Start;
//			GVL.g_sToHmiBottomContect	:= ST_HmiBottomBar.Start;
//		END_IF
		;
END_CASE
//------------------------------------------//

//------------------------------------------//
//Hmi Buttons
s_fbHmiBtnAlarms();
s_fbHmiBtnReset();

s_fbHmiBtnInbound();
s_fbHmiBtnOutbound();
s_fbHmiBtnDockTB();
s_fbHmiBtnUndockTB();
s_fbHmiBtnOpenInnerTBDoor();
s_fbHmiBtnCloseInnerTBDoor();
s_fbHmiBtnPickTrolleyFromTB();
s_fbHmiBtnPlaceTrolleyInTB();

GVL.g_fbHmiBtnSimulation();
//------------------------------------------//
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{71192b96-a840-4eae-8166-473534974241}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//EM Config////////////////////////////////////////////////////////////////////////////////////////
//EM Utilities/////////////////////////////////////////////////////////////////////////////////////
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emUtilities);

GVL_Modules.g_emUtilities.i_bReqEnable := FALSE;
GVL_Modules.g_emUtilities.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emUtilities.i_bCmdReset := FALSE;
GVL_Modules.g_emUtilities.i_sEmName  := 'EM Utilities';

//EM Pallet Conveyor///////////////////////////////////////////////////////////////////////////////
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emPalletConveyor);

GVL_Modules.g_emPalletConveyor.i_bReqEnable := FALSE;
GVL_Modules.g_emPalletConveyor.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emPalletConveyor.i_bCmdReset := FALSE;
GVL_Modules.g_emPalletConveyor.i_sEmName  := 'EM Pallet Conveyor';

//EM Docking Interface/////////////////////////////////////////////////////////////////////////////
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emDockingInterface);

GVL_Modules.g_emDockingInterface.i_bReqEnable := FALSE;
GVL_Modules.g_emDockingInterface.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emDockingInterface.i_bCmdReset := FALSE;
GVL_Modules.g_emDockingInterface.i_sEmName  := 'EM Docking Interface';

//EM Lifting Transport/////////////////////////////////////////////////////////////////////////////
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emLiftingTransport);

GVL_Modules.g_emLiftingTransport.i_bReqEnable := FALSE;
GVL_Modules.g_emLiftingTransport.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emLiftingTransport.i_bCmdReset := FALSE;
GVL_Modules.g_emLiftingTransport.i_sEmName := 'EM Lifting Transport';

//EM Doors/////////////////////////////////////////////////////////////////////////////////////////
//?? Inner- and Outer Cabin Door are moved to EM_DockingInterface
(*
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emDoors);

GVL_Modules.g_emDoors.i_bReqEnable := FALSE;
GVL_Modules.g_emDoors.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emDoors.i_bCmdReset := FALSE;
GVL_Modules.g_emDoors.i_sEmName := 'EM Doors';
*)

//EM Interlocks////////////////////////////////////////////////////////////////////////////////////
//EM Utilities/////////////////////////////////////////////////////////////////////////////////////
//<none>

//EM Pallet Conveyor///////////////////////////////////////////////////////////////////////////////
//Conveyor
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[0].sReason := 'Docking Clamps Not Opened';
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[1].sReason := 'Unlocking Pins Not In';
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[2].sReason := 'Door Opener Not Closed';

s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[0].sReason := 'Docking Clamps Not Opened';
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[1].sReason := 'Unlocking Pins Not In';
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[2].sReason := 'Door Opener Not Closed';
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[3].sReason := 'Outer Cabin Door Not Opened';

//EM Docking Interface/////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerClampsToClose.i_stInterlockList.arr_Interlocks[0].sReason := 'No TB Detected';

s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[0].sReason := 'Cleanroom Door Not Closed';
s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Inner Cabin Door Not Closed';
s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[2].sReason := 'Outer Cabin Door Not Opened';

s_fbIlckHandlerDoorOpenerToClose.i_stInterlockList.arr_Interlocks[0].sReason := 'Inner Cabin Door Not Opened';

s_fbIlckHandlerDoorOpenerToOpen.i_stInterlockList.arr_Interlocks[0].sReason := 'Inner Cabin Door Not Opened';

s_fbIlckHandlerDoorShutterToClose.i_stInterlockList.arr_Interlocks[0].sReason := 'Inner Cabin Door Not Opened';

s_fbIlckHandlerDoorShutterToOpen.i_stInterlockList.arr_Interlocks[0].sReason := 'Inner Cabin Door Not Opened';

s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[0].sReason := 'TB At Docking Position';
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Lifting Transport Not At Idle Position';

s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Lifting Transport Not At Idle Position';

//EM Lifting Transport/////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[0].sReason := 'Door-Opener Not Opened';
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[1].sReason := 'Door-Shutter Not Opened';
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[2].sReason := 'Outer Cabin Door Is Not Opened';
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[3].sReason := 'Inner Cabin Door Is Not Opened';

//EM Doors
//Outer Cabin Door
//s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[0].sReason := 'none';

s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[0].sReason := 'TB At Docking Position';
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Lifting Transport Not At Idle Position';

//Inner Cabin Door
//s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[0].sReason := 'none';

s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[0].sReason := 'Lifting Transport Not At Idle Position';

//EM Setting///////////////////////////////////////////////////////////////////////////////////////
//EM Utilities/////////////////////////////////////////////////////////////////////////////////////
//<none>

//EM Pallet Conveyor///////////////////////////////////////////////////////////////////////////////
GVL_Modules.g_emPalletConveyor.i_ref_stSettings REF= s_stSettings.stSettingsPalletConveyor;

//Settings CM Pallet Conveyor (via parameter file)
//--20240924 s_stSettings.stSettingsPalletConveyor.fSpeedManual := 50.0; //mm/s
//--20240924 s_stSettings.stSettingsPalletConveyor.fSpeedGoToInfeed := 100.0; //mm/s
//--20240924 s_stSettings.stSettingsPalletConveyor.fSpeedGoToCentering := 100.0; //mm/s
//--20240924 s_stSettings.stSettingsPalletConveyor.fSpeedGoToDocking := 50.0; //mm/s

//Settings CM Centering
//--20240924 s_stSettings.stSettingsPalletConveyor.tTimeoutCenteringToCenter := T#3S;
//--20240924 s_stSettings.stSettingsPalletConveyor.tTimeoutCenteringToIdle := T#3S;

//EM Docking Interface/////////////////////////////////////////////////////////////////////////////
GVL_Modules.g_emDockingInterface.i_ref_stSettings REF= s_stSettings.stSettingsDockingInterface;

//Settings CM Docking Interface (via paramter file)
//--20240924 s_stSettings.stSettingsDockingInterface.tTimeoutDockingClamps := T#5S;
//--20240924 s_stSettings.stSettingsDockingInterface.tTimeoutUnlockingPins := T#5S;
//--20240924 s_stSettings.stSettingsDockingInterface.tTimeoutDoorOpener := T#5S;
//--20240924 s_stSettings.stSettingsDockingInterface.tTimeoutDoorShutter := T#5S;

//--20240924 s_stSettings.stSettingsDockingInterface.tCompressSealDuration := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayCloseDoorShutterReleasingPins := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayReleaseUnlockingPins := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayOpenDoorShutter := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayOpenDoorOpener := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayCloseDoorShutter := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayLockUnlockingPins := T#3S;

//--20240924 s_stSettings.stSettingsDockingInterface.bOpenClampsAfterClosingTimeout := FALSE;

//EM Lifting Transport/////////////////////////////////////////////////////////////////////////////
GVL_Modules.g_emLiftingTransport.i_ref_stSettings REF= s_stSettings.stSettingsLiftingTransport;

//General behavioir
s_stSettings.stSettingsLiftingTransport.bWaitForNextStep := FALSE;
s_stSettings.stSettingsLiftingTransport.bAutoRecoveryToIdle := FALSE;

//Homing
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fHomeOffset := 5.00; // mm
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fHomeOffset := 0.00; // mm

//Stopping
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fStopDec := 100.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fStopJrk := 1000.0; // mm/s^3

s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fStopDec := 100.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fStopJrk := 1000.0; // mm/s^3

//Mainteneance-mode:
//Jogging
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fJogVel := 5.0; // mm/s (jog speed is configured in the NC-Task)
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fJogAcc := 5.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fJogDec := 5.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fJogJrk := 50.0; // mm/s^3

s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fJogVel := 5.0; // mm/s (jog speed is configured in the NC-Task)
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fJogAcc := 5.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fJogDec := 5.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fJogJrk := 50.0; // mm/s^3

//Positioning
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fAbsPosPos := 5.0; // mm
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fAbsPosVel := 10.0; // mm/s
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fAbsPosAcc := 10.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fAbsPosDec := 10.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fAbsPosJrk := 100.0; // mm/s^3

s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fAbsPosPos := 0.0; // mm
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fAbsPosVel := 10.0; // mm/s
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fAbsPosAcc := 10.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fAbsPosDec := 10.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fAbsPosJrk := 100.0; // mm/s^3

//Manual- and Automatic-mode, Positioning
// [0] = Idle
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[0].fPos := 0.0; //[mm]	
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[0].fVel := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[0].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[0].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[0].fJrk := 100.0; //[mm/s^3]

// [1] = Pre Pick From TB
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[1].fPos := 306.01; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[1].fVel := 10.01; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[1].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[1].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[1].fJrk := 100.0; //[mm/s^3]

// [2] = Pick From TB
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[2].fPos := 331.02; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[2].fVel := 5.02; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[2].fAcc := 5.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[2].fDec := 5.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[2].fJrk := 50.0; //[mm/s^3]

// [3] = Raise From TB
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[3].fPos := 404.03; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[3].fVel := 10.03; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[3].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[3].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[3].fJrk := 100.0; //[mm/s^3]

// [4] = Pre Place In Cabin
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[4].fPos := 45.04; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[4].fVel := 10.04; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[4].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[4].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[4].fJrk := 100.0; //[mm/s^3]

// [5] = Place In Cabin
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[5].fPos := 0.05; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[5].fVel := 5.05; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[5].fAcc := 5.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[5].fDec := 5.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[5].fJrk := 50.0; //[mm/s^3]

// [6] = Pre Pick From Cabin
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[6].fPos := 10.06; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[6].fVel := 10.06; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[6].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[6].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[6].fJrk := 10.0; //[mm/s^3]

// [7] = Pick From Cabin
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[7].fPos := 45.07; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[7].fVel := 5.07; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[7].fAcc := 5.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[7].fDec := 5.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[7].fJrk := 50.0; //[mm/s^3]

// [8] = Raise From Cabin
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[8].fPos := 404.08; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[8].fVel := 10.08; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[8].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[8].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[8].fJrk := 100.0; //[mm/s^3]

// [9] = Pre Place In TB
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[9].fPos := 374.09; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[9].fVel := 10.09; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[9].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[9].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[9].fJrk := 100.0; //[mm/s^3]

// [10] = Place In TB
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[10].fPos := 331.10; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[10].fVel := 10.10; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[10].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[10].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[10].fJrk := 100.0; //[mm/s^3]

//--// [11] = Return In Cabin
//--s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[11].fPos := 0.11; //[mm]
//--s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[11].fVel := 10.11; //[mm/s] 
//--s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[11].fAcc := 10.0;  //[mm/s^2]
//--s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[11].fDec := 10.0; //[mm/s^2]
//--s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[11].fJrk := 100.0; //[mm/s^3]

//Automatic-Positioning Transport//////////////////////////////////////////////////////////////////
// [0] = Idle
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[0].fPos := 0.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[0].fVel := 100.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[0].fAcc := 100.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[0].fDec := 100.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[0].fJrk := 1000.0; //[mm/s^3]

// [1] = Pre Pick From TB
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[1].fPos := 1690.01; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[1].fVel := 200.02; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[1].fAcc := 200.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[1].fDec := 200.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[1].fJrk := 2000.0; //[mm/s^3]

// [2] = Pick From TB
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[2].fPos := 1715.02; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[2].fVel := 20.04; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[2].fAcc := 20.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[2].fDec := 20.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[2].fJrk := 200.0; //[mm/s^3]

// [3] = Place In Cabin
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[3].fPos := 0.03; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[3].fVel := 200.06; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[3].fAcc := 200.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[3].fDec := 200.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[3].fJrk := 2000.0; //[mm/s^3]

// [4] = Pre Place In TB
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[4].fPos := 1690.04; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[4].fVel := 200.08; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[4].fAcc := 200.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[4].fDec := 200.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[4].fJrk := 2000.0; //[mm/s^3]

// [5] = Place In TB
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[5].fPos := 1710.05; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[5].fVel := 20.10; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[5].fAcc := 20.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[5].fDec := 20.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[5].fJrk := 200.0; //[mm/s^3]

//--// [6] = Return In Cabin
//--s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[6].fPos := 0.06; //[mm]
//--s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[6].fVel := 200.12; //[mm/s] 
//--s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[6].fAcc := 200.0;  //[mm/s^2]
//--s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[6].fDec := 200.0; //[mm/s^2]
//--s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[6].fJrk := 2000.0; //[mm/s^3]

//EM Doors
//Settings Doors

//?? Inner- and Outer Cabin Door are moves to EM_DockingInterface
(*
GVL_Modules.g_emDoors.i_ref_stSettings REF= s_stSettings.stSettingsDoors;

GVL_Modules.g_emDoors.i_ref_stSettings.tOuterDoorTimeout := T#15S;
GVL_Modules.g_emDoors.i_ref_stSettings.tInnerDoorTimeout := T#15S;
GVL_Modules.g_emDoors.i_ref_stSettings.tCleanroomDoorTimeout := T#3S;
GVL_Modules.g_emDoors.i_ref_stSettings.tResetPulseDuration := T#1S;
*)

(* ++
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emDockingCabin);

GVL_Modules.g_emDockingCabin.i_bReqEnable := FALSE;
GVL_Modules.g_emDockingCabin.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emDockingCabin.i_bCmdReset := FALSE;
GVL_Modules.g_emDockingCabin.i_sEmName  := 'EM State Machine';

//Settings Doors
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDoors.tOuterDoorTimeout := T#15S;
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDoors.tCleanroomDoorTimeout := T#3S;
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDoors.tResetPulseDuration := T#1S;

//Settings Docking Interface
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDockingInterface.tClampsTimeout := T#5S;
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDockingInterface.tReleasePinsTimeout := T#5S;
*)
//Settings AirTreatment
//..GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsAirTrearment.. := TODO;

//------------------------------------------//
//Hmi Startup
GVL.g_sToHmiTopContent 		:= GVL.g_stHmiTopBar.GeneralTopbar;
GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.Start;
GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Start;
//------------------------------------------//

//------------------------------------------//
//Buttons
	s_fbHmiBtnAlarms.p_bStaVisible := TRUE;
	s_fbHmiBtnAlarms.p_bStaEnabled := TRUE;
	s_fbHmiBtnAlarms.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnAlarms.p_sBtnText := 'Alarms';
	
	s_fbHmiBtnReset.p_bStaVisible := TRUE;
	s_fbHmiBtnReset.p_bStaEnabled := TRUE;
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
//
	s_fbHmiBtnInbound.p_bStaVisible := TRUE;
	s_fbHmiBtnInbound.p_bStaEnabled := TRUE;
	s_fbHmiBtnInbound.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnInbound.p_sBtnText := 'Inbound';
		
	s_fbHmiBtnOutbound.p_bStaVisible := TRUE;
	s_fbHmiBtnOutbound.p_bStaEnabled := TRUE;
	s_fbHmiBtnOutbound.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnOutbound.p_sBtnText := 'Outbound';
	
	s_fbHmiBtnDockTB.p_bStaVisible := TRUE;
	s_fbHmiBtnDockTB.p_bStaEnabled := TRUE;
	s_fbHmiBtnDockTB.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnDockTB.p_sBtnText := 'Dock TB';
	
	s_fbHmiBtnUndockTB.p_bStaVisible := TRUE;
	s_fbHmiBtnUndockTB.p_bStaEnabled := TRUE;
	s_fbHmiBtnUndockTB.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnUndockTB.p_sBtnText := 'Undock TB';
	
	s_fbHmiBtnOpenInnerTBDoor.p_bStaVisible := TRUE;
	s_fbHmiBtnOpenInnerTBDoor.p_bStaEnabled := TRUE;
	s_fbHmiBtnOpenInnerTBDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnOpenInnerTBDoor.p_sBtnText := 'Open Inner TB Door';
	
	s_fbHmiBtnCloseInnerTBDoor.p_bStaVisible := TRUE;
	s_fbHmiBtnCloseInnerTBDoor.p_bStaEnabled := TRUE;
	s_fbHmiBtnCloseInnerTBDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnCloseInnerTBDoor.p_sBtnText := 'Close Inner TB Door';
	
	s_fbHmiBtnPickTrolleyFromTB.p_bStaVisible := TRUE;
	s_fbHmiBtnPickTrolleyFromTB.p_bStaEnabled := TRUE;
	s_fbHmiBtnPickTrolleyFromTB.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnPickTrolleyFromTB.p_sBtnText := 'Pick Trolley From TB';
	
	s_fbHmiBtnPlaceTrolleyInTB.p_bStaVisible := TRUE;
	s_fbHmiBtnPlaceTrolleyInTB.p_bStaEnabled := TRUE;
	s_fbHmiBtnPlaceTrolleyInTB.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnPlaceTrolleyInTB.p_sBtnText := 'Place Trolley In TB';
	
	GVL.g_fbHmiBtnSimulation.p_bStaVisible 	:= TRUE;
	GVL.g_fbHmiBtnSimulation.p_bStaEnabled	:= TRUE;
	GVL.g_fbHmiBtnSimulation.p_eButtontype 	:= E_HmiButtonType.TOGGLEBUTTON;
	GVL.g_fbHmiBtnSimulation.p_sBtnText		:= 'Simulation';
	
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible 	:= FALSE;
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled 	:= FALSE;
//------------------------------------------//

//??s_diTwoHandControl.i_stSettings.tmInputDelay := T#2S;

_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Modules" Id="{2372c80a-8810-4c92-8500-979916e08046}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Modules : BOOL
VAR
	bReqEnable : BOOL;
	
	//External interlocks for EM_PalletConveyor
	s_fbExtIlckConvFwd : FB_Interlock;
	s_fbExtIlckConvBwd : FB_Interlock;
	
	//External interlocks for EM_DockingInterface
	s_fbExtIlckDockingClampsToClose : FB_Interlock;
	s_fbExtIlckDockingClampsToOpen : FB_Interlock;
	s_fbExtIlckDoorOpenerToClose : FB_Interlock;
	s_fbExtIlckDoorOpenerToOpen : FB_Interlock;
	s_fbExtIlckDoorShutterToClose : FB_Interlock;
	s_fbExtIlckDoorShutterToOpen : FB_Interlock;
	
	//External interlocks for EM_LiftingTransport
	s_fbExtIlckLiftUp : FB_Interlock;	
	s_fbExtIlckLiftDown : FB_Interlock;
	s_fbExtIlckTransportExtract : FB_Interlock;
	s_fbExtIlckTransportRetract : FB_Interlock;
		
	//External interlocks for EM_Doors
	s_fbExtIlckOuterCabinDoorOpen : FB_Interlock;
	s_fbExtIlckOuterCabinDoorClose : FB_Interlock;
	s_fbExtIlckInnerCabinDoorOpen : FB_Interlock;
	s_fbExtIlckInnerCabinDoorClose : FB_Interlock;
	
	s_bSimCleanroomDoorClosed : BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL_Modules.g_objCarrier();

//--IF s_bCreate THEN GVL_Modules.g_objCarrier.m_Create(i_eDestination := E_Location.CLEANROOM); s_bCreate := FALSE; END_IF; 
//--IF s_bDestroy THEN GVL_Modules.g_objCarrier.m_Destroy(); s_bDestroy := FALSE; END_IF;

sFbModeStateControl(
	{warning '#TODO: Check if stopping mode on any error is ok, what to do if a valve does not reach posittion, death lock?'}
	i_bReqStopAlarm := (   GVL_Modules.g_emUtilities.p_bStaError
						OR GVL_Modules.g_emPalletConveyor.p_bStaError (*OR GVL_Modules.g_emPalletConveyor.p_bCmdHold*) 
						OR GVL_Modules.g_emDockingInterface.p_bStaError
						OR GVL_Modules.g_emLiftingTransport.p_bStaError )
						AND ( (s_eCtrlMode = E_CtrlMode.AUTOMATIC) OR (s_eCtrlMode = E_CtrlMode.MANUAL) ),
	i_bStaAllStopped := TRUE);

s_eCtrlMode := sFbModeStateControl.p_eCtrlMode;
s_eCtrlState :=	sFbModeStateControl.p_eCtrlState;

// EM_Utilities ///////////////////////////////////////////////////////////////////////////////////	
GVL_Modules.g_emUtilities.m_GetGeneralState(
	i_bError := s_bStaError,
	i_bWarning := s_bStaWarning,
	i_bRunning := s_bStaRunning);

GVL_Modules.g_emUtilities(
	i_bReqEnable := TRUE,
	i_eCtrlMode := s_eCtrlMode,
	i_eCtrlState := s_eCtrlState,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn); //Add temp reset button
	
bReqEnable :=
	GVL_Modules.g_emUtilities.p_bStaSafetyOk
	AND GVL_Modules.g_emUtilities.p_bStsPowerOk
	AND GVL_Modules.g_emUtilities.p_bStaAirPressureOk
	AND NOT GVL_Modules.g_emUtilities.p_bStaError;

// EM_PalletConveyor //////////////////////////////////////////////////////////////////////////////	
s_fbIlckHandlerConvBwd();
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaClampsOpened) AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking;
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaUnlockingPinsLocked) AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking;
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorOpenerClosed) AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking;

s_fbExtIlckConvBwd.i_bInterlocked := s_fbIlckHandlerConvBwd.p_bInterlocked;
s_fbExtIlckConvBwd(); 
IF s_fbIlckHandlerConvBwd.p_bInterlocked THEN
	s_fbExtIlckConvBwd.p_sReason := s_fbIlckHandlerConvBwd.p_sReason;
ELSE
	s_fbExtIlckConvBwd.p_sReason := '-';	
END_IF

s_fbIlckHandlerConvFwd();
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaClampsOpened) AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtCentering;
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaUnlockingPinsLocked) AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtCentering;
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorOpenerClosed) AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtCentering;
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[3].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStsReadyToReceiveTB) AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtCentering AND NOT(s_bTestDisableCabinDoors);

s_fbExtIlckConvFwd.i_bInterlocked := s_fbIlckHandlerConvFwd.p_bInterlocked;
s_fbExtIlckConvFwd(); 
IF s_fbIlckHandlerConvFwd.p_bInterlocked THEN
	s_fbExtIlckConvFwd.p_sReason := s_fbIlckHandlerConvFwd.p_sReason;
ELSE
	s_fbExtIlckConvFwd.p_sReason := '-';	
END_IF

GVL_Modules.g_emPalletConveyor(
	i_bReqEnable := bReqEnable,
	i_eCtrlMode := s_eCtrlMode,
	i_eCtrlState := s_eCtrlState,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_fbExtIlckConvFwd := s_fbExtIlckConvFwd,
	i_fbExtIlckConvBwd := s_fbExtIlckConvBwd,
	i_refTB := GVL_Modules.g_objCarrier);

// EM_DockingInterface ////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerClampsToClose();
{warning '#TODO: Not clear if this is realy an interlock, the clamp should now also close before the CabinDoors are allowed to close, in that case no TB will be present on Docking Position'}
s_fbIlckHandlerClampsToClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking) AND FALSE;

s_fbExtIlckDockingClampsToClose.i_bInterlocked := s_fbIlckHandlerClampsToClose.p_bInterlocked;
s_fbExtIlckDockingClampsToClose(); 
IF s_fbIlckHandlerClampsToClose.p_bInterlocked THEN
	s_fbExtIlckDockingClampsToClose.p_sReason := s_fbIlckHandlerClampsToClose.p_sReason;
ELSE
	s_fbExtIlckDockingClampsToClose.p_sReason := '-';	
END_IF

s_fbIlckHandlerClampsToOpen();
s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[0].bState := FALSE; //++NOT(GVL_Modules.g_emDoors.p_bStaCleanroomDoorNotClosedAndLocked);
//-- moved into EM s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDoors.p_bStaInnerDoorClosed);
//-- moved into EMs_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDoors.p_bStaOuterDoorOpened);

s_fbExtIlckDockingClampsToOpen.i_bInterlocked := s_fbIlckHandlerClampsToOpen.p_bInterlocked;
s_fbExtIlckDockingClampsToOpen(); 
IF s_fbIlckHandlerClampsToOpen.p_bInterlocked THEN
	s_fbExtIlckDockingClampsToOpen.p_sReason := s_fbIlckHandlerClampsToOpen.p_sReason;
ELSE
	s_fbExtIlckDockingClampsToOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerDoorOpenerToClose();
s_fbIlckHandlerDoorOpenerToClose.i_stInterlockList.arr_Interlocks[0].bState := FALSE; //-- AND NOT(GVL_Modules.g_emDoors.p_bStaInnerDoorOpened);

s_fbExtIlckDoorOpenerToClose.i_bInterlocked := s_fbIlckHandlerDoorOpenerToClose.p_bInterlocked;
s_fbExtIlckDoorOpenerToClose(); 
IF s_fbIlckHandlerDoorOpenerToClose.p_bInterlocked THEN
	s_fbExtIlckDoorOpenerToClose.p_sReason := s_fbIlckHandlerDoorOpenerToClose.p_sReason;
ELSE
	s_fbExtIlckDoorOpenerToClose.p_sReason := '-';	
END_IF

s_fbIlckHandlerDoorOpenerToOpen();
//-- moved into EM s_fbIlckHandlerDoorOpenerToOpen.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDoors.p_bStaInnerDoorOpened);

s_fbExtIlckDoorOpenerToOpen.i_bInterlocked := s_fbIlckHandlerDoorOpenerToOpen.p_bInterlocked;
s_fbExtIlckDoorOpenerToOpen(); 
IF s_fbIlckHandlerDoorOpenerToOpen.p_bInterlocked THEN
	s_fbExtIlckDoorOpenerToOpen.p_sReason := s_fbIlckHandlerDoorOpenerToOpen.p_sReason;
ELSE
	s_fbExtIlckDoorOpenerToOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerDoorShutterToClose();
s_fbIlckHandlerDoorShutterToClose.i_stInterlockList.arr_Interlocks[0].bState := FALSE; //-- AND NOT(GVL_Modules.g_emDoors.p_bStaInnerDoorOpened);

s_fbExtIlckDoorShutterToClose.i_bInterlocked := s_fbIlckHandlerDoorShutterToClose.p_bInterlocked;
s_fbExtIlckDoorShutterToClose(); 
IF s_fbIlckHandlerDoorShutterToClose.p_bInterlocked THEN
	s_fbExtIlckDoorShutterToClose.p_sReason := s_fbIlckHandlerDoorShutterToClose.p_sReason;
ELSE
	s_fbExtIlckDoorShutterToClose.p_sReason := '-';	
END_IF

s_fbIlckHandlerDoorShutterToOpen();
//-- moved into EM s_fbIlckHandlerDoorShutterToOpen.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDoors.p_bStaInnerDoorOpened);

s_fbExtIlckDoorShutterToOpen.i_bInterlocked := s_fbIlckHandlerDoorShutterToOpen.p_bInterlocked;
s_fbExtIlckDoorShutterToOpen(); 
IF s_fbIlckHandlerDoorShutterToOpen.p_bInterlocked THEN
	s_fbExtIlckDoorShutterToOpen.p_sReason := s_fbIlckHandlerDoorShutterToOpen.p_sReason;
ELSE
	s_fbExtIlckDoorShutterToOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerOuterCabinDoorOpen();
//-- Move into EM s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaClampsClosed);
//-- Move into EM s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
//-- Move into EM s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaUnlockingPinsLocked);

s_fbExtIlckOuterCabinDoorOpen.i_bInterlocked := s_fbIlckHandlerOuterCabinDoorOpen.p_bInterlocked;
s_fbExtIlckOuterCabinDoorOpen(); 
IF s_fbIlckHandlerOuterCabinDoorOpen.p_bInterlocked THEN
	s_fbExtIlckOuterCabinDoorOpen.p_sReason := s_fbIlckHandlerOuterCabinDoorOpen.p_sReason;
ELSE
	s_fbExtIlckOuterCabinDoorOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerOuterCabinDoorClose();
//-- Move into EM s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaClampsClosed);
//-- Move into EM s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[0].bState := GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking;
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emLiftingTransport.p_bStaAtIdlePosition);

s_fbExtIlckOuterCabinDoorClose.i_bInterlocked := s_fbIlckHandlerOuterCabinDoorClose.p_bInterlocked; 
s_fbExtIlckOuterCabinDoorClose();
IF s_fbIlckHandlerOuterCabinDoorClose.p_bInterlocked THEN
	s_fbExtIlckOuterCabinDoorClose.p_sReason := s_fbIlckHandlerOuterCabinDoorClose.p_sReason;
ELSE
	s_fbExtIlckOuterCabinDoorClose.p_sReason := '-';	
END_IF

s_fbIlckHandlerInnerCabinDoorOpen();
//-- Move into EM s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaClampsClosed);
//-- Move into EM s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
//-- Move into EM s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaUnlockingPinsLocked);
s_fbExtIlckInnerCabinDoorOpen.i_bInterlocked := s_fbIlckHandlerInnerCabinDoorOpen.p_bInterlocked;
s_fbExtIlckInnerCabinDoorOpen(); 
IF s_fbIlckHandlerInnerCabinDoorOpen.p_bInterlocked THEN
	s_fbExtIlckInnerCabinDoorOpen.p_sReason := s_fbIlckHandlerInnerCabinDoorOpen.p_sReason;
ELSE
	s_fbExtIlckInnerCabinDoorOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerInnerCabinDoorClose();
//-- Move into EM s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaClampsClosed);
//-- Move into EM s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emLiftingTransport.p_bStaAtIdlePosition);
s_fbExtIlckInnerCabinDoorClose.i_bInterlocked := s_fbIlckHandlerInnerCabinDoorClose.p_bInterlocked;
s_fbExtIlckInnerCabinDoorClose(); 
IF s_fbIlckHandlerInnerCabinDoorClose.p_bInterlocked THEN
	s_fbExtIlckInnerCabinDoorClose.p_sReason := s_fbIlckHandlerInnerCabinDoorClose.p_sReason;
ELSE
	s_fbExtIlckInnerCabinDoorClose.p_sReason := '-';	
END_IF

GVL_Modules.g_emDockingInterface(
	i_bTestDisableCabinDoors := s_bTestDisableCabinDoors, 
	i_bReqEnable := bReqEnable,
	i_eCtrlMode := s_eCtrlMode,
	i_eCtrlState := s_eCtrlState,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_bStaTbAtDockingPosition := GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking,
	i_fbExtIlckDockingClampsToOpen := s_fbExtIlckDockingClampsToOpen,
	i_fbExtIlckDockingClampsToClose := s_fbExtIlckDockingClampsToClose,
	i_fbExtIlckDoorOpenerToOpen := s_fbExtIlckDoorOpenerToOpen,
	i_fbExtIlckDoorOpenerToClose := s_fbExtIlckDoorOpenerToClose,
	i_fbExtIlckDoorShutterToOpen := s_fbExtIlckDoorShutterToOpen,
	i_fbExtIlckDoorShutterToClose := s_fbExtIlckDoorShutterToClose,
	i_fbExtIlckOuterCabinDoorToOpen := s_fbExtIlckOuterCabinDoorOpen,
	i_fbExtIlckOuterCabinDoorToClose := s_fbExtIlckOuterCabinDoorClose,
	i_fbExtIlckInnerCabinDoorToOpen := s_fbExtIlckInnerCabinDoorOpen,
	i_fbExtIlckInnerCabinDoorToClose := s_fbExtIlckInnerCabinDoorClose,
	i_refTB := GVL_Modules.g_objCarrier);	

// EM_LiftingTransport ////////////////////////////////////////////////////////////////////////////	
s_fbIlckHandlerTranportExtract();
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorOpenerOpened);
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterOpened);
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaOuterDoorOpened);
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[3].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened);

s_fbExtIlckTransportExtract.i_bInterlocked := s_fbIlckHandlerTranportExtract.p_bInterlocked;
s_fbExtIlckTransportExtract();
IF s_fbIlckHandlerTranportExtract.p_bInterlocked THEN
	s_fbExtIlckTransportExtract.p_sReason := s_fbIlckHandlerTranportExtract.p_sReason;
ELSE
	s_fbExtIlckTransportExtract.p_sReason := '-';	
END_IF

GVL_Modules.g_emLiftingTransport(
	i_bReqEnable := bReqEnable,
	i_eCtrlMode := s_eCtrlMode,
	i_eCtrlState := s_eCtrlState,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_fbExtIlckLiftUp := s_fbExtIlckLiftUp,
	i_fbExtIlckLiftDown := s_fbExtIlckLiftDown,
	i_fbExtIlckTransportExtract := s_fbExtIlckTransportExtract,
	i_fbExtIlckTransportRetract := s_fbExtIlckTransportRetract,
	i_refTB := GVL_Modules.g_objCarrier);

(*	
// EM_Doors ///////////////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerOuterCabinDoorOpen();
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaClampsClosed);
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaUnlockingPinsLocked);
s_fbExtIlckOuterCabinDoorOpen();
s_fbExtIlckOuterCabinDoorOpen.i_bInterlocked := s_fbIlckHandlerOuterCabinDoorOpen.p_bInterlocked; 
IF s_fbIlckHandlerOuterCabinDoorOpen.p_bInterlocked THEN
	s_fbExtIlckOuterCabinDoorOpen.p_sReason := s_fbIlckHandlerOuterCabinDoorOpen.p_sReason;
ELSE
	s_fbExtIlckOuterCabinDoorOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerOuterCabinDoorClose();
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaClampsClosed);
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[2].bState := GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking;
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[3].bState := NOT(GVL_Modules.g_emLiftingTransport.p_bStaAtIdlePosition);
s_fbExtIlckOuterCabinDoorClose();
s_fbExtIlckOuterCabinDoorClose.i_bInterlocked := s_fbIlckHandlerOuterCabinDoorClose.p_bInterlocked; 
IF s_fbIlckHandlerOuterCabinDoorClose.p_bInterlocked THEN
	s_fbExtIlckOuterCabinDoorClose.p_sReason := s_fbIlckHandlerOuterCabinDoorClose.p_sReason;
ELSE
	s_fbExtIlckOuterCabinDoorClose.p_sReason := '-';	
END_IF

s_fbIlckHandlerInnerCabinDoorOpen();
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaClampsClosed);
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaUnlockingPinsLocked);
s_fbExtIlckInnerCabinDoorOpen();
s_fbExtIlckInnerCabinDoorOpen.i_bInterlocked := s_fbIlckHandlerInnerCabinDoorOpen.p_bInterlocked; 
IF s_fbIlckHandlerInnerCabinDoorOpen.p_bInterlocked THEN
	s_fbExtIlckInnerCabinDoorOpen.p_sReason := s_fbIlckHandlerInnerCabinDoorOpen.p_sReason;
ELSE
	s_fbExtIlckInnerCabinDoorOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerInnerCabinDoorClose();
s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaClampsClosed);
s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emLiftingTransport.p_bStaAtIdlePosition);
s_fbExtIlckInnerCabinDoorClose();
s_fbExtIlckInnerCabinDoorClose.i_bInterlocked := s_fbIlckHandlerInnerCabinDoorClose.p_bInterlocked; 
IF s_fbIlckHandlerInnerCabinDoorClose.p_bInterlocked THEN
	s_fbExtIlckInnerCabinDoorClose.p_sReason := s_fbIlckHandlerInnerCabinDoorClose.p_sReason;
ELSE
	s_fbExtIlckInnerCabinDoorClose.p_sReason := '-';	
END_IF
	
GVL_Modules.g_emDoors(
	i_bReqEnable := TRUE,
	i_eCtrlMode := s_eCtrlMode,
	i_eCtrlState := s_eCtrlState,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_bStaInfeedSealed := GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking AND GVL_Modules.g_emDockingInterface.p_bStaDocked,
	i_sEmName := 'EM Doors',
	i_ref_objCarrier := GVL_Modules.g_objCarrier,
	i_fbExtIlckOuterDoorOpen := s_fbExtIlckOuterCabinDoorOpen,
	i_fbExtIlckOuterDoorClose := s_fbExtIlckOuterCabinDoorClose,
	i_fbExtIlckInnerDoorOpen := s_fbExtIlckInnerCabinDoorOpen,
	i_fbExtIlckInnerDoorClose := s_fbExtIlckInnerCabinDoorClose);
*)
s_bStaError :=
	GVL_Modules.g_emUtilities.q_bStaError 
	OR GVL_Modules.g_emPalletConveyor.q_bStaError
	OR GVL_Modules.g_emDockingInterface.q_bStaError
	OR GVL_Modules.g_emLiftingTransport.q_bStaError;
//++	OR GVL_Modules.g_emDoors.q_bStaError;
//++OR GVL_Modules.g_emDockingCabin.q_bStaError


s_bStaWarning := 
	GVL_Modules.g_emUtilities.q_bStaWarning 
	OR GVL_Modules.g_emPalletConveyor.q_bStaWarning
	OR GVL_Modules.g_emDockingInterface.q_bStaWarning
	OR GVL_Modules.g_emLiftingTransport.q_bStaWarning;
//++	OR GVL_Modules.g_emDoors.q_bStaWarning;
//++OR GVL_Modules.g_emDockingCabin.q_bStaWarning

_m_Modules := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_SelectConfigFile" Id="{7c7e81b7-08ef-4473-8a6d-b20d88aaf565}">
      <Declaration><![CDATA[METHOD PRIVATE _m_SelectConfigFile : BOOL
VAR_INPUT
	i_bCmdReset 			: BOOL;
END_VAR
VAR_INST	
	i, x					: UDINT;
		
	s_aPossibleRevs			: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;
	
	s_aConfigFileNames 		: ARRAY[0..Param_Project.n_MaxParamFiles] OF T_MAXSTRING;
	s_aConfigFileDUTs		: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;	
	s_aConfigFileRev		: ARRAY[0..Param_Project.n_MaxParamFiles] OF T_MAXSTRING;
	
	s_aSingleDUTs			: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;
	s_aSingleREVs			: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;
		
	s_nIndexDut				: INT;
//	s_nIndexSR				: INT;
	s_nIndexRev				: INT;
	
	s_nIndexDutPrev			: INT;
	s_nIndexRevPrev			: INT;
	
	s_sChosenFile			: T_MAXSTRING;
	s_sToHmiChosenFile		: T_MAXSTRING;
	
	s_bCmdResetInternal	 	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//1413824/E test bestand met deze naam.

IF i_bCmdReset OR s_bCmdResetInternal THEN	
	MEMSET(ADR(s_aConfigFileNames), 0, SIZEOF(s_aConfigFileNames));
	MEMSET(ADR(s_aConfigFileDUTs), 0, SIZEOF(s_aConfigFileDUTs));
	MEMSET(ADR(s_aSingleDUTs), 0, SIZEOF(s_aSingleDUTs));
	
	MEMCPY(ADR(s_aConfigFileNames), ADR(GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi), SIZEOF(GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi));
	
	s_nIndexDut		:= -1;
//	s_nIndexSR		:= -1;
	s_nIndexRev		:= -1;
	
	FOR i := 0 TO Param_Project.n_MaxParamFiles DO 
		FindAndSplit(pSeparator:= ADR('^'),
							 pSrcString:= ADR(s_aConfigFileNames[i]),
							 pLeftString:= ADR(s_aConfigFileDUTs[i]),
							 nLeftSize:= SIZEOF(s_aConfigFileDUTs[i]),
							 pRightString:= ADR(s_aConfigFileRev[i]),
							 nRightSize:= SIZEOF(s_aConfigFileRev[i]),
							 bSearchFromRight:= FALSE);	

		s_aConfigFileRev[i] := 	DELETE(s_aConfigFileRev[i], 6, 2);			
	END_FOR
	
	F_CheckDuplicatesInArray(iq_aOriginalArray := s_aConfigFileDUTs, iq_aUniqueArray := s_aSingleDUTs);

	IF s_aConfigFileNames[0] = '' THEN
		s_bCmdResetInternal := TRUE;	
	ELSE
		s_bCmdResetInternal := FALSE;	
	END_IF
END_IF

IF s_nIndexDutPrev <> s_nIndexDut AND s_nIndexDutPrev <> -1 THEN
	s_nIndexRev := -1;
	
	MEMSET(ADR(s_aSingleREVs), 0, SIZEOF(s_aSingleREVs));
END_IF

IF s_nIndexDut <> -1 AND s_nIndexRev = -1 THEN 
	x := 0;
	MEMSET(ADR(s_aSingleREVs), 0, SIZEOF(s_aSingleREVs));
	MEMSET(ADR(s_aPossibleRevs), 0, SIZEOF(s_aPossibleRevs));
	FOR i:= 0 TO Param_Project.n_MaxParamFiles DO
		IF FIND(s_aConfigFileNames[i], s_aSingleDUTs[s_nIndexDut]) <> 0 THEN
			s_aPossibleRevs[x] := MID(s_aConfigFileNames[i],1,FIND(s_aConfigFileNames[i], '^')+1);
			x := x + 1;
		END_IF					
	END_FOR	
	
	F_CheckDuplicatesInArray(iq_aOriginalArray := s_aPossibleRevs, iq_aUniqueArray := s_aSingleREVs); 
END_IF

IF s_nIndexDut <> -1 AND s_nIndexRev <> -1 AND s_nIndexRevPrev <> s_nIndexRev THEN
	FOR i := 0 TO Param_Project.n_MaxParamFiles DO
		IF s_aConfigFileNames[i] = CONCAT(s_aSingleDUTs[s_nIndexDut], 
										CONCAT('^', 
										CONCAT(s_aSingleRevs[s_nIndexRev], '.csv')))
		THEN
			s_sChosenFile := s_aConfigFileNames[i];
		END_IF
	END_FOR
	
	FOR i := 0 TO Param_Project.n_MaxParamFiles DO
		IF GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi[i] = s_sChosenFile THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_nHmiFileSelected := TO_UDINT(i);
		END_IF
	END_FOR 
END_IF

IF s_aConfigFileNames[GVL_KMWEGenericLib.g_fbParamManager.p_nHmiFileSelected] <> s_sChosenFile THEN
	s_nIndexDut	:= -1;
	s_nIndexRev	:= -1;
	
	MEMSET(ADR(s_aSingleREVs), 0, SIZEOF(s_aSingleREVs));
END_IF

s_sChosenFile 		:= GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi[GVL_KMWEGenericLib.g_fbParamManager.p_nHmiFileSelected];
s_sToHmiChosenFile 	:= DELETE(s_sChosenFile, 4, FIND(s_sChosenFile, '.csv'));

s_nIndexRevPrev := s_nIndexRev;
s_nIndexDutPrev	:= s_nIndexDut;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_FullCycle" Id="{85945a60-1e58-4d91-af47-0c270dd5f580}">
      <Declaration><![CDATA[METHOD PUBLIC m_FullCycle : BOOL

VAR_INPUT
	i_objTB : REFERENCE TO OBJ_Carrier;
END_VAR


VAR_INST
	osrTbToCenter : R_TRIG;
	osrTbToDocking : R_TRIG;
	osrTbToInfeed : R_TRIG;
	osrCenterTb : R_TRIG;
	
	osrDockTb : R_TRIG;
	osrUndockTb : R_TRIG;
	osrOpenInnerDoor : R_TRIG;
	osrCloseInnerDoor : R_TRIG;
	
	osrPickTrolleyFromTb : R_TRIG;
	osrPlaceTrollerInTb : R_TRIG;
	
	arr_bTestCmd : ARRAY[0..15] OF BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(__ISVALIDREF(i_objTB)) THEN
	RETURN;
END_IF

m_SeqCleanroomConnect();

//Pallet Conveyor
IF arr_bTestCmd[0] THEN GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed(); arr_bTestCmd[0] := FALSE; END_IF
IF arr_bTestCmd[1] THEN GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter(); arr_bTestCmd[1] := FALSE; END_IF
IF arr_bTestCmd[2] THEN GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB(); arr_bTestCmd[2] := FALSE; END_IF
IF arr_bTestCmd[3] THEN GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking(); arr_bTestCmd[3] := FALSE; END_IF

//Docking Interface
IF arr_bTestCmd[4] THEN GVL_Modules.g_emDockingInterface.m_ReqDockTB(); arr_bTestCmd[4] := FALSE; END_IF
IF arr_bTestCmd[5] THEN GVL_Modules.g_emDockingInterface.m_ReqOpenInnerDoor(); arr_bTestCmd[5] := FALSE; END_IF
IF arr_bTestCmd[6] THEN GVL_Modules.g_emDockingInterface.m_ReqCloseInnerDoor(); arr_bTestCmd[6] := FALSE; END_IF
IF arr_bTestCmd[7] THEN GVL_Modules.g_emDockingInterface.m_ReqUndockTB(); arr_bTestCmd[7] := FALSE; END_IF

//Lifting transport
IF arr_bTestCmd[8] THEN GVL_Modules.g_emLiftingTransport.m_ReqGoToIdle(); arr_bTestCmd[8] := FALSE; END_IF
IF arr_bTestCmd[9] THEN GVL_Modules.g_emLiftingTransport.m_ReqPickTrolleyFromTB(); arr_bTestCmd[9] := FALSE; END_IF
IF arr_bTestCmd[10] THEN GVL_Modules.g_emLiftingTransport.m_ReqPlaceTrolleyInTB(); arr_bTestCmd[10] := FALSE; END_IF


//Unit will control lower-layer control modules based on data in Object Carrier
//By changing the data in this object the behanvior can be manipulated / controlled.

{warning '#TODO: Na gaan of het in onderstaande code niet beter zou zijn om puur te kijken naar de data uit de struct ipv naar properties uit de onderliggende modules?'}
// zoals bij voorbeeld voor TB centered status

//EM_PalletConveyor
IF i_objTB.p_eDestination <> E_Location.UNKNOWN	THEN

	//Transporting TB to Center
	osrTbToCenter(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING) 
		AND i_objTB.p_eDestination > i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation < E_Location.CENTERING  
		AND i_objTB.p_bOuterDoorOpened
		AND i_objTB.p_bApprovedAtInfeed);
	
	IF osrTbToCenter.Q THEN
		GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter();
	END_IF
			
	//Transporting TB to Docking
	osrTbToDocking(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING)
		AND i_objTB.p_eDestination > i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation < E_Location.DOCKING 
		AND GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone
		AND GVL_Modules.g_emDockingInterface.p_bStaUndocked);
	
	IF osrTbToDocking.Q THEN
		GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking();
	END_IF	
		
	//Transporting TB to Infeed
	osrTbToInfeed(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING)
		AND i_objTB.p_eDestination < i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation > E_Location.INFEED
		AND GVL_Modules.g_emDockingInterface.p_bStaUndocked);
	
	IF osrTbToInfeed.Q THEN
		GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed();
	END_IF
	
	//Centering TB
	osrCenterTb(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING) 
		AND i_objTB.p_eActLocation = E_Location.CENTERING  
		AND NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone));
	
	IF osrCenterTb.Q THEN
		GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB();
	END_IF
	
END_IF
	
//EM_DockingInterface
IF i_objTB.p_eDestination <> E_Location.UNKNOWN	THEN
	
	//Docking TB
	osrDockTb(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING) 
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination > E_Location.DOCKING 
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaDocked));

	IF osrDockTb.Q THEN
		GVL_Modules.g_emDockingInterface.m_ReqDockTB();
	END_IF
	
	//Undocking TB
	osrUndockTb(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING)
		AND i_objTB.p_eActLocation = E_Location.DOCKING //Is this about the TB or Trolley location? 
		AND i_objTB.p_eDestination < E_Location.DOCKING
		AND GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosed
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaUndocked));
	
	IF osrUndockTb.Q THEN
		GVL_Modules.g_emDockingInterface.m_ReqUndockTB();
	END_IF

	//Opening Inner Door TB
	osrOpenInnerDoor(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING)
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination > E_Location.DOCKING
		AND GVL_Modules.g_emDockingInterface.p_bStaDocked
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened));
	
	IF osrOpenInnerDoor.Q THEN
		GVL_Modules.g_emDockingInterface.m_ReqOpenInnerDoor();
	END_IF
			
	//Closing Inner Door TB
	osrCloseInnerDoor(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING)
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination < E_Location.DOCKING
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosed));
	
	IF osrCloseInnerDoor.Q THEN
		GVL_Modules.g_emDockingInterface.m_ReqCloseInnerDoor();
	END_IF
	
END_IF	

//EM_LiftingTransport
IF i_objTB.p_eDestination <> E_Location.UNKNOWN	THEN

	//Picking trolley from TB
	osrPickTrolleyFromTb(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING) 
		AND i_objTB.p_eDestination > i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation < E_Location.CENTERING  
		AND i_objTB.p_bOuterDoorOpened
		AND i_objTB.p_bApprovedAtInfeed);
	
	IF osrPickTrolleyFromTb.Q THEN
		GVL_Modules.g_emLiftingTransport.m_ReqPickTrolleyFromTB();
	END_IF
	
	//Place trolley TB TB
	osrPickTrolleyFromTb(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING) 
		AND i_objTB.p_eDestination > i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation < E_Location.CENTERING  
		AND i_objTB.p_bOuterDoorOpened
		AND i_objTB.p_bApprovedAtInfeed);
	
	IF osrPickTrolleyFromTb.Q THEN
		GVL_Modules.g_emLiftingTransport.m_ReqPickTrolleyFromTB();
	END_IF
	
END_IF
	
(* Lod Code 20241108	
//EM_PalletConveyor
	
	//Transporting TB to Center
	IF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eDestination > i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation < E_Location.CENTERING  
		AND i_objTB.p_bOuterDoorOpened
		AND i_objTB.p_bApprovedAtInfeed THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter();
			
	//Transporting TB to Docking		
	ELSIF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eDestination > i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation < E_Location.DOCKING 
		AND GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone
		AND GVL_Modules.g_emDockingInterface.p_bStaUndocked THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking();
	
	//Transporting TB to Infeed
	ELSIF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eDestination < i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation > E_Location.INFEED
		AND GVL_Modules.g_emDockingInterface.p_bStaUndocked THEN 
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed();
	
	END_IF
	
	//Centering TB
	IF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.CENTERING  
		AND NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone) THEN
		///AND NOT(i_objTB.p_bCenteringDone) AND NOT(bTest) THEN
		; 
		//	GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB();
	END_IF
	
	osrCenterTb(
		CLK := i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.CENTERING  
		AND NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone));
	
	IF osrCenterTb.Q THEN
		GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB();
	END_IF
	
//EM_DockingInterface

	//Docking TB
	IF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination > E_Location.DOCKING 
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaDocked) THEN
			GVL_Modules.g_emDockingInterface.m_ReqDockTB();
			
	//Undocking TB
	ELSIF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.DOCKING		//Is this about the TB or Trolley location? 
		AND i_objTB.p_eDestination < E_Location.DOCKING
		AND GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosedAndLocked
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaUndocked) THEN  
			GVL_Modules.g_emDockingInterface.m_ReqUndockTB();

	//Opening Inner Door TB
	ELSIF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination > E_Location.DOCKING
		AND GVL_Modules.g_emDockingInterface.p_bStaDocked
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpenedAndReleased) THEN  
			GVL_Modules.g_emDockingInterface.m_ReqOpenInnerDoor();
			
	//Closing Inner Door TB
	ELSIF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination < E_Location.DOCKING
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosedAndLocked) THEN  
			GVL_Modules.g_emDockingInterface.m_ReqCloseInnerDoor();
			
	END_IF
*)
//EM_LiftingTransport
	//Get Trolley from TB to Cabin
	//Get Trolley from Cabin to TB
	//..	
	
//EM_Doors
	//Open Cabin door Infeed
	//Close Cabin door Infeed
	
	//Release Cleanroom Door
	//Lock Cleanroom Door
	//..

//EM_..	
	
	
//-- Old Code
//FullCycle
//++	m_Inbound();
//	Wait(T#5S)
//	m_Outbound();]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{bf5d9d9d-3881-4722-ad23-ed0781ff35d5}">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
VAR
	s_bStaReady : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

GVL.g_osrNotify();

//--GVL_DataLogging.g_fbDataLogger(i_sPathName := 'C:\RMMT\', i_bCmdReset := s_bCmdReset);

//--GVL_DataLogging.g_fbSqlDatabase(i_stSettings := s_stSqlDbSettings, i_bCmdReset := s_bCmdReset);

//--_m_SelectConfigFile(i_bCmdReset := s_fbHmiBtnAutomatic.p_osfBtnPress);

GVL.g_osrNotify.CLK := FALSE;	

//--m_FullCycle(i_objTB := GVL_Modules.g_objCarrier);

m_Main := TRUE;

//--IF s_arr_bBoolTest[0] THEN GVL_Modules.g_emLiftingTransport.m_ReqGoToIdle(); s_arr_bBoolTest[0] := FALSE; END_IF
//--IF s_arr_bBoolTest[1] THEN GVL_Modules.g_emLiftingTransport.m_ReqPickTrolleyFromTB(); s_arr_bBoolTest[1] := FALSE; END_IF
//--IF s_arr_bBoolTest[2] THEN GVL_Modules.g_emLiftingTransport.m_ReqPlaceTrolleyInTB(); s_arr_bBoolTest[2] := FALSE; END_IF

CASE s_eCtrlMode OF

	E_CtrlMode.IDLE:
		s_eReqAction := E_ReqAction.NONE;	
	
	E_CtrlMode.AUTOMATIC:
		//Wait for commands from 
		IF s_fbHmiBtnInbound.p_osrBtnPress THEN
			//--s_bReqInbound := TRUE;
			s_eReqAction := E_ReqAction.INBOUND;
		END_IF
		
		IF s_fbHmiBtnOutbound.p_osrBtnPress THEN
			//--s_bReqOutbound := TRUE;
			s_eReqAction := E_ReqAction.OUTBOUND;
		END_IF
		
		IF s_fbHmiBtnDockTB.p_osrBtnPress THEN
			//--s_bReqDockTB := TRUE;
			s_eReqAction := E_ReqAction.DOCK_TB;
		END_IF
		
		IF s_fbHmiBtnUndockTB.p_osrBtnPress THEN
			//--s_bReqUndockTB := TRUE;
			s_eReqAction := E_ReqAction.UNDOCK_TB;
		END_IF
		
		IF s_fbHmiBtnOpenInnerTBDoor.p_osrBtnPress THEN
			//--s_bReqUndockTB := TRUE;
			s_eReqAction := E_ReqAction.OPEN_INNER_TB_DOOR;
		END_IF
		
		IF s_fbHmiBtnCloseInnerTBDoor.p_osrBtnPress THEN
			//--s_bReqUndockTB := TRUE;
			s_eReqAction := E_ReqAction.CLOSE_INNER_TB_DOOR;
		END_IF
			
		IF s_fbHmiBtnPickTrolleyFromTB.p_osrBtnPress THEN
			//--s_bReqPickTrolleyFromTB := TRUE;
			s_eReqAction := E_ReqAction.PICK_TROLLEY_FROM_TB;
		END_IF
		
		IF s_fbHmiBtnPlaceTrolleyInTB.p_osrBtnPress THEN
			//--s_bReqPlaceTrolleyInTB := TRUE;
			s_eReqAction := E_ReqAction.PLACE_TROLLEY_IN_TB;
		END_IF
		
	E_CtrlMode.MANUAL:
		;
		
	E_CtrlMode.MAINTENANCE:
		;
		
	E_CtrlMode.IO:
		;
		
	E_CtrlMode.CLEANING:
		;
		
END_CASE

IF s_eCtrlMode <> E_CtrlMode.AUTOMATIC THEN
	//Reset all commands
//--	s_bReqInbound := FALSE;
//--	s_bReqOutbound := FALSE;
//--	s_bReqDockTB := FALSE;
//--	s_bReqUndockTB := FALSE;
//--	s_bReqPickTrolleyFromTB := FALSE;
//--	s_bReqPlaceTrolleyInTB := FALSE;
	s_eReqAction := E_ReqAction.NONE;	
END_IF

s_bStaReady := (s_eSeqCleanroomConnect = E_SeqCleanroomConnect.READY);


s_fbHmiBtnDockTB.p_bStaEnabled := s_bStaReady AND NOT(GVL_Modules.g_emDockingInterface.p_bStaDocked);
s_fbHmiBtnUndockTB.p_bStaEnabled := s_bStaReady AND NOT(GVL_Modules.g_emDockingInterface.p_bStaUnDocked) AND (GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosed);
s_fbHmiBtnOpenInnerTBDoor.p_bStaEnabled := s_bStaReady AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened) AND (GVL_Modules.g_emDockingInterface.p_bStaDocked);
s_fbHmiBtnCloseInnerTBDoor.p_bStaEnabled := s_bStaReady AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosed);
s_fbHmiBtnPickTrolleyFromTB.p_bStaEnabled := s_bStaReady AND GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened;  
s_fbHmiBtnPlaceTrolleyInTB.p_bStaEnabled := s_bStaReady AND GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened;

// Paul Schippers: just a test with the use of interfaces
//??itfEmDoors.m_CloseOuterDoor();

//??itfEmDockingInterface.m_OpenDockingClamps();

//IF NOT(itfEmAirTreatment.p_bStaPressurizingOK) THEN 
//	itfEmAirTreatment.m_Pressurize();
//END_IF

(*	
	// Interlocks (doors must work as an airlock, only one door may be opened at all times)
	s_bIlckCabinDoorOuterToOpen :=
		s_cmDoorLockCleanroom.p_bStaError
		OR NOT(s_cmDoorLockCleanroom.p_bStaEnabled)
		NOT(s_cmDoorLockCleanroom.p_bStaDoorIsClosed)
		OR NOT (s_cmDoorLockCleanroom.p_bStaLockIsApplied)
		OR s_cmDoorLockCleanroom.p_bStaLockIsReleased
		OR TRUE (*Air treathment unit must be running and ok*)
		OR TRUE (*Add more..*);
	s_bIlckCabinDoorOuterToClose :=
		TRUE (*Opening must be free*)
		OR TRUE (*Add more..*);
	
	s_bIlckDoorLockCleanroomToOpen :=
		s_cmCabinDoorOuter.p_bStaError
		OR NOT(s_cmCabinDoorOuter.p_bStaEnabled)
		OR NOT(s_cmCabinDoorOuter.p_bStaIsClosed)
		OR s_cmCabinDoorOuter.p_bStaIsClosing
		OR s_cmCabinDoorOuter.p_bStaIsOpened
		OR s_cmCabinDoorOuter.p_bStaIsOpening
		OR TRUE (*Air treathment unit must be running and ok*)
		OR TRUE (*Add more..*);
*)	]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Outbound" Id="{6261bd7c-d400-4b5a-911e-fc663ac04169}">
      <Declaration><![CDATA[METHOD PUBLIC m_Outbound : BOOL
VAR
	sReason : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Onderstaande sequencer zal nog verder moeten worden opgebouwd

//Outbound cycle (happy flow)
GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter();

GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB();

GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking();

GVL_Modules.g_emDockingInterface.m_ReqDockTB();

GVL_Modules.g_emDockingInterface.m_ReqOpenInnerDoor();

GVL_Modules.g_emLiftingTransport.m_ReqPlaceTrolleyInTB();

GVL_Modules.g_emDockingInterface.m_ReqCloseInnerDoor();

GVL_Modules.g_emDockingInterface.m_ReqUndockTB();

GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_SeqCleanroomConnect" Id="{90534ebe-9d21-4aeb-b2cc-cf785c67a06d}">
      <Declaration><![CDATA[METHOD PUBLIC m_SeqCleanroomConnect : BOOL
VAR
	sReason : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Register previous step
IF s_eSeqCleanroomConnect <> s_ePreviousStep
	AND s_eSeqCleanroomConnect <> E_SeqCleanroomConnect.ERROR THEN
	s_ePreviousStep := s_eSeqCleanroomConnect;
END_IF

s_bStaEmError := 
	GVL_Modules.g_emPalletConveyor.p_bStaError
	OR GVL_Modules.g_emDockingInterface.p_bStaError
	OR GVL_Modules.g_emLiftingTransport.p_bStaError;
	
s_bCmdHold := FALSE;
//--	GVL_Modules.g_emPalletConveyor.p_bCmdHold;
	//++ OR GVL_Modules.g_emDockingInterface.p_bCmdHold
	//++ OR GVL_Modules.g_emLiftingTransport.p_bCmdHold;

s_fbSeqControlCleanroomConnect(
	i_nSeqStep := s_eSeqCleanroomConnect,
	i_sStepName := TO_STRING(s_eSeqCleanroomConnect),
	i_bCmdReset := s_fbHmiBtnReset.p_bStaBtn OR s_bCmdAbort,
	i_bStaError := s_bStaEmError OR s_bCmdHold);

s_tonTimer(PT := T#3600S);
	
CASE s_eSeqCleanroomConnect OF
	E_SeqCleanroomConnect.IDLE:
		s_eResumeStep := E_SeqCleanroomConnect.READY;
		s_eSeqCleanroomConnect := E_SeqCleanroomConnect.START;
	
	E_SeqCleanroomConnect.START:
	
		IF s_eCtrlState = E_CtrlState.RUNNING THEN
			s_eSeqCleanroomConnect := s_eResumeStep;
			s_bCmdHold := FALSE;
		END_IF

//READY////////////////////////////////////////////////////////////////////////////////////////////		
	E_SeqCleanroomConnect.READY:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
		//??	s_bReqInbound := FALSE;
		//??	s_bReqOutbound := FALSE;
		//??	s_bReqDockTB := FALSE;
		//??	s_bReqUndockTB := FALSE;
		//??	s_bReqPickTrolleyFromTB := FALSE;
		//??	s_bReqPlaceTrolleyInTB := FALSE;
		s_eResumeStep := E_SeqCleanroomConnect.READY;
		END_IF
		
		IF s_eCtrlState <> E_CtrlState.RUNNING THEN
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.START;
		END_IF
		
		//Via seperate commands te steps below can be initiated, depanding on a certain value the next command can be strated automatically.
		;	
	
		//Check if all equipment is ready (available for operation)
		s_bStaAllEmReady := 
			GVL_Modules.g_emPalletConveyor.p_bStaReady AND
			GVL_Modules.g_emDockingInterface.p_bStaReady AND
			GVL_Modules.g_emLiftingTransport.p_bStaReady;
			
//--		IF s_bStaAllEmReady AND (*GVL_Modules.g_emPalletConveyor.p_bStaTB_AtInfeed AND*) (s_bReqInbound OR s_bReqOutbound OR s_bReqDockTB) THEN
//--			s_eSeqInbound := E_SeqInbound.TB_TO_CENTER;
//--		END_IF
		
		IF s_bStaAllEmReady AND ( (s_eReqAction = E_ReqAction.INBOUND) OR (s_eReqAction = E_ReqAction.OUTBOUND) OR (s_eReqAction = E_ReqAction.DOCK_TB) ) THEN
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.TB_TO_CENTER;
		ELSIF s_bStaAllEmReady AND (s_eReqAction = E_ReqAction.UNDOCK_TB) THEN
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.UNDOCK_TB;
//--		ELSIF s_bStaAllEmReady AND (s_eReqAction = E_ReqAction.OPEN_INNER_TB_DOOR) THEN
//--			s_eSeqInbound := E_SeqInbound.OPEN_INNER_CABIN_DOOR;
		ELSIF s_bStaAllEmReady AND (s_eReqAction = E_ReqAction.CLOSE_INNER_TB_DOOR) THEN
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.CLOSE_INNER_TB_DOOR;	
		ELSIF s_bStaAllEmReady AND (s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB) THEN
			//TODO check if correct --> Nog bepalen wat hier wenslijk is: of doorgaan va. OPEN INNER CABIN DOOR of direct naar PICK TROLLEY
//??			s_eSeqInbound := E_SeqInbound.OPEN_INNER_CABIN_DOOR;
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.PICK_TROLLEY_FROM_TB;
		ELSIF s_bStaAllEmReady AND (s_eReqAction = E_ReqAction.PLACE_TROLLEY_IN_TB) THEN
			//TODO check if correct	--> Nog bepalen wat hier wenslijk is: of doorgaan va. OPEN INNER CABIN DOOR of direct naar PLACE TROLLEY
//??			s_eSeqInbound := E_SeqInbound.OPEN_INNER_CABIN_DOOR;
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.PLACE_TROLLEY_IN_TB;
		END_IF
		
//--		IF s_bStaAllEmReady AND FALSE THEN
//--			s_eSeqInbound := E_SeqInbound.TB_TO_INFEED;
//--		END_IF
		
//--		IF s_bStaAllEmReady AND FALSE THEN
//--			s_eSeqInbound := E_SeqInbound.TB_TO_DOCKING;
//--		END_IF
		
//--		IF s_bStaAllEmReady AND (s_bReqUndockTB) THEN
//--			s_eSeqInbound := E_SeqInbound.CLOSE_INNER_TB_DOOR;
//--		END_IF
		
//--		IF s_bStaAllEmReady AND s_bReqPickTrolleyFromTB THEN
//--			s_eSeqInbound := E_SeqInbound.PICK_TROLLEY_FROM_TB;
//--		END_IF
		
//--		IF s_bStaAllEmReady AND s_bReqPlaceTrolleyInTB THEN
//--			s_eSeqInbound := E_SeqInbound.PLACE_TROLLEY_IN_TB;
//--		END_IF
////		
	E_SeqCleanroomConnect.TB_TO_CENTER:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter();
		END_IF
		
		IF GVL_Modules.g_emPalletConveyor.p_bStaTB_AtCentering
			AND GVL_Modules.g_emPalletConveyor.p_bStaReady THEN			
//--			s_eSeqInbound := E_SeqInbound.OPEN_OUTER_CABIN_DOOR;
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.DOCK_TB;
		END_IF

//--		
(*	E_SeqInbound.OPEN_OUTER_CABIN_DOOR:
		IF GVL_Modules.g_emDoors.p_bStaEnabled THEN
			IF s_fbSeqControlInbound.q_bStaEntry THEN
				GVL_Modules.g_emDoors.m_ReqOpenOuterDoor();
			END_IF
		
			IF GVL_Modules.g_emDoors.p_bStaOuterDoorOpened
				AND GVL_Modules.g_emDoors.p_bStaReady THEN

				{warning '#TODO: TB to docking kan niet nworden uitgevoer omdat de Docking Interface nog niet gereed is om een TB te ontvangen'}			
//--				s_eSeqInbound := E_SeqInbound.TB_TO_DOCKING;
				s_eSeqInbound := E_SeqInbound.DOCK_TB;
			END_IF
			
		ELSE //SKIP CABIN DOOR CONTROL	
			IF s_fbSeqControlInbound.q_tmStepTime >= T#3S THEN
				s_eSeqInbound := E_SeqInbound.TB_TO_DOCKING;
			END_IF
		END_IF
*)		
////		
	E_SeqCleanroomConnect.TB_TO_DOCKING:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking();
		END_IF
		
		IF GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking
			AND GVL_Modules.g_emPalletConveyor.p_bStaReady THEN
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.DOCK_TB;
		END_IF
		
	E_SeqCleanroomConnect.DOCK_TB:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
			GVL_Modules.g_emDockingInterface.m_ReqDockTB();
		END_IF
		
		{warning '#TODO: Check if the T#5S is really necessary'}
		IF (s_fbSeqControlCleanroomConnect.q_tmStepTime > T#5S) AND GVL_Modules.g_emDockingInterface.p_bStaClampsOpened AND GVL_Modules.g_emDockingInterface.p_bStaDoorOpenerClosed AND GVL_Modules.g_emDockingInterface.p_bStaUnlockingPinsLocked AND NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking) THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking();
		END_IF
		
		IF GVL_Modules.g_emDockingInterface.p_bStaDocked 
			AND GVL_Modules.g_emDockingInterface.p_bStaReady THEN
			
			IF ( (s_eReqAction = E_ReqAction.INBOUND) OR (s_eReqAction = E_ReqAction.OUTBOUND) ) THEN
//--				s_eSeqInbound := E_SeqInbound.OPEN_INNER_CABIN_DOOR;
				s_eSeqCleanroomConnect := E_SeqCleanroomConnect.OPEN_INNER_TB_DOOR;
				
			ELSIF (s_eReqAction = E_ReqAction.DOCK_TB) THEN
				s_eSeqCleanroomConnect := E_SeqCleanroomConnect.STOP;
			END_IF
		END_IF

//--		
(*	E_SeqInbound.OPEN_INNER_CABIN_DOOR:
		IF GVL_Modules.g_emDoors.p_bStaEnabled THEN
			IF s_fbSeqControlInbound.q_bStaEntry THEN
				GVL_Modules.g_emDoors.m_ReqOpenInnerDoor();
			END_IF
		
			IF GVL_Modules.g_emDoors.p_bStaInnerDoorOpened
				AND GVL_Modules.g_emDoors.p_bStaReady THEN			
				s_eSeqInbound := E_SeqInbound.OPEN_INNER_TB_DOOR;
			END_IF
			
		ELSE //SKIP CABIN DOOR CONTROL
			IF s_fbSeqControlInbound.q_tmStepTime >= T#3S THEN
				s_eSeqInbound := E_SeqInbound.OPEN_INNER_TB_DOOR;
			END_IF
		END_IF
*)			
	E_SeqCleanroomConnect.OPEN_INNER_TB_DOOR:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
			GVL_Modules.g_emDockingInterface.m_ReqOpenInnerDoor();
		END_IF
		
		IF GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened
			AND GVL_Modules.g_emDockingInterface.p_bStaReady THEN
			
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.FLUSHING;
		END_IF
	
	E_SeqCleanroomConnect.FLUSHING:
		{warning '#TODO: Add future/FUMO3 code'}
		IF ( (s_eReqAction = E_ReqAction.INBOUND) (*OR (s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB)*) ) THEN 
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.PICK_TROLLEY_FROM_TB;
		ELSIF ( (s_eReqAction = E_ReqAction.OUTBOUND) OR (s_eReqAction = E_ReqAction.PLACE_TROLLEY_IN_TB) ) THEN 
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.OPEN_CLEANROOM_DOOR;
		ELSIF (s_eReqAction = E_ReqAction.DOCK_TB) THEN
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.STOP;
		ELSIF (s_eReqAction = E_ReqAction.OPEN_INNER_TB_DOOR) THEN
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.STOP;	
		ELSE
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.STOP;
		END_IF
	
////		
	E_SeqCleanroomConnect.PICK_TROLLEY_FROM_TB:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
			GVL_Modules.g_emLiftingTransport.m_ReqPickTrolleyFromTB();
		END_IF
		
		IF GVL_Modules.g_emLiftingTransport.p_bStaTrolleyPickedFromTB
			AND GVL_Modules.g_emLiftingTransport.p_bStaReady THEN
			
			IF (s_eReqAction = E_ReqAction.INBOUND) THEN
				s_eSeqCleanroomConnect := E_SeqCleanroomConnect.OPEN_CLEANROOM_DOOR;
			ELSIF (s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB) THEN
				s_eSeqCleanroomConnect := E_SeqCleanroomConnect.STOP;
			END_IF
			
//--			IF s_bReqInbound THEN 
//--				{warning '#TODO: What is expexted from inbound? Stay Docked or return empty TB to infeed'}
//--				s_eSeqInbound := E_SeqInbound.CLOSE_INNER_TB_DOOR;
//--			END_IF
		END_IF
////		
	E_SeqCleanroomConnect.PLACE_TROLLEY_IN_TB:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
			GVL_Modules.g_emLiftingTransport.m_ReqPlaceTrolleyInTB();
		END_IF
		
		IF GVL_Modules.g_emLiftingTransport.p_bStaTrolleyPlacedInTB
			AND GVL_Modules.g_emLiftingTransport.p_bStaReady THEN
			
			IF (s_eReqAction = E_ReqAction.OUTBOUND) THEN 
				s_eSeqCleanroomConnect := E_SeqCleanroomConnect.CLOSE_CLEANROOM_DOOR;
			ELSIF (s_eReqAction = E_ReqAction.PLACE_TROLLEY_IN_TB) THEN
				s_eSeqCleanroomConnect := E_SeqCleanroomConnect.STOP;
			ELSE
				s_eSeqCleanroomConnect := E_SeqCleanroomConnect.STOP;
			END_IF
		END_IF
		
	E_SeqCleanroomConnect.OPEN_CLEANROOM_DOOR:
		;
		{warning '#TODO: Add future/FUMO3 code'}
		IF ( (s_eReqAction = E_ReqAction.INBOUND) (*OR (s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB)*) ) THEN
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.CLOSE_CLEANROOM_DOOR;
		ELSIF (s_eReqAction = E_ReqAction.OUTBOUND) THEN	
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.PLACE_TROLLEY_IN_TB;
		END_IF

	E_SeqCleanroomConnect.CLOSE_CLEANROOM_DOOR:
		;
		{warning '#TODO: Add future/FUMO3 code'}
		s_eSeqCleanroomConnect := E_SeqCleanroomConnect.CLOSE_INNER_TB_DOOR;	
		
////		
	E_SeqCleanroomConnect.CLOSE_INNER_TB_DOOR:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
			GVL_Modules.g_emDockingInterface.m_ReqCloseInnerDoor();
		END_IF
		
		IF GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosed 
			AND GVL_Modules.g_emDockingInterface.p_bStaReady THEN
//--			s_eSeqInbound := E_SeqInbound.CLOSE_INNER_CABIN_DOOR;
			s_eSeqCleanroomConnect := s_eSeqCleanroomConnect := E_SeqCleanroomConnect.UNDOCK_TB;
		END_IF

//--	
(*	E_SeqInbound.CLOSE_INNER_CABIN_DOOR:
		IF GVL_Modules.g_emDoors.p_bStaEnabled THEN
			IF s_fbSeqControlInbound.q_bStaEntry THEN
				GVL_Modules.g_emDoors.m_ReqCloseInnerDoor();
			END_IF
		
			IF GVL_Modules.g_emDoors.p_bStaInnerDoorClosed
				AND GVL_Modules.g_emDoors.p_bStaReady THEN
				IF ( (s_eReqAction = E_ReqAction.INBOUND) OR (s_eReqAction = E_ReqAction.OUTBOUND) ) THEN
					s_eSeqInbound := s_eSeqInbound := E_SeqInbound.UNDOCK_TB;
				ELSIF ( (*(s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB) OR (s_eReqAction = E_ReqAction.PLACE_TROLLEY_IN_TB) OR *) (s_eReqAction = E_ReqAction.CLOSE_INNER_TB_DOOR) ) THEN
					s_eSeqInbound := E_SeqInbound.STOP;
				END_IF		
			END_IF
			
		ELSE //SKIP CABIN DOOR CONTROL
			IF s_fbSeqControlInbound.q_tmStepTime >= T#3S THEN
				IF ( (s_eReqAction = E_ReqAction.INBOUND) OR (s_eReqAction = E_ReqAction.OUTBOUND) ) THEN
					s_eSeqInbound := s_eSeqInbound := E_SeqInbound.UNDOCK_TB;
				ELSIF ( (*(s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB) OR (s_eReqAction = E_ReqAction.PLACE_TROLLEY_IN_TB) OR *) (s_eReqAction = E_ReqAction.CLOSE_INNER_TB_DOOR) ) THEN
					s_eSeqInbound := E_SeqInbound.STOP;
				END_IF
			END_IF
		END_IF
*)		
	E_SeqCleanroomConnect.UNDOCK_TB:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
			GVL_Modules.g_emDockingInterface.m_ReqUndockTB();
		END_IF
	
		IF GVL_Modules.g_emDockingInterface.p_bStaClampsOpened THEN
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.TB_TO_INFEED;
		END_IF
		
	E_SeqCleanroomConnect.TB_TO_INFEED:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed();
		END_IF
		
		IF NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking) THEN
//--			GVL_Modules.g_emDoors.m_ReqCloseOuterDoor();
			GVL_Modules.g_emDockingInterface.m_ReqUndockTB();
		END_IF
	
		IF GVL_Modules.g_emPalletConveyor.p_bStaTB_AtInfeed
			AND GVL_Modules.g_emPalletConveyor.p_bStaReady THEN
			
//--			s_eSeqInbound := E_SeqInbound.CLOSE_OUTER_CABIN_DOOR;
			s_eSeqCleanroomConnect := E_SeqCleanroomConnect.STOP;
			
//--			IF s_bReqUndockTB THEN
//--				s_eSeqInbound := E_SeqInbound.READY;
//--			ELSE
//--				s_eSeqInbound := E_SeqInbound.READY;
//--			END_IF
		END_IF

//--
(*		
	E_SeqInbound.CLOSE_OUTER_CABIN_DOOR:
		IF GVL_Modules.g_emDoors.p_bStaEnabled THEN
			IF s_fbSeqControlInbound.q_bStaEntry THEN
				GVL_Modules.g_emDoors.m_ReqCloseOuterDoor();
			END_IF
		
			IF GVL_Modules.g_emDoors.p_bStaOuterDoorClosed
				AND GVL_Modules.g_emDoors.p_bStaReady THEN			
				s_eSeqInbound := E_SeqInbound.STOP;
			END_IF
			
		ELSE //SKIP CABIN DOOR CONTROL
			IF s_fbSeqControlInbound.q_tmStepTime >= T#3S THEN
				s_eSeqInbound := E_SeqInbound.STOP;
			END_IF
		END_IF
*)		
	E_SeqCleanroomConnect.STOP:
		//Do not use .qEnrty forced stop doesn't make use of fbSeqControl
//--		s_bReqInbound := FALSE;
//--		s_bReqOutbound := FALSE;
//--		s_bReqDockTB := FALSE;
//--		s_bReqUndockTB := FALSE;
//--		s_bReqPickTrolleyFromTB := FALSE;
//--		s_bReqPlaceTrolleyInTB := FALSE;
		
		s_eReqAction := E_ReqAction.NONE;
				
		s_eSeqCleanroomConnect := E_SeqCleanroomConnect.READY;
	
	E_SeqCleanroomConnect.ERROR:
		IF s_fbSeqControlCleanroomConnect.q_bStaEntry THEN
			s_eReqAction := E_ReqAction.NONE;	
		
			IF s_ePreviousStep > E_SeqCleanroomConnect.START
				AND s_ePreviousStep < E_SeqCleanroomConnect.ERROR THEN
				s_eResumeStep := s_ePreviousStep;
			ELSE 
				s_eResumeStep := E_SeqCleanroomConnect.IDLE;
			END_IF
		END_IF

END_CASE

//TEST
(*--
IF s_arr_bBoolTest[0] THEN GVL_Modules.g_emDoors.m_ReqOpenOuterDoor(); s_arr_bBoolTest[0] := FALSE; END_IF
IF s_arr_bBoolTest[1] THEN GVL_Modules.g_emDoors.m_ReqCloseOuterDoor(); s_arr_bBoolTest[1] := FALSE; END_IF
IF s_arr_bBoolTest[2] THEN GVL_Modules.g_emDoors.m_ReqOpenInnerDoor(); s_arr_bBoolTest[2] := FALSE; END_IF
IF s_arr_bBoolTest[3] THEN GVL_Modules.g_emDoors.m_ReqCloseInnerDoor(); s_arr_bBoolTest[3] := FALSE; END_IF

s_arr_bBoolTest[9] := GVL_Modules.g_emDoors.p_bStaEnabled;
s_arr_bBoolTest[10] := GVL_Modules.g_emDoors.p_bStaError;
s_arr_bBoolTest[11] := GVL_Modules.g_emDoors.p_bStaOuterDoorClosed;
s_arr_bBoolTest[12] := GVL_Modules.g_emDoors.p_bStaOuterDoorOpened;
s_arr_bBoolTest[13] := GVL_Modules.g_emDoors.p_bStaInnerDoorClosed;
s_arr_bBoolTest[14] := GVL_Modules.g_emDoors.p_bStaInnerDoorOpened;
s_arr_bBoolTest[15] := GVL_Modules.g_emDoors.p_bStaReady;
*)]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="UN_CleanroomConnect">
      <LineId Id="171" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="317" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Alarms">
      <LineId Id="28" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="11" Count="3" />
      <LineId Id="16" Count="6" />
      <LineId Id="5" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Devices">
      <LineId Id="35" Count="0" />
      <LineId Id="6" Count="3" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Hmi">
      <LineId Id="286" Count="0" />
      <LineId Id="9" Count="11" />
      <LineId Id="307" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="22" Count="25" />
      <LineId Id="274" Count="1" />
      <LineId Id="240" Count="0" />
      <LineId Id="254" Count="1" />
      <LineId Id="242" Count="1" />
      <LineId Id="241" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="51" Count="16" />
      <LineId Id="277" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="184" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="191" Count="2" />
      <LineId Id="235" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="76" Count="4" />
      <LineId Id="84" Count="4" />
      <LineId Id="99" Count="0" />
      <LineId Id="231" Count="1" />
      <LineId Id="187" Count="0" />
      <LineId Id="189" Count="1" />
      <LineId Id="196" Count="2" />
      <LineId Id="195" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="209" Count="2" />
      <LineId Id="216" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="228" Count="2" />
      <LineId Id="212" Count="2" />
      <LineId Id="208" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="220" Count="7" />
      <LineId Id="219" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="265" Count="1" />
      <LineId Id="264" Count="0" />
      <LineId Id="244" Count="2" />
      <LineId Id="142" Count="9" />
      <LineId Id="156" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="336" Count="3" />
      <LineId Id="350" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Init">
      <LineId Id="4381" Count="0" />
      <LineId Id="3926" Count="2" />
      <LineId Id="4375" Count="1" />
      <LineId Id="3930" Count="1" />
      <LineId Id="4700" Count="0" />
      <LineId Id="3933" Count="3" />
      <LineId Id="4418" Count="0" />
      <LineId Id="4386" Count="1" />
      <LineId Id="4701" Count="0" />
      <LineId Id="4389" Count="2" />
      <LineId Id="4385" Count="0" />
      <LineId Id="4392" Count="0" />
      <LineId Id="4394" Count="1" />
      <LineId Id="4702" Count="0" />
      <LineId Id="4396" Count="2" />
      <LineId Id="4393" Count="0" />
      <LineId Id="4399" Count="0" />
      <LineId Id="4401" Count="1" />
      <LineId Id="4703" Count="0" />
      <LineId Id="4404" Count="2" />
      <LineId Id="4400" Count="0" />
      <LineId Id="4407" Count="0" />
      <LineId Id="4409" Count="0" />
      <LineId Id="4723" Count="0" />
      <LineId Id="4722" Count="0" />
      <LineId Id="4410" Count="0" />
      <LineId Id="4704" Count="0" />
      <LineId Id="4412" Count="2" />
      <LineId Id="4408" Count="0" />
      <LineId Id="4419" Count="0" />
      <LineId Id="4724" Count="0" />
      <LineId Id="4420" Count="0" />
      <LineId Id="4425" Count="0" />
      <LineId Id="4441" Count="1" />
      <LineId Id="4421" Count="0" />
      <LineId Id="4433" Count="3" />
      <LineId Id="4463" Count="0" />
      <LineId Id="4438" Count="2" />
      <LineId Id="4432" Count="0" />
      <LineId Id="4431" Count="0" />
      <LineId Id="4422" Count="0" />
      <LineId Id="4451" Count="11" />
      <LineId Id="4450" Count="0" />
      <LineId Id="4709" Count="2" />
      <LineId Id="4714" Count="0" />
      <LineId Id="4713" Count="0" />
      <LineId Id="4712" Count="0" />
      <LineId Id="4423" Count="0" />
      <LineId Id="4465" Count="2" />
      <LineId Id="4464" Count="0" />
      <LineId Id="4444" Count="0" />
      <LineId Id="4424" Count="0" />
      <LineId Id="4470" Count="0" />
      <LineId Id="4715" Count="0" />
      <LineId Id="4473" Count="0" />
      <LineId Id="4476" Count="3" />
      <LineId Id="4716" Count="0" />
      <LineId Id="4482" Count="0" />
      <LineId Id="4468" Count="0" />
      <LineId Id="4415" Count="0" />
      <LineId Id="4417" Count="0" />
      <LineId Id="4426" Count="0" />
      <LineId Id="4430" Count="0" />
      <LineId Id="4446" Count="0" />
      <LineId Id="4427" Count="0" />
      <LineId Id="4698" Count="0" />
      <LineId Id="4697" Count="0" />
      <LineId Id="4486" Count="7" />
      <LineId Id="4485" Count="0" />
      <LineId Id="4447" Count="0" />
      <LineId Id="4428" Count="0" />
      <LineId Id="4695" Count="0" />
      <LineId Id="4694" Count="0" />
      <LineId Id="4495" Count="13" />
      <LineId Id="4494" Count="0" />
      <LineId Id="4448" Count="0" />
      <LineId Id="4429" Count="0" />
      <LineId Id="4691" Count="0" />
      <LineId Id="4690" Count="0" />
      <LineId Id="4510" Count="172" />
      <LineId Id="4509" Count="0" />
      <LineId Id="4449" Count="0" />
      <LineId Id="4416" Count="0" />
      <LineId Id="4683" Count="0" />
      <LineId Id="4719" Count="0" />
      <LineId Id="4718" Count="0" />
      <LineId Id="4721" Count="0" />
      <LineId Id="4689" Count="0" />
      <LineId Id="4688" Count="0" />
      <LineId Id="4684" Count="2" />
      <LineId Id="4319" Count="0" />
      <LineId Id="3948" Count="0" />
      <LineId Id="4720" Count="0" />
      <LineId Id="4193" Count="18" />
      <LineId Id="4371" Count="0" />
      <LineId Id="4213" Count="17" />
      <LineId Id="4268" Count="0" />
      <LineId Id="4277" Count="2" />
      <LineId Id="4276" Count="0" />
      <LineId Id="4307" Count="0" />
      <LineId Id="4282" Count="2" />
      <LineId Id="4281" Count="0" />
      <LineId Id="4285" Count="0" />
      <LineId Id="4287" Count="2" />
      <LineId Id="4286" Count="0" />
      <LineId Id="4290" Count="0" />
      <LineId Id="4292" Count="2" />
      <LineId Id="4291" Count="0" />
      <LineId Id="4308" Count="0" />
      <LineId Id="4310" Count="2" />
      <LineId Id="4309" Count="0" />
      <LineId Id="4313" Count="0" />
      <LineId Id="4315" Count="2" />
      <LineId Id="4314" Count="0" />
      <LineId Id="4295" Count="0" />
      <LineId Id="4297" Count="2" />
      <LineId Id="4296" Count="0" />
      <LineId Id="4300" Count="0" />
      <LineId Id="4305" Count="0" />
      <LineId Id="4303" Count="1" />
      <LineId Id="4301" Count="0" />
      <LineId Id="4269" Count="0" />
      <LineId Id="4232" Count="7" />
      <LineId Id="4241" Count="3" />
      <LineId Id="78" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Modules">
      <LineId Id="4966" Count="193" />
      <LineId Id="5285" Count="0" />
      <LineId Id="5160" Count="124" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_SelectConfigFile">
      <LineId Id="202" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="3" Count="30" />
      <LineId Id="40" Count="1" />
      <LineId Id="43" Count="2" />
      <LineId Id="47" Count="14" />
      <LineId Id="79" Count="5" />
      <LineId Id="143" Count="0" />
      <LineId Id="87" Count="12" />
      <LineId Id="101" Count="2" />
      <LineId Id="105" Count="6" />
      <LineId Id="203" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_FullCycle">
      <LineId Id="1542" Count="259" />
      <LineId Id="211" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_Main">
      <LineId Id="30" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="90" Count="2" />
      <LineId Id="96" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="143" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="2" />
      <LineId Id="169" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="175" Count="2" />
      <LineId Id="174" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="154" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="167" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="103" Count="10" />
      <LineId Id="87" Count="1" />
      <LineId Id="117" Count="1" />
      <LineId Id="125" Count="4" />
      <LineId Id="124" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="191" Count="0" />
      <LineId Id="179" Count="6" />
      <LineId Id="61" Count="1" />
      <LineId Id="66" Count="3" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="33" Count="24" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_Outbound">
      <LineId Id="100" Count="1" />
      <LineId Id="111" Count="17" />
      <LineId Id="91" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_SeqCleanroomConnect">
      <LineId Id="3359" Count="110" />
      <LineId Id="3760" Count="0" />
      <LineId Id="3470" Count="0" />
      <LineId Id="3761" Count="0" />
      <LineId Id="3471" Count="1" />
      <LineId Id="3759" Count="0" />
      <LineId Id="3474" Count="5" />
      <LineId Id="3741" Count="0" />
      <LineId Id="3740" Count="0" />
      <LineId Id="3480" Count="0" />
      <LineId Id="3742" Count="0" />
      <LineId Id="3481" Count="6" />
      <LineId Id="3762" Count="0" />
      <LineId Id="3488" Count="14" />
      <LineId Id="3743" Count="0" />
      <LineId Id="3747" Count="0" />
      <LineId Id="3744" Count="2" />
      <LineId Id="3503" Count="5" />
      <LineId Id="3763" Count="0" />
      <LineId Id="3509" Count="4" />
      <LineId Id="3764" Count="0" />
      <LineId Id="3514" Count="103" />
      <LineId Id="3765" Count="0" />
      <LineId Id="3618" Count="0" />
      <LineId Id="3766" Count="0" />
      <LineId Id="3619" Count="30" />
      <LineId Id="3749" Count="0" />
      <LineId Id="3652" Count="9" />
      <LineId Id="3770" Count="0" />
      <LineId Id="3663" Count="5" />
      <LineId Id="3767" Count="0" />
      <LineId Id="3669" Count="6" />
      <LineId Id="3768" Count="0" />
      <LineId Id="3676" Count="0" />
      <LineId Id="3769" Count="0" />
      <LineId Id="3677" Count="42" />
      <LineId Id="3721" Count="0" />
      <LineId Id="3720" Count="0" />
      <LineId Id="3723" Count="0" />
      <LineId Id="3722" Count="0" />
      <LineId Id="3724" Count="2" />
      <LineId Id="3728" Count="0" />
      <LineId Id="3727" Count="0" />
      <LineId Id="3729" Count="0" />
      <LineId Id="3736" Count="0" />
      <LineId Id="3731" Count="0" />
      <LineId Id="3734" Count="0" />
      <LineId Id="3733" Count="0" />
      <LineId Id="3735" Count="0" />
      <LineId Id="95" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>