<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="UN_CleanroomConnect" Id="{8b93890b-f796-4713-9491-f75e01fbeba7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK UN_CleanroomConnect EXTENDS Un_Base
VAR
	s_stSettings : ST_UN_CleanroomConnectSettings;	

//------------------------------------------//
//Function Blocks
	sFbModeStateControl : FB_ModeStateControl;

	//EM Pallet Conveyor
	s_fbIlckHandlerConvBwd : FB_InterlockHandler;
	s_fbIlckHandlerConvFwd : FB_InterlockHandler;
	
	//EM Docking Interface
	s_fbIlckHandlerClampsToClose : FB_InterlockHandler;
	s_fbIlckHandlerClampsToOpen : FB_InterlockHandler;
	s_fbIlckHandlerDoorOpenerToClose : FB_InterlockHandler;
	s_fbIlckHandlerDoorOpenerToOpen : FB_InterlockHandler;
	s_fbIlckHandlerDoorShutterToClose : FB_InterlockHandler;
	s_fbIlckHandlerDoorShutterToOpen : FB_InterlockHandler;
	
	//EM Lifting Transport
	s_fbIlckHandlerTranportExtract : FB_InterlockHandler;
	
	//EM Doors
	s_fbIlckHandlerOuterSpeedDoorOpen : FB_InterlockHandler;
	s_fbIlckHandlerOuterSpeedDoorClose : FB_InterlockHandler;
	s_fbIlckHandlerInnerSpeedDoorOpen : FB_InterlockHandler;
	s_fbIlckHandlerInnerSpeedDoorClose : FB_InterlockHandler;
		
//------------------------------------------//

//------------------------------------------//
//Inputs
//??	s_diTwoHandControl			: FB_DigInput;

//------------------------------------------//

//------------------------------------------//
//Alarms
//------------------------------------------//
	
//------------------------------------------//
//Params

//------------------------------------------//

//--	s_bReqInbound : BOOL;
//--	s_bReqOutbound : BOOL;
//--	s_bReqDockTB : BOOL;
//--	s_bReqUndockTB : BOOL;
//--	s_bReqPickTrolleyFromTB : BOOL;
//--	s_bReqPlaceTrolleyInTB : BOOL;
	
	//--s_nStaInboundState : USINT;

//------------------------------------------//
//Variables
	s_bStaWarning : BOOL;
	s_bStaRunning : BOOL;
	
	s_bStaAllEmReady : BOOL;
	s_bStaEmError : BOOL;
	s_bCmdAbort : BOOL;
	s_bCmdHold : BOOL;
	
	s_eCtrlState : E_CtrlState;
//------------------------------------------//

//------------------------------------------//
//Properties

//------------------------------------------//

	//Sequencers
	s_eSeqInbound : E_SeqInbound;
	s_fbSeqControlInbound : FB_SeqControl;
	
	s_ePreviousStep : E_SeqInbound;
	s_eResumeStep : E_SeqInbound;

	s_eReqAction : E_ReqAction;

(*	s_bStaTbIsDocked : BOOL;
	s_bStaTbIsUnDocked : BOOL;
	s_bStaInnerTbDoorIsOpen : BOOL;
	s_bStaInnerTbDoorIsClosed : BOOL;
*)	
	s_tonTimer : TON;
	
//------------------------------------------//
//Hmi
	s_fbHmiBtnAlarms : FB_HmiBtn;
	s_fbHmiBtnReset : FB_HmiBtn;
	
	s_fbHmiBtnInbound : FB_HmiBtn;
	s_fbHmiBtnOutbound : FB_HmiBtn;
	s_fbHmiBtnDockTB : FB_HmiBtn;
	s_fbHmiBtnUndockTB : FB_HmiBtn;
	s_fbHmiBtnOpenInnerTBDoor : FB_HmiBtn;
	s_fbHmiBtnCloseInnerTBDoor : FB_HmiBtn;
	s_fbHmiBtnPickTrolleyFromTB : FB_HmiBtn;
	s_fbHmiBtnPlaceTrolleyInTB : FB_HmiBtn;
	
	
	
//------------------------------------------//

s_bCreate : BOOL;
s_bDestroy : BOOL;

s_arr_bBoolTest : ARRAY [0..15] OF BOOL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Method Name="_m_Alarms" Id="{c0f56159-8f50-4d36-acac-c259038873b1}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

//overbruggen in automode tot en met place table blablabla
s_errEmergencyBtn(i_bStaActive 			:= NOT s_DiEmergencyBtn.p_bStaInput AND NOT GVL.g_fbHmiBtnSimulation.p_bStaBtn AND GVL.g_bConnectTestEquipment ,
				  i_eAlarmLevel 		:= E_AlarmLevel.Alarm,
				  i_sAlarmText 			:= 'Emergency button pressed');

IF GVL_KMWEGenericLib.g_fbAlarmManager.p_bAlarmActive THEN 
	GVL.g_eStaLedColor := E_KmweLedColors.Red;
END_IF

s_bStaError := s_errEmergencyBtn.q_bStaActive;

_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{68eeb98b-de01-4c23-9e4b-e0a75e4ed7ba}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

//------------------------------------------//
// Control Modules

//------------------------------------------//

//------------------------------------------//
//Outputs
//------------------------------------------//

//------------------------------------------//
//Inputs
//??	s_diTwoHandControl();
//------------------------------------------//

_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{6e489294-edbd-4c11-9b41-7f97eb3787da}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
VAR_INST
	s_sPrevPageAlarms 		: STRING;
	s_sPrevBottom1Alarms	: STRING;
	
	s_sCompanySelectionVisible	: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//------------------------------------------//
//Mode management
IF GVL_KMWEGenericLib.g_fbHmiBtnReturnToStart.p_osfBtnPress THEN
	s_eCtrlMode := E_CtrlMode.IDLE;

	GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= TRUE;
	GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= TRUE;	
END_IF

//------------------------------------------//

//------------------------------------------//
//Alarm Button can always be pressed
IF s_fbHmiBtnAlarms.p_osrBtnPress AND GVL.g_sToHmiMiddleContent <> GVL.g_stHmiMiddle.AlarmManager THEN
	s_sPrevPageAlarms			:= GVL.g_sToHmiMiddleContent;
	s_sPrevBottom1Alarms		:= GvL.g_sToHmiBottomContent;
	GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.AlarmManager;
	GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Alarm;
	
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible 			:= TRUE;
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled 			:= TRUE;
END_IF

IF GVL.g_sToHmiMiddleContent = GVL.g_stHmiMiddle.AlarmManager AND GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_osfBtnPress THEN
	GVL.g_sToHmiMiddleContent 	:=	s_sPrevPageAlarms;
	GVL.g_sToHmiBottomContent	:=	s_sPrevBottom1Alarms;
	
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible 			:= FALSE;
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled 			:= FALSE;
END_IF
//------------------------------------------//

//------------------------------------------//
//Hmi view management (General, Em can set module specific pages)
CASE s_eCtrlMode OF
	E_CtrlMode.IDLE:
(*		GVL.g_bConnectTestEquipment		:= TRUE;

		IF NOT GVL_KMWEGenericLib.g_fbAlarmManager.p_bAlarmActive THEN
			GVL.g_bLedFlashFast	:= FALSE;
			GVL.g_bLedFlashSlow	:= FALSE;
			GVL.g_eStaLedColor := E_KmweLedColors.Idle;
		END_IF
	
		s_fbHmiBtnTesterConfig.p_sBtnText		:= 'Tester Configuration';	
	
		IF GVL_KMWEGenericLib.g_fbHmiBtnReturnToStart.p_osfBtnPress THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := FALSE;

			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.Start;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Start;
		END_IF
		
		IF s_fbHmiBtnTesterConfig.p_osrBtnPress THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_nFolderIndex 	:= 1;
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := TRUE;

			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.TesterConfig;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.General_ReturnToStart;
		END_IF
		
		IF s_fbHmiBtnAutomatic.p_osrBtnPress THEN
			s_eCtrlMode 					:= E_CtrlMode.AUTOMATIC;
			GVL.g_bConnectTestEquipment		:= FALSE;
			
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_sBtnText		:= 'Acknowledge';
			
			GVL_KMWEGenericLib.g_fbParamManager.p_nFolderIndex 		:= 2;
			
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= FALSE;
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= FALSE;
	
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible		:= TRUE;
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled		:= TRUE;
			
			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.OperatorInputData;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Procedure;
		END_IF
		
		IF s_fbHmiBtnManual.p_osrBtnPress THEN
			s_eCtrlMode := E_CtrlMode.MANUAL;
			
			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.Manual;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.General_ReturnToStart;
		END_IF
*)
	E_CtrlMode.AUTOMATIC:
(*		s_fbHmiBtnTesterConfig.p_sBtnText		:= 'Procedure Configuration';
		
		IF GVL.g_sToHmiMiddleContent = GVL.g_stHmiMiddle.OperatorInputData 
			AND GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_osrBtnPress 
		THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := FALSE;

			GVL.g_sToHmiMiddleContent 							:= GVL.g_stHmiMiddle.Start;
			GVL.g_sToHmiBottomContent							:= GVL.g_stHmiBottomBar.Start;
			
			s_eCtrlMode 										:= E_CtrlMode.IDLE;	
		END_IF
		
		IF s_fbHmiBtnTesterConfig.p_osrBtnPress THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_nFolderIndex 	:= 2;
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := TRUE;

			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= FALSE;
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= FALSE;
			
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible		:= TRUE;
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled		:= TRUE;

			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.TesterConfig;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.General_Return;
		END_IF
		
		IF GVL.g_sToHmiMiddleContent = GVL.g_stHmiMiddle.TesterConfig THEN
			IF GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_osrBtnPress THEN
				GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.OperatorInputData;
				GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Procedure;
				
				GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible		:= FALSE;
				GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled		:= FALSE;
			END_IF
		END_IF
*)		
	E_CtrlMode.MANUAL:
		IF GVL_KMWEGenericLib.g_fbAlarmManager.p_osrAlarmsResolved THEN
			GVL.g_eStaLedColor := E_KmweLedColors.Green;
		END_IF
	
		GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= FALSE;
		GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= FALSE;
		
//		IF GVL_KMWEGenericLib.g_fbHmiBtnReturnToStart.p_osrBtnPress THEN
//			GVL.g_sToHmiMiddleContent 	:= ST_HmiMiddle.Start;
//			GVL.g_sToHmiBottomContect	:= ST_HmiBottomBar.Start;
//		END_IF
		;
END_CASE
//------------------------------------------//

//------------------------------------------//
//Hmi Buttons
//--s_fbHmiBtnAutomatic();
//--s_fbHmiBtnManual();
//??s_fbHmiBtnTesterConfig();
s_fbHmiBtnAlarms();
s_fbHmiBtnReset();

s_fbHmiBtnInbound();
s_fbHmiBtnOutbound();
s_fbHmiBtnDockTB();
s_fbHmiBtnUndockTB();
s_fbHmiBtnOpenInnerTBDoor();
s_fbHmiBtnCloseInnerTBDoor();
s_fbHmiBtnPickTrolleyFromTB();
s_fbHmiBtnPlaceTrolleyInTB();

GVL.g_fbHmiBtnSimulation();
//------------------------------------------//
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{71192b96-a840-4eae-8166-473534974241}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//EM Utilities/////////////////////////////////////////////////////////////////////////////////////
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emUtilities);

GVL_Modules.g_emUtilities.i_bReqEnable := FALSE;
GVL_Modules.g_emUtilities.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emUtilities.i_bCmdReset := FALSE;
GVL_Modules.g_emUtilities.i_sEmName  := 'EM Utilities';

//Settings Utilities
//<none>

//EM Pallet Conveyor///////////////////////////////////////////////////////////////////////////////
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emPalletConveyor);

GVL_Modules.g_emPalletConveyor.i_bReqEnable := FALSE;
GVL_Modules.g_emPalletConveyor.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emPalletConveyor.i_bCmdReset := FALSE;
GVL_Modules.g_emPalletConveyor.i_sEmName  := 'EM Pallet Conveyor';

//Interlocks
//Conveyor
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[0].sReason := 'Docking Clamps Not Open';
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[1].sReason := 'Unlocking Pins Not In';
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[2].sReason := 'Door Opener Not Closed';

s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[0].sReason := 'Docking Clamps Not Open';
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[1].sReason := 'Unlocking Pins Not In';
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[2].sReason := 'Door Opener Not Closed';
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[3].sReason := 'Outer Speed Door Not Open';

//Settings CM Pallet Conveyor (via parameter file)
//--20240924 s_stSettings.stSettingsPalletConveyor.fSpeedManual := 50.0; //mm/s
//--20240924 s_stSettings.stSettingsPalletConveyor.fSpeedGoToInfeed := 100.0; //mm/s
//--20240924 s_stSettings.stSettingsPalletConveyor.fSpeedGoToCentering := 100.0; //mm/s
//--20240924 s_stSettings.stSettingsPalletConveyor.fSpeedGoToDocking := 50.0; //mm/s

//Settings CM Centering
//--20240924 s_stSettings.stSettingsPalletConveyor.tTimeoutCenteringToCenter := T#3S;
//--20240924 s_stSettings.stSettingsPalletConveyor.tTimeoutCenteringToIdle := T#3S;

//EM Docking Interface/////////////////////////////////////////////////////////////////////////////
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emDockingInterface);

GVL_Modules.g_emDockingInterface.i_bReqEnable := FALSE;
GVL_Modules.g_emDockingInterface.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emDockingInterface.i_bCmdReset := FALSE;
GVL_Modules.g_emDockingInterface.i_sEmName  := 'EM Docking Interface';

s_fbIlckHandlerClampsToClose.i_stInterlockList.arr_Interlocks[0].sReason := 'No TB Detected';

s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[0].sReason := 'Cleanroom Door Not Closed';
s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Inner Speed Door Not Closed';
s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[2].sReason := 'Outer Speed Door Not Closed';

s_fbIlckHandlerDoorOpenerToClose.i_stInterlockList.arr_Interlocks[0].sReason := 'Inner Speed Door Not Opened';

s_fbIlckHandlerDoorOpenerToOpen.i_stInterlockList.arr_Interlocks[0].sReason := 'Inner Speed Door Not Opened';

s_fbIlckHandlerDoorShutterToClose.i_stInterlockList.arr_Interlocks[0].sReason := 'Inner Speed Door Not Opened';

s_fbIlckHandlerDoorShutterToOpen.i_stInterlockList.arr_Interlocks[0].sReason := 'Inner Speed Door Not Opened';

//Settings CM Docking Interface (via paramter file)
//--20240924 s_stSettings.stSettingsDockingInterface.tTimeoutDockingClamps := T#5S;
//--20240924 s_stSettings.stSettingsDockingInterface.tTimeoutUnlockingPins := T#5S;
//--20240924 s_stSettings.stSettingsDockingInterface.tTimeoutDoorOpener := T#5S;
//--20240924 s_stSettings.stSettingsDockingInterface.tTimeoutDoorShutter := T#5S;

//--20240924 s_stSettings.stSettingsDockingInterface.tCompressSealDuration := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayCloseDoorShutterReleasingPins := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayReleaseUnlockingPins := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayOpenDoorShutter := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayOpenDoorOpener := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayCloseDoorShutter := T#3S;
//--20240924 s_stSettings.stSettingsDockingInterface.tDelayLockUnlockingPins := T#3S;

//--20240924 s_stSettings.stSettingsDockingInterface.bOpenClampsAfterClosingTimeout := FALSE; 

//EM Lifting Transport/////////////////////////////////////////////////////////////////////////////
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emLiftingTransport);

GVL_Modules.g_emLiftingTransport.i_bReqEnable := FALSE;
GVL_Modules.g_emLiftingTransport.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emLiftingTransport.i_bCmdReset := FALSE;
GVL_Modules.g_emLiftingTransport.i_sEmName := 'EM Lifting Transport';

//Iterlockss
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[0].sReason := CONCAT(GVL_Modules.g_emDockingInterface.i_sEmName, ' - Door-Opener Not Opened');
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[1].sReason := CONCAT(GVL_Modules.g_emDockingInterface.i_sEmName, ' - Door-Shutter Not Opened');
{warning: '#TODO: In the future also the opened state of both speed doors should be included'}
//++fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[2].sReason := CONCAT(GVL_Modules.g_emDoors.i_sEmName, ' - Outer Speed Door Is Not Closed');
//++fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[3].sReason := CONCAT(GVL_Modules.g_emDoors.i_sEmName, ' - Inner Speed Door Is Not Opened');

//General behavioir
s_stSettings.stSettingsLiftingTransport.bWaitForNextStep := FALSE;
s_stSettings.stSettingsLiftingTransport.bAutoRecoveryToIdle := FALSE;

//Homing
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fHomeOffset := 5.00; // mm
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fHomeOffset := 0.00; // mm

//Stopping
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fStopDec := 100.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fStopJrk := 1000.0; // mm/s^3

s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fStopDec := 100.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fStopJrk := 1000.0; // mm/s^3

//Mainteneance-mode:
//Jogging
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fJogVel := 5.0; // mm/s (jog speed is configured in the NC-Task)
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fJogAcc := 5.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fJogDec := 5.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fJogJrk := 50.0; // mm/s^3

s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fJogVel := 5.0; // mm/s (jog speed is configured in the NC-Task)
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fJogAcc := 5.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fJogDec := 5.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fJogJrk := 50.0; // mm/s^3

//Positioning
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fAbsPosPos := 5.0; // mm
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fAbsPosVel := 10.0; // mm/s
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fAbsPosAcc := 10.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fAbsPosDec := 10.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoLift.fAbsPosJrk := 100.0; // mm/s^3

s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fAbsPosPos := 0.0; // mm
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fAbsPosVel := 10.0; // mm/s
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fAbsPosAcc := 10.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fAbsPosDec := 10.0; // mm/s^2
s_stSettings.stSettingsLiftingTransport.stSettingsServoTransport.fAbsPosJrk := 100.0; // mm/s^3

//Manual- and Automatic-mode, Positioning
// [0] = Idle
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[0].fPos := 0.0; //[mm]	
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[0].fVel := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[0].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[0].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[0].fJrk := 100.0; //[mm/s^3]

// [1] = Pre Pick From TB
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[1].fPos := 306.01; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[1].fVel := 10.01; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[1].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[1].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[1].fJrk := 100.0; //[mm/s^3]

// [2] = Pick From TB
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[2].fPos := 331.02; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[2].fVel := 5.02; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[2].fAcc := 5.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[2].fDec := 5.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[2].fJrk := 50.0; //[mm/s^3]

// [3] = Raise From TB
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[3].fPos := 404.03; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[3].fVel := 10.03; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[3].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[3].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[3].fJrk := 100.0; //[mm/s^3]

// [4] = Pre Place In Cabin
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[4].fPos := 45.04; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[4].fVel := 10.04; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[4].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[4].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[4].fJrk := 100.0; //[mm/s^3]

// [5] = Place In Cabin
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[5].fPos := 0.05; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[5].fVel := 5.05; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[5].fAcc := 5.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[5].fDec := 5.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[5].fJrk := 50.0; //[mm/s^3]

// [6] = Pre Pick From Cabin
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[6].fPos := 10.06; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[6].fVel := 10.06; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[6].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[6].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[6].fJrk := 10.0; //[mm/s^3]

// [7] = Pick From Cabin
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[7].fPos := 45.07; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[7].fVel := 5.07; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[7].fAcc := 5.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[7].fDec := 5.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[7].fJrk := 50.0; //[mm/s^3]

// [8] = Raise From Cabin
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[8].fPos := 404.08; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[8].fVel := 10.08; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[8].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[8].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[8].fJrk := 100.0; //[mm/s^3]

// [9] = Pre Place In TB
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[9].fPos := 374.09; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[9].fVel := 10.09; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[9].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[9].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[9].fJrk := 100.0; //[mm/s^3]

// [10] = Place In TB
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[10].fPos := 331.10; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[10].fVel := 10.10; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[10].fAcc := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[10].fDec := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[10].fJrk := 100.0; //[mm/s^3]

//--// [11] = Return In Cabin
//--s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[11].fPos := 0.11; //[mm]
//--s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[11].fVel := 10.11; //[mm/s] 
//--s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[11].fAcc := 10.0;  //[mm/s^2]
//--s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[11].fDec := 10.0; //[mm/s^2]
//--s_stSettings.stSettingsLiftingTransport.arr_stLiftPositioningProfile[11].fJrk := 100.0; //[mm/s^3]

//Automatic-Positioning Transport//////////////////////////////////////////////////////////////////
// [0] = Idle
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[0].fPos := 0.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[0].fVel := 100.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[0].fAcc := 100.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[0].fDec := 100.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[0].fJrk := 1000.0; //[mm/s^3]

// [1] = Pre Pick From TB
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[1].fPos := 1690.01; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[1].fVel := 200.02; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[1].fAcc := 200.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[1].fDec := 200.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[1].fJrk := 2000.0; //[mm/s^3]

// [2] = Pick From TB
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[2].fPos := 1715.02; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[2].fVel := 20.04; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[2].fAcc := 20.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[2].fDec := 20.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[2].fJrk := 200.0; //[mm/s^3]

// [3] = Place In Cabin
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[3].fPos := 0.03; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[3].fVel := 200.06; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[3].fAcc := 200.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[3].fDec := 200.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[3].fJrk := 2000.0; //[mm/s^3]

// [4] = Pre Place In TB
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[4].fPos := 1690.04; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[4].fVel := 200.08; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[4].fAcc := 200.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[4].fDec := 200.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[4].fJrk := 2000.0; //[mm/s^3]

// [5] = Place In TB
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[5].fPos := 1710.05; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[5].fVel := 20.10; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[5].fAcc := 20.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[5].fDec := 20.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[5].fJrk := 200.0; //[mm/s^3]

//--// [6] = Return In Cabin
//--s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[6].fPos := 0.06; //[mm]
//--s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[6].fVel := 200.12; //[mm/s] 
//--s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[6].fAcc := 200.0;  //[mm/s^2]
//--s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[6].fDec := 200.0; //[mm/s^2]
//--s_stSettings.stSettingsLiftingTransport.arr_stTransportPositioningProfile[6].fJrk := 2000.0; //[mm/s^3]

GVL_Modules.g_emPalletConveyor.i_ref_stSettings REF= s_stSettings.stSettingsPalletConveyor;
GVL_Modules.g_emDockingInterface.i_ref_stSettings REF= s_stSettings.stSettingsDockingInterface;
GVL_Modules.g_emLiftingTransport.i_ref_stSettings REF= s_stSettings.stSettingsLiftingTransport;

//Em_DOORS
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emDoors);

GVL_Modules.g_emDoors.i_bReqEnable := FALSE;
GVL_Modules.g_emDoors.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emDoors.i_bCmdReset := FALSE;
GVL_Modules.g_emDoors.i_sEmName := 'EM Doors';

//Interlocks
//Outer Speed Door
s_fbIlckHandlerOuterSpeedDoorOpen.i_stInterlockList.arr_Interlocks[0].sReason := 'Docking Clamps Not Closed';
s_fbIlckHandlerOuterSpeedDoorOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Door Shutter Not Closed';

s_fbIlckHandlerOuterSpeedDoorClose.i_stInterlockList.arr_Interlocks[0].sReason := 'Docking Clamps Not Closed';
s_fbIlckHandlerOuterSpeedDoorClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Door Shutter Not Closed';
s_fbIlckHandlerOuterSpeedDoorClose.i_stInterlockList.arr_Interlocks[2].sReason := 'TB At Docking Position';
s_fbIlckHandlerOuterSpeedDoorClose.i_stInterlockList.arr_Interlocks[3].sReason := 'Lifting Transport Not At Idle Position';

//Inner Speed Door
s_fbIlckHandlerInnerSpeedDoorOpen.i_stInterlockList.arr_Interlocks[0].sReason := 'Docking Clamps Not Closed';
s_fbIlckHandlerInnerSpeedDoorOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Door Shutter Not Closed';

s_fbIlckHandlerInnerSpeedDoorClose.i_stInterlockList.arr_Interlocks[0].sReason := 'Docking Clamps Not Closed';
s_fbIlckHandlerInnerSpeedDoorClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Door Shutter Not Closed';
s_fbIlckHandlerInnerSpeedDoorClose.i_stInterlockList.arr_Interlocks[2].sReason := 'Lifting Transport Not At Idle Position';

//Settings Doors
GVL_Modules.g_emDoors.i_stSettings.tOuterDoorTimeout := T#15S;
GVL_Modules.g_emDoors.i_stSettings.tInnerDoorTimeout := T#15S;
GVL_Modules.g_emDoors.i_stSettings.tCleanroomDoorTimeout := T#3S;
GVL_Modules.g_emDoors.i_stSettings.tResetPulseDuration := T#1S;

(* ++
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emDockingCabin);

GVL_Modules.g_emDockingCabin.i_bReqEnable := FALSE;
GVL_Modules.g_emDockingCabin.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emDockingCabin.i_bCmdReset := FALSE;
GVL_Modules.g_emDockingCabin.i_sEmName  := 'EM State Machine';

//Settings Doors
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDoors.tOuterDoorTimeout := T#15S;
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDoors.tCleanroomDoorTimeout := T#3S;
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDoors.tResetPulseDuration := T#1S;

//Settings Docking Interface
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDockingInterface.tClampsTimeout := T#5S;
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDockingInterface.tReleasePinsTimeout := T#5S;
*)
//Settings AirTreatment
//..GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsAirTrearment.. := TODO;

//------------------------------------------//
//Hmi Startup
GVL.g_sToHmiTopContent 		:= GVL.g_stHmiTopBar.GeneralTopbar;
GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.Start;
GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Start;
//------------------------------------------//

//------------------------------------------//
//Buttons
	s_fbHmiBtnAlarms.p_bStaVisible := TRUE;
	s_fbHmiBtnAlarms.p_bStaEnabled := TRUE;
	s_fbHmiBtnAlarms.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnAlarms.p_sBtnText := 'Alarms';
	
	s_fbHmiBtnReset.p_bStaVisible := TRUE;
	s_fbHmiBtnReset.p_bStaEnabled := TRUE;
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
//
	s_fbHmiBtnInbound.p_bStaVisible := TRUE;
	s_fbHmiBtnInbound.p_bStaEnabled := TRUE;
	s_fbHmiBtnInbound.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnInbound.p_sBtnText := 'Inbound';
		
	s_fbHmiBtnOutbound.p_bStaVisible := TRUE;
	s_fbHmiBtnOutbound.p_bStaEnabled := TRUE;
	s_fbHmiBtnOutbound.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnOutbound.p_sBtnText := 'Outbound';
	
	s_fbHmiBtnDockTB.p_bStaVisible := TRUE;
	s_fbHmiBtnDockTB.p_bStaEnabled := TRUE;
	s_fbHmiBtnDockTB.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnDockTB.p_sBtnText := 'Dock TB';
	
	s_fbHmiBtnUndockTB.p_bStaVisible := TRUE;
	s_fbHmiBtnUndockTB.p_bStaEnabled := TRUE;
	s_fbHmiBtnUndockTB.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnUndockTB.p_sBtnText := 'Undock TB';
	
	s_fbHmiBtnOpenInnerTBDoor.p_bStaVisible := TRUE;
	s_fbHmiBtnOpenInnerTBDoor.p_bStaEnabled := TRUE;
	s_fbHmiBtnOpenInnerTBDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnOpenInnerTBDoor.p_sBtnText := 'Open Inner TB Door';
	
	s_fbHmiBtnCloseInnerTBDoor.p_bStaVisible := TRUE;
	s_fbHmiBtnCloseInnerTBDoor.p_bStaEnabled := TRUE;
	s_fbHmiBtnCloseInnerTBDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnCloseInnerTBDoor.p_sBtnText := 'Close Inner TB Door';
	
	s_fbHmiBtnPickTrolleyFromTB.p_bStaVisible := TRUE;
	s_fbHmiBtnPickTrolleyFromTB.p_bStaEnabled := TRUE;
	s_fbHmiBtnPickTrolleyFromTB.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnPickTrolleyFromTB.p_sBtnText := 'Pick Trolley From TB';
	
	s_fbHmiBtnPlaceTrolleyInTB.p_bStaVisible := TRUE;
	s_fbHmiBtnPlaceTrolleyInTB.p_bStaEnabled := TRUE;
	s_fbHmiBtnPlaceTrolleyInTB.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnPlaceTrolleyInTB.p_sBtnText := 'Place Trolley In TB';
	
	GVL.g_fbHmiBtnSimulation.p_bStaVisible 	:= TRUE;
	GVL.g_fbHmiBtnSimulation.p_bStaEnabled	:= TRUE;
	GVL.g_fbHmiBtnSimulation.p_eButtontype 	:= E_HmiButtonType.TOGGLEBUTTON;
	GVL.g_fbHmiBtnSimulation.p_sBtnText		:= 'Simulation';
	
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible 	:= FALSE;
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled 	:= FALSE;
//------------------------------------------//


//??s_diTwoHandControl.i_stSettings.tmInputDelay := T#2S;

_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Modules" Id="{2372c80a-8810-4c92-8500-979916e08046}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Modules : BOOL
VAR
	bReqEnable : BOOL;
	
	//External interlocks for EM_PalletConveyor
	s_fbExtIlckConvFwd : FB_Interlock;
	s_fbExtIlckConvBwd : FB_Interlock;
	
	//External interlocks for EM_DockingInterface
	s_fbExtIlckDockingClampsToClose : FB_Interlock;
	s_fbExtIlckDockingClampsToOpen : FB_Interlock;
	s_fbExtIlckDoorOpenerToClose : FB_Interlock;
	s_fbExtIlckDoorOpenerToOpen : FB_Interlock;
	s_fbExtIlckDoorShutterToClose : FB_Interlock;
	s_fbExtIlckDoorShutterToOpen : FB_Interlock;
	
	//External interlocks for EM_LiftingTransport
	{warning '#TODO: check what is nessecary, probebly only Transport Extract (door open)'}
	s_fbExtIlckLiftUp : FB_Interlock;	
	s_fbExtIlckLiftDown : FB_Interlock;
	s_fbExtIlckTransportExtract : FB_Interlock;
	s_fbExtIlckTransportRetract : FB_Interlock;
		
	//External interlocks for EM_Doors
	s_fbExtIlckOuterDoorOpen : FB_Interlock;
	s_fbExtIlckOuterDoorClose : FB_Interlock;
	s_fbExtIlckInnerDoorOpen : FB_Interlock;
	s_fbExtIlckInnerDoorClose : FB_Interlock;
	
	s_bSimCleanroomDoorClosed : BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GVL_Modules.g_objCarrier();

IF s_bCreate THEN GVL_Modules.g_objCarrier.m_Create(i_eDestination := E_Location.CLEANROOM); s_bCreate := FALSE; END_IF; 
IF s_bDestroy THEN GVL_Modules.g_objCarrier.m_Destroy(); s_bDestroy := FALSE; END_IF;

sFbModeStateControl(
	{warning 'TODO: Check if stopping mode on any error is ok, what to do if a valve does not reach posittion, death lock?'}
	i_bReqStopAlarm := (   GVL_Modules.g_emUtilities.p_bStaError
						OR GVL_Modules.g_emPalletConveyor.p_bStaError (*OR GVL_Modules.g_emPalletConveyor.p_bCmdHold*) 
						OR GVL_Modules.g_emDockingInterface.p_bStaError
						OR GVL_Modules.g_emLiftingTransport.p_bStaError )
						AND ( (s_eCtrlMode = E_CtrlMode.AUTOMATIC) OR (s_eCtrlMode = E_CtrlMode.MANUAL) ),
	i_bStaAllStopped := TRUE);

s_eCtrlMode := sFbModeStateControl.p_eCtrlMode;
s_eCtrlState :=	sFbModeStateControl.p_eCtrlState;

// EM_Utilities ///////////////////////////////////////////////////////////////////////////////////	
GVL_Modules.g_emUtilities.m_GetGeneralState(
	i_bError := s_bStaError,
	i_bWarning := s_bStaWarning,
	i_bRunning := s_bStaRunning);

GVL_Modules.g_emUtilities(
	i_bReqEnable := TRUE,
	i_eCtrlMode := s_eCtrlMode,
	i_eCtrlState := s_eCtrlState,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn); //Add temp reset button
	
bReqEnable :=
	GVL_Modules.g_emUtilities.p_bStaSafetyOk
	AND GVL_Modules.g_emUtilities.p_bStsPowerOk
	AND GVL_Modules.g_emUtilities.p_bStaAirPressureOk
	AND NOT GVL_Modules.g_emUtilities.p_bStaError;

// EM_PalletConveyor //////////////////////////////////////////////////////////////////////////////	
s_fbIlckHandlerConvBwd();
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDockingClampsOpened) AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking;
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaUnlockingPinsLocked) AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking;
s_fbIlckHandlerConvBwd.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorOpenerClosed) AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking;

s_fbExtIlckConvBwd.i_bInterlocked := s_fbIlckHandlerConvBwd.p_bInterlocked;
s_fbExtIlckConvBwd(); 
IF s_fbIlckHandlerConvBwd.p_bInterlocked THEN
	s_fbExtIlckConvBwd.p_sReason := s_fbIlckHandlerConvBwd.p_sReason;
ELSE
	s_fbExtIlckConvBwd.p_sReason := '-';	
END_IF

s_fbIlckHandlerConvFwd();
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDockingClampsOpened);//?? AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtCentering;
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaUnlockingPinsLocked);//?? AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtCentering;
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorOpenerClosed);//??AND GVL_Modules.g_emPalletConveyor.p_bStaTB_AtCentering;
s_fbIlckHandlerConvFwd.i_stInterlockList.arr_Interlocks[3].bState := NOT(GVL_Modules.g_emDoors.p_bStaOuterDoorOpened) AND GVL_Modules.g_emDoors.p_bStaEnabled;

s_fbExtIlckConvFwd.i_bInterlocked := s_fbIlckHandlerConvFwd.p_bInterlocked;
s_fbExtIlckConvFwd(); 
IF s_fbIlckHandlerConvFwd.p_bInterlocked THEN
	s_fbExtIlckConvFwd.p_sReason := s_fbIlckHandlerConvFwd.p_sReason;
ELSE
	s_fbExtIlckConvFwd.p_sReason := '-';	
END_IF

GVL_Modules.g_emPalletConveyor(
	i_bReqEnable := bReqEnable,
	i_eCtrlMode := s_eCtrlMode,
	i_eCtrlState := s_eCtrlState,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_fbExtIlckConvFwd := s_fbExtIlckConvFwd,
	i_fbExtIlckConvBwd := s_fbExtIlckConvBwd,
	i_refTB := GVL_Modules.g_objCarrier);

// EM_DockingInterface ////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerClampsToClose();
s_fbIlckHandlerClampsToClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking);

s_fbExtIlckDockingClampsToClose.i_bInterlocked := s_fbIlckHandlerClampsToClose.p_bInterlocked;
s_fbExtIlckDockingClampsToClose(); 
IF s_fbIlckHandlerClampsToClose.p_bInterlocked THEN
	s_fbExtIlckDockingClampsToClose.p_sReason := s_fbIlckHandlerClampsToClose.p_sReason;
ELSE
	s_fbExtIlckDockingClampsToClose.p_sReason := '-';	
END_IF

s_fbIlckHandlerClampsToOpen();
s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[0].bState := FALSE; //++NOT(GVL_Modules.g_emDoors.p_bStaCleanroomDoorNotClosedAndLocked);
s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDoors.p_bStaInnerDoorClosed);
s_fbIlckHandlerClampsToOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emDoors.p_bStaOuterDoorClosed);

s_fbExtIlckDockingClampsToOpen.i_bInterlocked := s_fbIlckHandlerClampsToOpen.p_bInterlocked;
s_fbExtIlckDockingClampsToOpen(); 
IF s_fbIlckHandlerClampsToOpen.p_bInterlocked THEN
	s_fbExtIlckDockingClampsToOpen.p_sReason := s_fbIlckHandlerClampsToOpen.p_sReason;
ELSE
	s_fbExtIlckDockingClampsToOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerDoorOpenerToClose();
s_fbIlckHandlerDoorOpenerToClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDoors.p_bStaInnerDoorOpened);

s_fbExtIlckDoorOpenerToClose.i_bInterlocked := s_fbIlckHandlerDoorOpenerToClose.p_bInterlocked;
s_fbExtIlckDoorOpenerToClose(); 
IF s_fbIlckHandlerDoorOpenerToClose.p_bInterlocked THEN
	s_fbExtIlckDoorOpenerToClose.p_sReason := s_fbIlckHandlerDoorOpenerToClose.p_sReason;
ELSE
	s_fbExtIlckDoorOpenerToClose.p_sReason := '-';	
END_IF

s_fbIlckHandlerDoorOpenerToOpen();
s_fbIlckHandlerDoorOpenerToOpen.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDoors.p_bStaInnerDoorOpened);

s_fbExtIlckDoorOpenerToOpen.i_bInterlocked := s_fbIlckHandlerDoorOpenerToOpen.p_bInterlocked;
s_fbExtIlckDoorOpenerToOpen(); 
IF s_fbIlckHandlerDoorOpenerToOpen.p_bInterlocked THEN
	s_fbExtIlckDoorOpenerToOpen.p_sReason := s_fbIlckHandlerDoorOpenerToOpen.p_sReason;
ELSE
	s_fbExtIlckDoorOpenerToOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerDoorShutterToClose();
s_fbIlckHandlerDoorShutterToClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDoors.p_bStaInnerDoorOpened);

s_fbExtIlckDoorShutterToClose.i_bInterlocked := s_fbIlckHandlerDoorShutterToClose.p_bInterlocked;
s_fbExtIlckDoorShutterToClose(); 
IF s_fbIlckHandlerDoorShutterToClose.p_bInterlocked THEN
	s_fbExtIlckDoorShutterToClose.p_sReason := s_fbIlckHandlerDoorShutterToClose.p_sReason;
ELSE
	s_fbExtIlckDoorShutterToClose.p_sReason := '-';	
END_IF

s_fbIlckHandlerDoorShutterToOpen();
s_fbIlckHandlerDoorShutterToOpen.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDoors.p_bStaInnerDoorOpened);

s_fbExtIlckDoorShutterToOpen.i_bInterlocked := s_fbIlckHandlerDoorShutterToOpen.p_bInterlocked;
s_fbExtIlckDoorShutterToOpen(); 
IF s_fbIlckHandlerDoorShutterToOpen.p_bInterlocked THEN
	s_fbExtIlckDoorShutterToOpen.p_sReason := s_fbIlckHandlerDoorShutterToOpen.p_sReason;
ELSE
	s_fbExtIlckDoorShutterToOpen.p_sReason := '-';	
END_IF

GVL_Modules.g_emDockingInterface(
	i_bReqEnable := bReqEnable,
	i_eCtrlMode := s_eCtrlMode,
	i_eCtrlState := s_eCtrlState,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_bStaTbAtDockingPosition := GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking,
	i_fbExtIlckDockingClampsToOpen := s_fbExtIlckDockingClampsToOpen,
	i_fbExtIlckDockingClampsToClose := s_fbExtIlckDockingClampsToClose,
	i_fbExtIlckDoorOpenerToOpen := s_fbExtIlckDoorOpenerToOpen,
	i_fbExtIlckDoorOpenerToClose := s_fbExtIlckDoorOpenerToClose,
	i_fbExtIlckDoorShutterToOpen := s_fbExtIlckDoorShutterToOpen,
	i_fbExtIlckDoorShutterToClose := s_fbExtIlckDoorShutterToClose, 
	i_refTB := GVL_Modules.g_objCarrier);	

// EM_LiftingTransport ////////////////////////////////////////////////////////////////////////////	
	
s_fbIlckHandlerTranportExtract();
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorOpenerOpened);
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterOpened);
{warning: '#TODO: In the future also the opened state of both speed doors should be included'}
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[2].bState := FALSE; //++NOT(GVL_Modules.g_emDoors _speed_door_not_opened_);
s_fbIlckHandlerTranportExtract.i_stInterlockList.arr_Interlocks[3].bState := FALSE; //++NOT(GVL_Modules.g_emDoors _speed_door_not_opened_);

s_fbExtIlckTransportExtract.i_bInterlocked := s_fbIlckHandlerTranportExtract.p_bInterlocked;
s_fbExtIlckTransportExtract();
IF s_fbIlckHandlerTranportExtract.p_bInterlocked THEN
	s_fbExtIlckTransportExtract.p_sReason := s_fbIlckHandlerTranportExtract.p_sReason;
ELSE
	s_fbExtIlckTransportExtract.p_sReason := '-';	
END_IF

GVL_Modules.g_emLiftingTransport(
	i_bReqEnable := bReqEnable,
	i_eCtrlMode := s_eCtrlMode,
	i_eCtrlState := s_eCtrlState,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_fbExtIlckLiftUp := s_fbExtIlckLiftUp, //TODO,
	i_fbExtIlckLiftDown := s_fbExtIlckLiftDown, //TODO,
	i_fbExtIlckTransportExtract := s_fbExtIlckTransportExtract, //TODO,
	i_fbExtIlckTransportRetract := s_fbExtIlckTransportRetract, //TODO,
	i_refTB := GVL_Modules.g_objCarrier);

// EM_DOORS ///////////////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerOuterSpeedDoorOpen();
s_fbIlckHandlerOuterSpeedDoorOpen.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDockingClampsClosed);
s_fbIlckHandlerOuterSpeedDoorOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
s_fbExtIlckOuterDoorOpen();
s_fbExtIlckOuterDoorOpen.i_bInterlocked := s_fbIlckHandlerOuterSpeedDoorOpen.p_bInterlocked; 
IF s_fbIlckHandlerOuterSpeedDoorOpen.p_bInterlocked THEN
	s_fbExtIlckOuterDoorOpen.p_sReason := s_fbIlckHandlerOuterSpeedDoorOpen.p_sReason;
ELSE
	s_fbExtIlckOuterDoorOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerOuterSpeedDoorClose();
s_fbIlckHandlerOuterSpeedDoorClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDockingClampsClosed);
s_fbIlckHandlerOuterSpeedDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
s_fbIlckHandlerOuterSpeedDoorClose.i_stInterlockList.arr_Interlocks[2].bState := GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking;
s_fbIlckHandlerOuterSpeedDoorClose.i_stInterlockList.arr_Interlocks[3].bState := NOT(GVL_Modules.g_emLiftingTransport.p_bStaAtIdlePosition);
s_fbExtIlckOuterDoorClose();
s_fbExtIlckOuterDoorClose.i_bInterlocked := s_fbIlckHandlerOuterSpeedDoorClose.p_bInterlocked; 
IF s_fbIlckHandlerOuterSpeedDoorClose.p_bInterlocked THEN
	s_fbExtIlckOuterDoorClose.p_sReason := s_fbIlckHandlerOuterSpeedDoorClose.p_sReason;
ELSE
	s_fbExtIlckOuterDoorClose.p_sReason := '-';	
END_IF

s_fbIlckHandlerInnerSpeedDoorOpen();
s_fbIlckHandlerInnerSpeedDoorOpen.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDockingClampsClosed);
s_fbIlckHandlerInnerSpeedDoorOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
s_fbExtIlckInnerDoorOpen();
s_fbExtIlckInnerDoorOpen.i_bInterlocked := s_fbIlckHandlerInnerSpeedDoorOpen.p_bInterlocked; 
IF s_fbIlckHandlerInnerSpeedDoorOpen.p_bInterlocked THEN
	s_fbExtIlckInnerDoorOpen.p_sReason := s_fbIlckHandlerInnerSpeedDoorOpen.p_sReason;
ELSE
	s_fbExtIlckInnerDoorOpen.p_sReason := '-';	
END_IF

s_fbIlckHandlerInnerSpeedDoorClose();
s_fbIlckHandlerInnerSpeedDoorClose.i_stInterlockList.arr_Interlocks[0].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDockingClampsClosed);
s_fbIlckHandlerInnerSpeedDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(GVL_Modules.g_emDockingInterface.p_bStaDoorShutterClosed);
s_fbIlckHandlerInnerSpeedDoorClose.i_stInterlockList.arr_Interlocks[2].bState := NOT(GVL_Modules.g_emLiftingTransport.p_bStaAtIdlePosition);
s_fbExtIlckInnerDoorClose();
s_fbExtIlckInnerDoorClose.i_bInterlocked := s_fbIlckHandlerInnerSpeedDoorClose.p_bInterlocked; 
IF s_fbIlckHandlerInnerSpeedDoorClose.p_bInterlocked THEN
	s_fbExtIlckInnerDoorClose.p_sReason := s_fbIlckHandlerInnerSpeedDoorClose.p_sReason;
ELSE
	s_fbExtIlckInnerDoorClose.p_sReason := '-';	
END_IF
	
GVL_Modules.g_emDoors(
	i_bReqEnable := TRUE,
	i_eCtrlMode := s_eCtrlMode,
	i_eCtrlState := s_eCtrlState,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_bStaInfeedSealed := GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking AND GVL_Modules.g_emDockingInterface.p_bStaDocked,
	i_sEmName := 'EM Doors',
	i_ref_objCarrier := GVL_Modules.g_objCarrier,
	i_fbExtIlckOuterDoorOpen := s_fbExtIlckOuterDoorOpen,
	i_fbExtIlckOuterDoorClose := s_fbExtIlckOuterDoorClose,
	i_fbExtIlckInnerDoorOpen := s_fbExtIlckInnerDoorOpen,
	i_fbExtIlckInnerDoorClose := s_fbExtIlckInnerDoorClose);

s_bStaError :=
	GVL_Modules.g_emUtilities.q_bStaError 
	OR GVL_Modules.g_emPalletConveyor.q_bStaError
	OR GVL_Modules.g_emDockingInterface.q_bStaError
	OR GVL_Modules.g_emLiftingTransport.q_bStaError
	OR GVL_Modules.g_emDoors.q_bStaError;
//++OR GVL_Modules.g_emDockingCabin.q_bStaError


s_bStaWarning := 
	GVL_Modules.g_emUtilities.q_bStaWarning 
	OR GVL_Modules.g_emPalletConveyor.q_bStaWarning
	OR GVL_Modules.g_emDockingInterface.q_bStaWarning
	OR GVL_Modules.g_emLiftingTransport.q_bStaWarning
	OR GVL_Modules.g_emDoors.q_bStaWarning;
//++OR GVL_Modules.g_emDockingCabin.q_bStaWarning

_m_Modules := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_SelectConfigFile" Id="{7c7e81b7-08ef-4473-8a6d-b20d88aaf565}">
      <Declaration><![CDATA[METHOD PRIVATE _m_SelectConfigFile : BOOL
VAR_INPUT
	i_bCmdReset 			: BOOL;
END_VAR
VAR_INST	
	i, x					: UDINT;
		
	s_aPossibleRevs			: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;
	
	s_aConfigFileNames 		: ARRAY[0..Param_Project.n_MaxParamFiles] OF T_MAXSTRING;
	s_aConfigFileDUTs		: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;	
	s_aConfigFileRev		: ARRAY[0..Param_Project.n_MaxParamFiles] OF T_MAXSTRING;
	
	s_aSingleDUTs			: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;
	s_aSingleREVs			: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;
		
	s_nIndexDut				: INT;
//	s_nIndexSR				: INT;
	s_nIndexRev				: INT;
	
	s_nIndexDutPrev			: INT;
	s_nIndexRevPrev			: INT;
	
	s_sChosenFile			: T_MAXSTRING;
	s_sToHmiChosenFile		: T_MAXSTRING;
	
	s_bCmdResetInternal	 	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//1413824/E test bestand met deze naam.

IF i_bCmdReset OR s_bCmdResetInternal THEN	
	MEMSET(ADR(s_aConfigFileNames), 0, SIZEOF(s_aConfigFileNames));
	MEMSET(ADR(s_aConfigFileDUTs), 0, SIZEOF(s_aConfigFileDUTs));
	MEMSET(ADR(s_aSingleDUTs), 0, SIZEOF(s_aSingleDUTs));
	
	MEMCPY(ADR(s_aConfigFileNames), ADR(GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi), SIZEOF(GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi));
	
	s_nIndexDut		:= -1;
//	s_nIndexSR		:= -1;
	s_nIndexRev		:= -1;
	
	FOR i := 0 TO Param_Project.n_MaxParamFiles DO 
		FindAndSplit(pSeparator:= ADR('^'),
							 pSrcString:= ADR(s_aConfigFileNames[i]),
							 pLeftString:= ADR(s_aConfigFileDUTs[i]),
							 nLeftSize:= SIZEOF(s_aConfigFileDUTs[i]),
							 pRightString:= ADR(s_aConfigFileRev[i]),
							 nRightSize:= SIZEOF(s_aConfigFileRev[i]),
							 bSearchFromRight:= FALSE);	

		s_aConfigFileRev[i] := 	DELETE(s_aConfigFileRev[i], 6, 2);			
	END_FOR
	
	F_CheckDuplicatesInArray(iq_aOriginalArray := s_aConfigFileDUTs, iq_aUniqueArray := s_aSingleDUTs);

	IF s_aConfigFileNames[0] = '' THEN
		s_bCmdResetInternal := TRUE;	
	ELSE
		s_bCmdResetInternal := FALSE;	
	END_IF
END_IF

IF s_nIndexDutPrev <> s_nIndexDut AND s_nIndexDutPrev <> -1 THEN
	s_nIndexRev := -1;
	
	MEMSET(ADR(s_aSingleREVs), 0, SIZEOF(s_aSingleREVs));
END_IF

IF s_nIndexDut <> -1 AND s_nIndexRev = -1 THEN 
	x := 0;
	MEMSET(ADR(s_aSingleREVs), 0, SIZEOF(s_aSingleREVs));
	MEMSET(ADR(s_aPossibleRevs), 0, SIZEOF(s_aPossibleRevs));
	FOR i:= 0 TO Param_Project.n_MaxParamFiles DO
		IF FIND(s_aConfigFileNames[i], s_aSingleDUTs[s_nIndexDut]) <> 0 THEN
			s_aPossibleRevs[x] := MID(s_aConfigFileNames[i],1,FIND(s_aConfigFileNames[i], '^')+1);
			x := x + 1;
		END_IF					
	END_FOR	
	
	F_CheckDuplicatesInArray(iq_aOriginalArray := s_aPossibleRevs, iq_aUniqueArray := s_aSingleREVs); 
END_IF

IF s_nIndexDut <> -1 AND s_nIndexRev <> -1 AND s_nIndexRevPrev <> s_nIndexRev THEN
	FOR i := 0 TO Param_Project.n_MaxParamFiles DO
		IF s_aConfigFileNames[i] = CONCAT(s_aSingleDUTs[s_nIndexDut], 
										CONCAT('^', 
										CONCAT(s_aSingleRevs[s_nIndexRev], '.csv')))
		THEN
			s_sChosenFile := s_aConfigFileNames[i];
		END_IF
	END_FOR
	
	FOR i := 0 TO Param_Project.n_MaxParamFiles DO
		IF GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi[i] = s_sChosenFile THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_nHmiFileSelected := TO_UDINT(i);
		END_IF
	END_FOR 
END_IF

IF s_aConfigFileNames[GVL_KMWEGenericLib.g_fbParamManager.p_nHmiFileSelected] <> s_sChosenFile THEN
	s_nIndexDut	:= -1;
	s_nIndexRev	:= -1;
	
	MEMSET(ADR(s_aSingleREVs), 0, SIZEOF(s_aSingleREVs));
END_IF

s_sChosenFile 		:= GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi[GVL_KMWEGenericLib.g_fbParamManager.p_nHmiFileSelected];
s_sToHmiChosenFile 	:= DELETE(s_sChosenFile, 4, FIND(s_sChosenFile, '.csv'));

s_nIndexRevPrev := s_nIndexRev;
s_nIndexDutPrev	:= s_nIndexDut;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_FullCycle" Id="{85945a60-1e58-4d91-af47-0c270dd5f580}">
      <Declaration><![CDATA[METHOD PUBLIC m_FullCycle : BOOL

VAR_INPUT
	i_objTB : REFERENCE TO OBJ_Carrier;
END_VAR


VAR_INST
	osrTbToCenter : R_TRIG;
	osrTbToDocking : R_TRIG;
	osrTbToInfeed : R_TRIG;
	osrCenterTb : R_TRIG;
	
	osrDockTb : R_TRIG;
	osrUndockTb : R_TRIG;
	osrOpenInnerDoor : R_TRIG;
	osrCloseInnerDoor : R_TRIG;
	
	arr_bTestCmd : ARRAY[0..15] OF BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(__ISVALIDREF(i_objTB)) THEN
	RETURN;
END_IF

m_Inbound();

//Pallet Conveyor
IF arr_bTestCmd[0] THEN GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed(); arr_bTestCmd[0] := FALSE; END_IF
IF arr_bTestCmd[1] THEN GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter(); arr_bTestCmd[1] := FALSE; END_IF
IF arr_bTestCmd[2] THEN GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB(); arr_bTestCmd[2] := FALSE; END_IF
IF arr_bTestCmd[3] THEN GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking(); arr_bTestCmd[3] := FALSE; END_IF

//Docking Interface
IF arr_bTestCmd[4] THEN GVL_Modules.g_emDockingInterface.m_ReqDockTB(); arr_bTestCmd[4] := FALSE; END_IF
IF arr_bTestCmd[5] THEN GVL_Modules.g_emDockingInterface.m_ReqOpenInnerDoor(); arr_bTestCmd[5] := FALSE; END_IF
IF arr_bTestCmd[6] THEN GVL_Modules.g_emDockingInterface.m_ReqCloseInnerDoor(); arr_bTestCmd[6] := FALSE; END_IF
IF arr_bTestCmd[7] THEN GVL_Modules.g_emDockingInterface.m_ReqUndockTB(); arr_bTestCmd[7] := FALSE; END_IF

//Lifting transport
IF arr_bTestCmd[8] THEN GVL_Modules.g_emLiftingTransport.m_ReqGoToIdle(); arr_bTestCmd[8] := FALSE; END_IF
IF arr_bTestCmd[9] THEN GVL_Modules.g_emLiftingTransport.m_ReqPickTrolleyFromTB(); arr_bTestCmd[9] := FALSE; END_IF
IF arr_bTestCmd[10] THEN GVL_Modules.g_emLiftingTransport.m_ReqPlaceTrolleyInTB(); arr_bTestCmd[10] := FALSE; END_IF


//Unit will control lower-layer control modules based on data in Object Carrier
//By changing the data in this object the behanvior can be manipulated / controlled.

{warning '#TODO na gaan of het in onderstaande code niet beter zou zijn om puur te kijken naar de data uit de struct ipv naar properties uit de onderliggende modules?'}
// zoals bij voorbeeld voor TB centered status

//EM_PalletConveyor
IF i_objTB.p_eDestination <> E_Location.UNKNOWN	THEN

	//Transporting TB to Center
	osrTbToCenter(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING) 
		AND i_objTB.p_eDestination > i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation < E_Location.CENTERING  
		AND i_objTB.p_bOuterDoorOpened
		AND i_objTB.p_bApprovedAtInfeed);
	
	IF osrTbToCenter.Q THEN
		GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter();
	END_IF
			
	//Transporting TB to Docking
	osrTbToDocking(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING)
		AND i_objTB.p_eDestination > i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation < E_Location.DOCKING 
		AND GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone
		AND GVL_Modules.g_emDockingInterface.p_bStaUndocked);
	
	IF osrTbToDocking.Q THEN
		GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking();
	END_IF	
		
	//Transporting TB to Infeed
	osrTbToInfeed(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING)
		AND i_objTB.p_eDestination < i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation > E_Location.INFEED
		AND GVL_Modules.g_emDockingInterface.p_bStaUndocked);
	
	IF osrTbToInfeed.Q THEN
		GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed();
	END_IF
	
	//Centering TB
	osrCenterTb(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING) 
		AND i_objTB.p_eActLocation = E_Location.CENTERING  
		AND NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone));
	
	IF osrCenterTb.Q THEN
		GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB();
	END_IF
	
END_IF
	
//EM_DockingInterface
IF i_objTB.p_eDestination <> E_Location.UNKNOWN	THEN
	
	//Docking TB
	osrDockTb(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING) 
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination > E_Location.DOCKING 
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaDocked));

	IF osrDockTb.Q THEN
		GVL_Modules.g_emDockingInterface.m_ReqDockTB();
	END_IF
	
	//Undocking TB
	osrUndockTb(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING)
		AND i_objTB.p_eActLocation = E_Location.DOCKING //Is this about the TB or Trolley location? 
		AND i_objTB.p_eDestination < E_Location.DOCKING
		AND GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosed
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaUndocked));
	
	IF osrUndockTb.Q THEN
		GVL_Modules.g_emDockingInterface.m_ReqUndockTB();
	END_IF

	//Opening Inner Door TB
	osrOpenInnerDoor(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING)
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination > E_Location.DOCKING
		AND GVL_Modules.g_emDockingInterface.p_bStaDocked
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened));
	
	IF osrOpenInnerDoor.Q THEN
		GVL_Modules.g_emDockingInterface.m_ReqOpenInnerDoor();
	END_IF
			
	//Closing Inner Door TB
	osrCloseInnerDoor(
		CLK := (sFbModeStateControl.p_eCtrlState = E_CtrlState.RUNNING)
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination < E_Location.DOCKING
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosed));
	
	IF osrCloseInnerDoor.Q THEN
		GVL_Modules.g_emDockingInterface.m_ReqCloseInnerDoor();
	END_IF
	
END_IF	
	
	
(* Lod Code 20241108	
//EM_PalletConveyor
	
	//Transporting TB to Center
	IF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eDestination > i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation < E_Location.CENTERING  
		AND i_objTB.p_bOuterDoorOpened
		AND i_objTB.p_bApprovedAtInfeed THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter();
			
	//Transporting TB to Docking		
	ELSIF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eDestination > i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation < E_Location.DOCKING 
		AND GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone
		AND GVL_Modules.g_emDockingInterface.p_bStaUndocked THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking();
	
	//Transporting TB to Infeed
	ELSIF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eDestination < i_objTB.p_eActLocation
		AND i_objTB.p_eActLocation > E_Location.INFEED
		AND GVL_Modules.g_emDockingInterface.p_bStaUndocked THEN 
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed();
	
	END_IF
	
	//Centering TB
	IF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.CENTERING  
		AND NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone) THEN
		///AND NOT(i_objTB.p_bCenteringDone) AND NOT(bTest) THEN
		; 
		//	GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB();
	END_IF
	
	osrCenterTb(
		CLK := i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.CENTERING  
		AND NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone));
	
	IF osrCenterTb.Q THEN
		GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB();
	END_IF
	
//EM_DockingInterface

	//Docking TB
	IF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination > E_Location.DOCKING 
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaDocked) THEN
			GVL_Modules.g_emDockingInterface.m_ReqDockTB();
			
	//Undocking TB
	ELSIF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.DOCKING		//Is this about the TB or Trolley location? 
		AND i_objTB.p_eDestination < E_Location.DOCKING
		AND GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosedAndLocked
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaUndocked) THEN  
			GVL_Modules.g_emDockingInterface.m_ReqUndockTB();

	//Opening Inner Door TB
	ELSIF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination > E_Location.DOCKING
		AND GVL_Modules.g_emDockingInterface.p_bStaDocked
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpenedAndReleased) THEN  
			GVL_Modules.g_emDockingInterface.m_ReqOpenInnerDoor();
			
	//Closing Inner Door TB
	ELSIF i_objTB.p_eDestination <> E_Location.UNKNOWN
		AND i_objTB.p_eActLocation = E_Location.DOCKING
		AND i_objTB.p_eDestination < E_Location.DOCKING
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosedAndLocked) THEN  
			GVL_Modules.g_emDockingInterface.m_ReqCloseInnerDoor();
			
	END_IF
*)
//EM_LiftingTransport
	//Get Trolley from TB to Cabin
	//Get Trolley from Cabin to TB
	//..	
	
//EM_Doors
	//Open Speeddoor Infeed
	//Close Speeddoor Infeed
	
	//Release Cleanroom Door
	//Lock Cleanroom Door
	//..

//EM_..	
	
	
//-- Old Code
//FullCycle
//++	m_Inbound();
//	Wait(T#5S)
//	m_Outbound();]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Inbound" Id="{90534ebe-9d21-4aeb-b2cc-cf785c67a06d}">
      <Declaration><![CDATA[METHOD PUBLIC m_Inbound : BOOL
VAR
	sReason : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Register previous step
IF s_eSeqInbound <> s_ePreviousStep
	AND s_eSeqInbound <> E_SeqInbound.ERROR THEN
	s_ePreviousStep := s_eSeqInbound;
END_IF

s_bStaEmError := 
	GVL_Modules.g_emPalletConveyor.p_bStaError
	OR GVL_Modules.g_emDockingInterface.p_bStaError
	OR GVL_Modules.g_emLiftingTransport.p_bStaError;
	
s_bCmdHold := FALSE;
//--	GVL_Modules.g_emPalletConveyor.p_bCmdHold;
	//++ OR GVL_Modules.g_emDockingInterface.p_bCmdHold
	//++ OR GVL_Modules.g_emLiftingTransport.p_bCmdHold;

s_fbSeqControlInbound(
	i_nSeqStep := s_eSeqInbound,
	i_sStepName := TO_STRING(s_eSeqInbound),
	i_bCmdReset := s_fbHmiBtnReset.p_bStaBtn OR s_bCmdAbort,
	i_bStaError := s_bStaEmError OR s_bCmdHold);

s_tonTimer(PT := T#3600S);
	
CASE s_eSeqInbound OF
	E_SeqInbound.IDLE:
		s_eResumeStep := E_SeqInbound.READY;
		s_eSeqInbound := E_SeqInbound.START;
	
	E_SeqInbound.START:
	
		IF s_eCtrlState = E_CtrlState.RUNNING THEN
			s_eSeqInbound := s_eResumeStep;
			s_bCmdHold := FALSE;
		END_IF

//READY////////////////////////////////////////////////////////////////////////////////////////////		
	E_SeqInbound.READY:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
		//??	s_bReqInbound := FALSE;
		//??	s_bReqOutbound := FALSE;
		//??	s_bReqDockTB := FALSE;
		//??	s_bReqUndockTB := FALSE;
		//??	s_bReqPickTrolleyFromTB := FALSE;
		//??	s_bReqPlaceTrolleyInTB := FALSE;
		s_eResumeStep := E_SeqInbound.READY;
		END_IF
		
		IF s_eCtrlState <> E_CtrlState.RUNNING THEN
			s_eSeqInbound := E_SeqInbound.START;
		END_IF
		
		//Via seperate commands te steps below can be initiated, depanding on a certain value the next command can be strated automatically.
		;	
	
		//Check if all equipment is ready (available for operation)
		s_bStaAllEmReady := 
			GVL_Modules.g_emPalletConveyor.p_bStaReady AND
			GVL_Modules.g_emDockingInterface.p_bStaReady AND
			GVL_Modules.g_emLiftingTransport.p_bStaReady;
			
//--		IF s_bStaAllEmReady AND (*GVL_Modules.g_emPalletConveyor.p_bStaTB_AtInfeed AND*) (s_bReqInbound OR s_bReqOutbound OR s_bReqDockTB) THEN
//--			s_eSeqInbound := E_SeqInbound.TB_TO_CENTER;
//--		END_IF
		
		IF s_bStaAllEmReady AND ( (s_eReqAction = E_ReqAction.INBOUND) OR (s_eReqAction = E_ReqAction.OUTBOUND) OR (s_eReqAction = E_ReqAction.DOCK_TB) ) THEN
			s_eSeqInbound := E_SeqInbound.TB_TO_CENTER;
		ELSIF s_bStaAllEmReady AND (s_eReqAction = E_ReqAction.UNDOCK_TB) THEN
			s_eSeqInbound := E_SeqInbound.UNDOCK_TB;
		ELSIF s_bStaAllEmReady AND (s_eReqAction = E_ReqAction.OPEN_INNER_TB_DOOR) THEN
			s_eSeqInbound := E_SeqInbound.OPEN_INNER_SPEED_DOOR;
		ELSIF s_bStaAllEmReady AND (s_eReqAction = E_ReqAction.CLOSE_INNER_TB_DOOR) THEN
			s_eSeqInbound := E_SeqInbound.CLOSE_INNER_TB_DOOR;	
		ELSIF s_bStaAllEmReady AND (s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB) THEN
			//TODO check if correct --> Nog bepalen wat hier wenslijk is: of doorgaan va. OPEN INNER SPEED DOOR of direct naar PICK TROLLEY
//??			s_eSeqInbound := E_SeqInbound.OPEN_INNER_SPEED_DOOR;
			s_eSeqInbound := E_SeqInbound.PICK_TROLLEY_FROM_TB;
		ELSIF s_bStaAllEmReady AND (s_eReqAction = E_ReqAction.PLACE_TROLLEY_IN_TB) THEN
			//TODO check if correct	--> Nog bepalen wat hier wenslijk is: of doorgaan va. OPEN INNER SPEED DOOR of direct naar PLACE TROLLEY
//??			s_eSeqInbound := E_SeqInbound.OPEN_INNER_SPEED_DOOR;
			s_eSeqInbound := E_SeqInbound.PLACE_TROLLEY_IN_TB;
		END_IF
		
//--		IF s_bStaAllEmReady AND FALSE THEN
//--			s_eSeqInbound := E_SeqInbound.TB_TO_INFEED;
//--		END_IF
		
//--		IF s_bStaAllEmReady AND FALSE THEN
//--			s_eSeqInbound := E_SeqInbound.TB_TO_DOCKING;
//--		END_IF
		
//--		IF s_bStaAllEmReady AND (s_bReqUndockTB) THEN
//--			s_eSeqInbound := E_SeqInbound.CLOSE_INNER_TB_DOOR;
//--		END_IF
		
//--		IF s_bStaAllEmReady AND s_bReqPickTrolleyFromTB THEN
//--			s_eSeqInbound := E_SeqInbound.PICK_TROLLEY_FROM_TB;
//--		END_IF
		
//--		IF s_bStaAllEmReady AND s_bReqPlaceTrolleyInTB THEN
//--			s_eSeqInbound := E_SeqInbound.PLACE_TROLLEY_IN_TB;
//--		END_IF
////		
	E_SeqInbound.TB_TO_CENTER:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter();
		END_IF
		
		IF GVL_Modules.g_emPalletConveyor.p_bStaTB_AtCentering
			AND GVL_Modules.g_emPalletConveyor.p_bStaReady THEN			
			s_eSeqInbound := E_SeqInbound.OPEN_OUTER_SPEED_DOOR;
		END_IF

	E_SeqInbound.OPEN_OUTER_SPEED_DOOR:
		IF GVL_Modules.g_emDoors.p_bStaEnabled THEN
			IF s_fbSeqControlInbound.q_bStaEntry THEN
				GVL_Modules.g_emDoors.m_ReqOpenOuterDoor();
			END_IF
		
			IF GVL_Modules.g_emDoors.p_bStaOuterDoorOpened
				AND GVL_Modules.g_emDoors.p_bStaReady THEN			
				s_eSeqInbound := E_SeqInbound.TB_TO_DOCKING;
			END_IF
			
		ELSE //SKIP SPEED DOOR CONTROL	
			IF s_fbSeqControlInbound.q_tmStepTime >= T#3S THEN
				s_eSeqInbound := E_SeqInbound.TB_TO_DOCKING;
			END_IF
		END_IF
////		
	E_SeqInbound.TB_TO_DOCKING:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking();
		END_IF
		
		IF GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking
			AND GVL_Modules.g_emPalletConveyor.p_bStaReady THEN
			s_eSeqInbound := E_SeqInbound.DOCK_TB;
		END_IF
		
	E_SeqInbound.DOCK_TB:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
			GVL_Modules.g_emDockingInterface.m_ReqDockTB();
		END_IF
		
		IF GVL_Modules.g_emDockingInterface.p_bStaDocked 
			AND GVL_Modules.g_emDockingInterface.p_bStaReady THEN
			
			IF ( (s_eReqAction = E_ReqAction.INBOUND) OR (s_eReqAction = E_ReqAction.OUTBOUND) ) THEN
				s_eSeqInbound := E_SeqInbound.OPEN_INNER_SPEED_DOOR;
				
			ELSIF (s_eReqAction = E_ReqAction.DOCK_TB) THEN
				s_eSeqInbound := E_SeqInbound.STOP;
			END_IF
		END_IF
		
	E_SeqInbound.OPEN_INNER_SPEED_DOOR:
		IF GVL_Modules.g_emDoors.p_bStaEnabled THEN
			IF s_fbSeqControlInbound.q_bStaEntry THEN
				GVL_Modules.g_emDoors.m_ReqOpenInnerDoor();
			END_IF
		
			IF GVL_Modules.g_emDoors.p_bStaInnerDoorOpened
				AND GVL_Modules.g_emDoors.p_bStaReady THEN			
				s_eSeqInbound := E_SeqInbound.OPEN_INNER_TB_DOOR;
			END_IF
			
		ELSE //SKIP SPEED DOOR CONTROL
			IF s_fbSeqControlInbound.q_tmStepTime >= T#3S THEN
				s_eSeqInbound := E_SeqInbound.OPEN_INNER_TB_DOOR;
			END_IF
		END_IF
			
	E_SeqInbound.OPEN_INNER_TB_DOOR:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
			GVL_Modules.g_emDockingInterface.m_ReqOpenInnerDoor();
		END_IF
		
		IF GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened
			AND GVL_Modules.g_emDockingInterface.p_bStaReady THEN
			
			s_eSeqInbound := E_SeqInbound.FLUSHING;
		END_IF
	
	E_SeqInbound.FLUSHING:
		{warning '#TODO: Add future/FUMO3 code'}
		IF ( (s_eReqAction = E_ReqAction.INBOUND) (*OR (s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB)*) ) THEN 
			s_eSeqInbound := E_SeqInbound.PICK_TROLLEY_FROM_TB;
		ELSIF ( (s_eReqAction = E_ReqAction.OUTBOUND) OR (s_eReqAction = E_ReqAction.PLACE_TROLLEY_IN_TB) ) THEN 
			s_eSeqInbound := E_SeqInbound.OPEN_CLEANROOM_DOOR;
		ELSIF (s_eReqAction = E_ReqAction.DOCK_TB) THEN
			s_eSeqInbound := E_SeqInbound.STOP;
		ELSIF (s_eReqAction = E_ReqAction.OPEN_INNER_TB_DOOR) THEN
			s_eSeqInbound := E_SeqInbound.STOP;	
		ELSE
			s_eSeqInbound := E_SeqInbound.STOP;
		END_IF
	
////		
	E_SeqInbound.PICK_TROLLEY_FROM_TB:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
			GVL_Modules.g_emLiftingTransport.m_ReqPickTrolleyFromTB();
		END_IF
		
		IF GVL_Modules.g_emLiftingTransport.p_bStaTrolleyPickedFromTB
			AND GVL_Modules.g_emLiftingTransport.p_bStaReady THEN
			
			IF (s_eReqAction = E_ReqAction.INBOUND) THEN
				s_eSeqInbound := E_SeqInbound.OPEN_CLEANROOM_DOOR;
			ELSIF (s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB) THEN
				s_eSeqInbound := E_SeqInbound.STOP;
			END_IF
			
//--			IF s_bReqInbound THEN 
//--				{warning '#TODO: What is expexted from inbound? Stay Docked or return empty TB to infeed'}
//--				s_eSeqInbound := E_SeqInbound.CLOSE_INNER_TB_DOOR;
//--			END_IF
		END_IF
////		
	E_SeqInbound.PLACE_TROLLEY_IN_TB:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
			GVL_Modules.g_emLiftingTransport.m_ReqPlaceTrolleyInTB();
		END_IF
		
		IF GVL_Modules.g_emLiftingTransport.p_bStaTrolleyPlacedInTB
			AND GVL_Modules.g_emLiftingTransport.p_bStaReady THEN
			
			IF (s_eReqAction = E_ReqAction.OUTBOUND) THEN 
				s_eSeqInbound := E_SeqInbound.CLOSE_CLEANROOM_DOOR;
			ELSIF (s_eReqAction = E_ReqAction.PLACE_TROLLEY_IN_TB) THEN
				s_eSeqInbound := E_SeqInbound.STOP;
			ELSE
				s_eSeqInbound := E_SeqInbound.STOP;
			END_IF
		END_IF
		
	E_SeqInbound.OPEN_CLEANROOM_DOOR:
		;
		{warning '#TODO: Add future/FUMO3 code'}
		IF ( (s_eReqAction = E_ReqAction.INBOUND) (*OR (s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB)*) ) THEN
			s_eSeqInbound := E_SeqInbound.CLOSE_CLEANROOM_DOOR;
		ELSIF (s_eReqAction = E_ReqAction.OUTBOUND) THEN	
			s_eSeqInbound := E_SeqInbound.PLACE_TROLLEY_IN_TB;
		END_IF

	E_SeqInbound.CLOSE_CLEANROOM_DOOR:
		;
		{warning '#TODO: Add future/FUMO3 code'}
		s_eSeqInbound := E_SeqInbound.CLOSE_INNER_TB_DOOR;	
		
////		
	E_SeqInbound.CLOSE_INNER_TB_DOOR:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
			GVL_Modules.g_emDockingInterface.m_ReqCloseInnerDoor();
		END_IF
		
		IF GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosed 
			AND GVL_Modules.g_emDockingInterface.p_bStaReady THEN
			s_eSeqInbound := E_SeqInbound.CLOSE_INNER_SPEED_DOOR;
		END_IF
	
	E_SeqInbound.CLOSE_INNER_SPEED_DOOR:
		IF GVL_Modules.g_emDoors.p_bStaEnabled THEN
			IF s_fbSeqControlInbound.q_bStaEntry THEN
				GVL_Modules.g_emDoors.m_ReqCloseInnerDoor();
			END_IF
		
			IF GVL_Modules.g_emDoors.p_bStaInnerDoorClosed
				AND GVL_Modules.g_emDoors.p_bStaReady THEN
				IF ( (s_eReqAction = E_ReqAction.INBOUND) OR (s_eReqAction = E_ReqAction.OUTBOUND) ) THEN
					s_eSeqInbound := s_eSeqInbound := E_SeqInbound.UNDOCK_TB;
				ELSIF ( (*(s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB) OR (s_eReqAction = E_ReqAction.PLACE_TROLLEY_IN_TB) OR *) (s_eReqAction = E_ReqAction.CLOSE_INNER_TB_DOOR) ) THEN
					s_eSeqInbound := E_SeqInbound.STOP;
				END_IF		
			END_IF
			
		ELSE //SKIP SPEED DOOR CONTROL
			IF s_fbSeqControlInbound.q_tmStepTime >= T#3S THEN
				IF ( (s_eReqAction = E_ReqAction.INBOUND) OR (s_eReqAction = E_ReqAction.OUTBOUND) ) THEN
					s_eSeqInbound := s_eSeqInbound := E_SeqInbound.UNDOCK_TB;
				ELSIF ( (*(s_eReqAction = E_ReqAction.PICK_TROLLEY_FROM_TB) OR (s_eReqAction = E_ReqAction.PLACE_TROLLEY_IN_TB) OR *) (s_eReqAction = E_ReqAction.CLOSE_INNER_TB_DOOR) ) THEN
					s_eSeqInbound := E_SeqInbound.STOP;
				END_IF
			END_IF
		END_IF
		
	E_SeqInbound.UNDOCK_TB:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
			GVL_Modules.g_emDockingInterface.m_ReqUndockTB();
		END_IF
		
		IF GVL_Modules.g_emDockingInterface.p_bStaUndocked
			AND GVL_Modules.g_emDockingInterface.p_bStaReady THEN
			s_eSeqInbound := E_SeqInbound.TB_TO_INFEED;
		END_IF
		
	E_SeqInbound.TB_TO_INFEED:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed();
		END_IF
		
		IF NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_AtDocking) THEN
//++			GVL_Modules.g_emDoors.m_ReqOuterSpeedDoorClose();
			;
		END_IF
	
		IF GVL_Modules.g_emPalletConveyor.p_bStaTB_AtInfeed
			AND GVL_Modules.g_emPalletConveyor.p_bStaReady THEN
			
			s_eSeqInbound := E_SeqInbound.CLOSE_OUTER_SPEED_DOOR;
			
//--			IF s_bReqUndockTB THEN
//--				s_eSeqInbound := E_SeqInbound.READY;
//--			ELSE
//--				s_eSeqInbound := E_SeqInbound.READY;
//--			END_IF
		END_IF

	E_SeqInbound.CLOSE_OUTER_SPEED_DOOR:
		IF GVL_Modules.g_emDoors.p_bStaEnabled THEN
			IF s_fbSeqControlInbound.q_bStaEntry THEN
				GVL_Modules.g_emDoors.m_ReqCloseOuterDoor();
			END_IF
		
			IF GVL_Modules.g_emDoors.p_bStaOuterDoorClosed
				AND GVL_Modules.g_emDoors.p_bStaReady THEN			
				s_eSeqInbound := E_SeqInbound.STOP;
			END_IF
			
		ELSE //SKIP SPEED DOOR CONTROL
			IF s_fbSeqControlInbound.q_tmStepTime >= T#3S THEN
				s_eSeqInbound := E_SeqInbound.STOP;
			END_IF
		END_IF
		
	E_SeqInbound.STOP:
		//Do not use .qEnrty forced stop doesn't make use of fbSeqControl
//--		s_bReqInbound := FALSE;
//--		s_bReqOutbound := FALSE;
//--		s_bReqDockTB := FALSE;
//--		s_bReqUndockTB := FALSE;
//--		s_bReqPickTrolleyFromTB := FALSE;
//--		s_bReqPlaceTrolleyInTB := FALSE;
		
		s_eReqAction := E_ReqAction.NONE;
				
		s_eSeqInbound := E_SeqInbound.READY;
	
	E_SeqInbound.ERROR:
		IF s_fbSeqControlInbound.q_bStaEntry THEN
			s_eReqAction := E_ReqAction.NONE;	
		
			IF s_ePreviousStep > E_SeqInbound.START
				AND s_ePreviousStep < E_SeqInbound.ERROR THEN
				s_eResumeStep := s_ePreviousStep;
			ELSE 
				s_eResumeStep := E_SeqInbound.IDLE;
			END_IF
		END_IF

END_CASE

//TEST
(*--
IF s_arr_bBoolTest[0] THEN GVL_Modules.g_emDoors.m_ReqOpenOuterDoor(); s_arr_bBoolTest[0] := FALSE; END_IF
IF s_arr_bBoolTest[1] THEN GVL_Modules.g_emDoors.m_ReqCloseOuterDoor(); s_arr_bBoolTest[1] := FALSE; END_IF
IF s_arr_bBoolTest[2] THEN GVL_Modules.g_emDoors.m_ReqOpenInnerDoor(); s_arr_bBoolTest[2] := FALSE; END_IF
IF s_arr_bBoolTest[3] THEN GVL_Modules.g_emDoors.m_ReqCloseInnerDoor(); s_arr_bBoolTest[3] := FALSE; END_IF

s_arr_bBoolTest[9] := GVL_Modules.g_emDoors.p_bStaEnabled;
s_arr_bBoolTest[10] := GVL_Modules.g_emDoors.p_bStaError;
s_arr_bBoolTest[11] := GVL_Modules.g_emDoors.p_bStaOuterDoorClosed;
s_arr_bBoolTest[12] := GVL_Modules.g_emDoors.p_bStaOuterDoorOpened;
s_arr_bBoolTest[13] := GVL_Modules.g_emDoors.p_bStaInnerDoorClosed;
s_arr_bBoolTest[14] := GVL_Modules.g_emDoors.p_bStaInnerDoorOpened;
s_arr_bBoolTest[15] := GVL_Modules.g_emDoors.p_bStaReady;
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{bf5d9d9d-3881-4722-ad23-ed0781ff35d5}">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
VAR
	s_bStaReady : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

GVL.g_osrNotify();

//--GVL_DataLogging.g_fbDataLogger(i_sPathName := 'C:\RMMT\', i_bCmdReset := s_bCmdReset);

//--GVL_DataLogging.g_fbSqlDatabase(i_stSettings := s_stSqlDbSettings, i_bCmdReset := s_bCmdReset);

//--_m_SelectConfigFile(i_bCmdReset := s_fbHmiBtnAutomatic.p_osfBtnPress);

GVL.g_osrNotify.CLK := FALSE;	



m_FullCycle(i_objTB := GVL_Modules.g_objCarrier);

m_Main := TRUE;

//--IF s_arr_bBoolTest[0] THEN GVL_Modules.g_emLiftingTransport.m_ReqGoToIdle(); s_arr_bBoolTest[0] := FALSE; END_IF
//--IF s_arr_bBoolTest[1] THEN GVL_Modules.g_emLiftingTransport.m_ReqPickTrolleyFromTB(); s_arr_bBoolTest[1] := FALSE; END_IF
//--IF s_arr_bBoolTest[2] THEN GVL_Modules.g_emLiftingTransport.m_ReqPlaceTrolleyInTB(); s_arr_bBoolTest[2] := FALSE; END_IF

CASE s_eCtrlMode OF

	E_CtrlMode.IDLE:
		s_eReqAction := E_ReqAction.NONE;	
	
	E_CtrlMode.AUTOMATIC:
		//Wait for commands from 
		IF s_fbHmiBtnInbound.p_osrBtnPress THEN
			//--s_bReqInbound := TRUE;
			s_eReqAction := E_ReqAction.INBOUND;
		END_IF
		
		IF s_fbHmiBtnOutbound.p_osrBtnPress THEN
			//--s_bReqOutbound := TRUE;
			s_eReqAction := E_ReqAction.OUTBOUND;
		END_IF
		
		IF s_fbHmiBtnDockTB.p_osrBtnPress THEN
			//--s_bReqDockTB := TRUE;
			s_eReqAction := E_ReqAction.DOCK_TB;
		END_IF
		
		IF s_fbHmiBtnUndockTB.p_osrBtnPress THEN
			//--s_bReqUndockTB := TRUE;
			s_eReqAction := E_ReqAction.UNDOCK_TB;
		END_IF
		
		IF s_fbHmiBtnOpenInnerTBDoor.p_osrBtnPress THEN
			//--s_bReqUndockTB := TRUE;
			s_eReqAction := E_ReqAction.OPEN_INNER_TB_DOOR;
		END_IF
		
		IF s_fbHmiBtnCloseInnerTBDoor.p_osrBtnPress THEN
			//--s_bReqUndockTB := TRUE;
			s_eReqAction := E_ReqAction.CLOSE_INNER_TB_DOOR;
		END_IF
			
		IF s_fbHmiBtnPickTrolleyFromTB.p_osrBtnPress THEN
			//--s_bReqPickTrolleyFromTB := TRUE;
			s_eReqAction := E_ReqAction.PICK_TROLLEY_FROM_TB;
		END_IF
		
		IF s_fbHmiBtnPlaceTrolleyInTB.p_osrBtnPress THEN
			//--s_bReqPlaceTrolleyInTB := TRUE;
			s_eReqAction := E_ReqAction.PLACE_TROLLEY_IN_TB;
		END_IF
		
	E_CtrlMode.MANUAL:
		;
		
	E_CtrlMode.MAINTENANCE:
		;
		
	E_CtrlMode.IO:
		;
		
	E_CtrlMode.CLEANING;
		;
		
END_CASE

IF s_eCtrlMode <> E_CtrlMode.AUTOMATIC THEN
	//Reset all commands
//--	s_bReqInbound := FALSE;
//--	s_bReqOutbound := FALSE;
//--	s_bReqDockTB := FALSE;
//--	s_bReqUndockTB := FALSE;
//--	s_bReqPickTrolleyFromTB := FALSE;
//--	s_bReqPlaceTrolleyInTB := FALSE;
	s_eReqAction := E_ReqAction.NONE;	
END_IF

s_bStaReady := (s_eSeqInbound = E_SeqInbound.READY);


s_fbHmiBtnDockTB.p_bStaEnabled := s_bStaReady AND NOT(GVL_Modules.g_emDockingInterface.p_bStaDocked);
s_fbHmiBtnUndockTB.p_bStaEnabled := s_bStaReady AND NOT(GVL_Modules.g_emDockingInterface.p_bStaUnDocked) AND (GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosed);
s_fbHmiBtnOpenInnerTBDoor.p_bStaEnabled := s_bStaReady AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened) AND (GVL_Modules.g_emDockingInterface.p_bStaDocked);
s_fbHmiBtnCloseInnerTBDoor.p_bStaEnabled := s_bStaReady AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosed);
s_fbHmiBtnPickTrolleyFromTB.p_bStaEnabled := s_bStaReady AND GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened;  
s_fbHmiBtnPlaceTrolleyInTB.p_bStaEnabled := s_bStaReady AND GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpened;

// Paul Schippers: just a test with the use of interfaces
//??itfEmDoors.m_CloseOuterDoor();

//??itfEmDockingInterface.m_OpenDockingClamps();

//IF NOT(itfEmAirTreatment.p_bStaPressurizingOK) THEN 
//	itfEmAirTreatment.m_Pressurize();
//END_IF

(*	
	// Interlocks (doors must work as an airlock, only one door may be opened at all times)
	s_bIlckSpeedDoorOuterToOpen :=
		s_cmDoorLockCleanroom.p_bStaError
		OR NOT(s_cmDoorLockCleanroom.p_bStaEnabled)
		NOT(s_cmDoorLockCleanroom.p_bStaDoorIsClosed)
		OR NOT (s_cmDoorLockCleanroom.p_bStaLockIsApplied)
		OR s_cmDoorLockCleanroom.p_bStaLockIsReleased
		OR TRUE (*Air treathment unit must be running and ok*)
		OR TRUE (*Add more..*);
	s_bIlckSpeedDoorOuterToClose :=
		TRUE (*Opening must be free*)
		OR TRUE (*Add more..*);
	
	s_bIlckDoorLockCleanroomToOpen :=
		s_cmSpeedDoorOuter.p_bStaError
		OR NOT(s_cmSpeedDoorOuter.p_bStaEnabled)
		OR NOT(s_cmSpeedDoorOuter.p_bStaIsClosed)
		OR s_cmSpeedDoorOuter.p_bStaIsClosing
		OR s_cmSpeedDoorOuter.p_bStaIsOpened
		OR s_cmSpeedDoorOuter.p_bStaIsOpening
		OR TRUE (*Air treathment unit must be running and ok*)
		OR TRUE (*Add more..*);
*)	]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Outbound" Id="{6261bd7c-d400-4b5a-911e-fc663ac04169}">
      <Declaration><![CDATA[METHOD PUBLIC m_Outbound : BOOL
VAR
	sReason : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Onderstaande sequencer zal nog verder moeten worden opgebouwd

//Outbound cycle (happy flow)
GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter();

GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB();

GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking();

GVL_Modules.g_emDockingInterface.m_ReqDockTB();

GVL_Modules.g_emDockingInterface.m_ReqOpenInnerDoor();

GVL_Modules.g_emLiftingTransport.m_ReqPlaceTrolleyInTB();

GVL_Modules.g_emDockingInterface.m_ReqCloseInnerDoor();

GVL_Modules.g_emDockingInterface.m_ReqUndockTB();

GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed();
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="UN_CleanroomConnect">
      <LineId Id="171" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="317" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Alarms">
      <LineId Id="28" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="11" Count="3" />
      <LineId Id="16" Count="6" />
      <LineId Id="5" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Devices">
      <LineId Id="35" Count="0" />
      <LineId Id="6" Count="3" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Hmi">
      <LineId Id="286" Count="0" />
      <LineId Id="9" Count="11" />
      <LineId Id="307" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="22" Count="25" />
      <LineId Id="274" Count="1" />
      <LineId Id="240" Count="0" />
      <LineId Id="254" Count="1" />
      <LineId Id="242" Count="1" />
      <LineId Id="241" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="51" Count="16" />
      <LineId Id="277" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="184" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="191" Count="2" />
      <LineId Id="235" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="76" Count="4" />
      <LineId Id="84" Count="4" />
      <LineId Id="99" Count="0" />
      <LineId Id="231" Count="1" />
      <LineId Id="187" Count="0" />
      <LineId Id="189" Count="1" />
      <LineId Id="196" Count="2" />
      <LineId Id="195" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="209" Count="2" />
      <LineId Id="216" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="228" Count="2" />
      <LineId Id="212" Count="2" />
      <LineId Id="208" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="220" Count="7" />
      <LineId Id="219" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="265" Count="1" />
      <LineId Id="264" Count="0" />
      <LineId Id="244" Count="2" />
      <LineId Id="142" Count="11" />
      <LineId Id="155" Count="1" />
      <LineId Id="296" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="336" Count="3" />
      <LineId Id="350" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Init">
      <LineId Id="3926" Count="10" />
      <LineId Id="4319" Count="1" />
      <LineId Id="4318" Count="0" />
      <LineId Id="3940" Count="10" />
      <LineId Id="3952" Count="3" />
      <LineId Id="3957" Count="2" />
      <LineId Id="4357" Count="0" />
      <LineId Id="3960" Count="17" />
      <LineId Id="4260" Count="0" />
      <LineId Id="4262" Count="0" />
      <LineId Id="4367" Count="0" />
      <LineId Id="4265" Count="1" />
      <LineId Id="4358" Count="1" />
      <LineId Id="4361" Count="0" />
      <LineId Id="4369" Count="0" />
      <LineId Id="4362" Count="0" />
      <LineId Id="4368" Count="0" />
      <LineId Id="4363" Count="0" />
      <LineId Id="4366" Count="0" />
      <LineId Id="4360" Count="0" />
      <LineId Id="4250" Count="0" />
      <LineId Id="3979" Count="22" />
      <LineId Id="4259" Count="0" />
      <LineId Id="4251" Count="0" />
      <LineId Id="4255" Count="3" />
      <LineId Id="4252" Count="0" />
      <LineId Id="4002" Count="3" />
      <LineId Id="4246" Count="0" />
      <LineId Id="4245" Count="0" />
      <LineId Id="4247" Count="1" />
      <LineId Id="4006" Count="62" />
      <LineId Id="4070" Count="6" />
      <LineId Id="4078" Count="6" />
      <LineId Id="4086" Count="6" />
      <LineId Id="4094" Count="6" />
      <LineId Id="4102" Count="6" />
      <LineId Id="4110" Count="6" />
      <LineId Id="4118" Count="6" />
      <LineId Id="4126" Count="7" />
      <LineId Id="4135" Count="6" />
      <LineId Id="4143" Count="6" />
      <LineId Id="4151" Count="6" />
      <LineId Id="4159" Count="6" />
      <LineId Id="4167" Count="6" />
      <LineId Id="4175" Count="6" />
      <LineId Id="4183" Count="8" />
      <LineId Id="4334" Count="0" />
      <LineId Id="4321" Count="0" />
      <LineId Id="4324" Count="5" />
      <LineId Id="4337" Count="0" />
      <LineId Id="4339" Count="3" />
      <LineId Id="4344" Count="2" />
      <LineId Id="4338" Count="0" />
      <LineId Id="4347" Count="0" />
      <LineId Id="4349" Count="6" />
      <LineId Id="4348" Count="0" />
      <LineId Id="4330" Count="2" />
      <LineId Id="4335" Count="0" />
      <LineId Id="4333" Count="0" />
      <LineId Id="4322" Count="0" />
      <LineId Id="4192" Count="38" />
      <LineId Id="4268" Count="0" />
      <LineId Id="4277" Count="2" />
      <LineId Id="4276" Count="0" />
      <LineId Id="4307" Count="0" />
      <LineId Id="4282" Count="2" />
      <LineId Id="4281" Count="0" />
      <LineId Id="4285" Count="0" />
      <LineId Id="4287" Count="2" />
      <LineId Id="4286" Count="0" />
      <LineId Id="4290" Count="0" />
      <LineId Id="4292" Count="2" />
      <LineId Id="4291" Count="0" />
      <LineId Id="4308" Count="0" />
      <LineId Id="4310" Count="2" />
      <LineId Id="4309" Count="0" />
      <LineId Id="4313" Count="0" />
      <LineId Id="4315" Count="2" />
      <LineId Id="4314" Count="0" />
      <LineId Id="4295" Count="0" />
      <LineId Id="4297" Count="2" />
      <LineId Id="4296" Count="0" />
      <LineId Id="4300" Count="0" />
      <LineId Id="4305" Count="0" />
      <LineId Id="4303" Count="1" />
      <LineId Id="4301" Count="0" />
      <LineId Id="4269" Count="0" />
      <LineId Id="4232" Count="12" />
      <LineId Id="78" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Modules">
      <LineId Id="1017" Count="0" />
      <LineId Id="848" Count="3" />
      <LineId Id="978" Count="0" />
      <LineId Id="980" Count="0" />
      <LineId Id="1257" Count="0" />
      <LineId Id="981" Count="0" />
      <LineId Id="1284" Count="2" />
      <LineId Id="1256" Count="0" />
      <LineId Id="979" Count="0" />
      <LineId Id="984" Count="0" />
      <LineId Id="982" Count="0" />
      <LineId Id="852" Count="0" />
      <LineId Id="1418" Count="0" />
      <LineId Id="983" Count="0" />
      <LineId Id="853" Count="7" />
      <LineId Id="1001" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="863" Count="4" />
      <LineId Id="946" Count="0" />
      <LineId Id="1419" Count="1" />
      <LineId Id="1128" Count="0" />
      <LineId Id="1670" Count="1" />
      <LineId Id="1668" Count="0" />
      <LineId Id="1672" Count="1" />
      <LineId Id="1748" Count="0" />
      <LineId Id="1674" Count="3" />
      <LineId Id="1669" Count="0" />
      <LineId Id="1667" Count="0" />
      <LineId Id="1129" Count="0" />
      <LineId Id="1164" Count="2" />
      <LineId Id="1590" Count="0" />
      <LineId Id="1169" Count="1" />
      <LineId Id="1747" Count="0" />
      <LineId Id="1171" Count="3" />
      <LineId Id="1167" Count="0" />
      <LineId Id="1678" Count="0" />
      <LineId Id="874" Count="2" />
      <LineId Id="975" Count="0" />
      <LineId Id="1057" Count="0" />
      <LineId Id="879" Count="1" />
      <LineId Id="883" Count="0" />
      <LineId Id="1421" Count="0" />
      <LineId Id="1386" Count="0" />
      <LineId Id="1355" Count="0" />
      <LineId Id="1679" Count="0" />
      <LineId Id="1746" Count="0" />
      <LineId Id="1714" Count="0" />
      <LineId Id="1749" Count="0" />
      <LineId Id="1684" Count="3" />
      <LineId Id="1681" Count="0" />
      <LineId Id="1680" Count="0" />
      <LineId Id="1356" Count="0" />
      <LineId Id="1362" Count="1" />
      <LineId Id="1591" Count="0" />
      <LineId Id="1380" Count="1" />
      <LineId Id="1750" Count="0" />
      <LineId Id="1382" Count="3" />
      <LineId Id="1354" Count="0" />
      <LineId Id="1602" Count="0" />
      <LineId Id="1607" Count="0" />
      <LineId Id="1631" Count="0" />
      <LineId Id="1634" Count="1" />
      <LineId Id="1751" Count="0" />
      <LineId Id="1636" Count="3" />
      <LineId Id="1633" Count="0" />
      <LineId Id="1632" Count="0" />
      <LineId Id="1608" Count="0" />
      <LineId Id="1612" Count="0" />
      <LineId Id="1624" Count="1" />
      <LineId Id="1752" Count="0" />
      <LineId Id="1626" Count="3" />
      <LineId Id="1604" Count="1" />
      <LineId Id="1647" Count="1" />
      <LineId Id="1650" Count="1" />
      <LineId Id="1753" Count="0" />
      <LineId Id="1652" Count="7" />
      <LineId Id="1661" Count="1" />
      <LineId Id="1754" Count="0" />
      <LineId Id="1663" Count="3" />
      <LineId Id="1645" Count="1" />
      <LineId Id="885" Count="2" />
      <LineId Id="1000" Count="0" />
      <LineId Id="1056" Count="0" />
      <LineId Id="1589" Count="0" />
      <LineId Id="959" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="1756" Count="3" />
      <LineId Id="890" Count="0" />
      <LineId Id="1423" Count="0" />
      <LineId Id="1288" Count="0" />
      <LineId Id="1424" Count="0" />
      <LineId Id="1333" Count="0" />
      <LineId Id="1326" Count="1" />
      <LineId Id="1330" Count="1" />
      <LineId Id="1329" Count="0" />
      <LineId Id="1325" Count="0" />
      <LineId Id="1335" Count="0" />
      <LineId Id="1755" Count="0" />
      <LineId Id="1337" Count="1" />
      <LineId Id="1341" Count="1" />
      <LineId Id="1339" Count="0" />
      <LineId Id="1290" Count="0" />
      <LineId Id="1287" Count="0" />
      <LineId Id="1036" Count="1" />
      <LineId Id="1049" Count="1" />
      <LineId Id="1042" Count="4" />
      <LineId Id="1447" Count="1" />
      <LineId Id="1516" Count="0" />
      <LineId Id="1518" Count="1" />
      <LineId Id="1696" Count="5" />
      <LineId Id="1688" Count="0" />
      <LineId Id="1515" Count="0" />
      <LineId Id="1505" Count="0" />
      <LineId Id="1509" Count="0" />
      <LineId Id="1507" Count="0" />
      <LineId Id="1520" Count="0" />
      <LineId Id="1513" Count="0" />
      <LineId Id="1702" Count="5" />
      <LineId Id="1690" Count="0" />
      <LineId Id="1506" Count="0" />
      <LineId Id="1521" Count="2" />
      <LineId Id="1708" Count="5" />
      <LineId Id="1692" Count="1" />
      <LineId Id="1525" Count="2" />
      <LineId Id="1510" Count="0" />
      <LineId Id="1550" Count="5" />
      <LineId Id="1540" Count="0" />
      <LineId Id="1034" Count="0" />
      <LineId Id="904" Count="2" />
      <LineId Id="1473" Count="1" />
      <LineId Id="1560" Count="0" />
      <LineId Id="908" Count="1" />
      <LineId Id="1557" Count="2" />
      <LineId Id="1556" Count="0" />
      <LineId Id="910" Count="4" />
      <LineId Id="1058" Count="0" />
      <LineId Id="1449" Count="0" />
      <LineId Id="1059" Count="2" />
      <LineId Id="916" Count="3" />
      <LineId Id="1063" Count="0" />
      <LineId Id="1450" Count="0" />
      <LineId Id="1064" Count="0" />
      <LineId Id="1062" Count="0" />
      <LineId Id="921" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_SelectConfigFile">
      <LineId Id="202" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="3" Count="30" />
      <LineId Id="40" Count="1" />
      <LineId Id="43" Count="2" />
      <LineId Id="47" Count="14" />
      <LineId Id="79" Count="5" />
      <LineId Id="143" Count="0" />
      <LineId Id="87" Count="12" />
      <LineId Id="101" Count="2" />
      <LineId Id="105" Count="6" />
      <LineId Id="203" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_FullCycle">
      <LineId Id="978" Count="231" />
      <LineId Id="211" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_Inbound">
      <LineId Id="3359" Count="360" />
      <LineId Id="3721" Count="0" />
      <LineId Id="3720" Count="0" />
      <LineId Id="3723" Count="0" />
      <LineId Id="3722" Count="0" />
      <LineId Id="3724" Count="2" />
      <LineId Id="3728" Count="0" />
      <LineId Id="3727" Count="0" />
      <LineId Id="3729" Count="0" />
      <LineId Id="3736" Count="0" />
      <LineId Id="3731" Count="0" />
      <LineId Id="3734" Count="0" />
      <LineId Id="3733" Count="0" />
      <LineId Id="3735" Count="0" />
      <LineId Id="95" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_Main">
      <LineId Id="30" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="71" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="90" Count="2" />
      <LineId Id="96" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="143" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="2" />
      <LineId Id="169" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="175" Count="2" />
      <LineId Id="174" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="154" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="167" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="103" Count="10" />
      <LineId Id="87" Count="1" />
      <LineId Id="117" Count="1" />
      <LineId Id="125" Count="4" />
      <LineId Id="124" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="191" Count="0" />
      <LineId Id="179" Count="6" />
      <LineId Id="61" Count="1" />
      <LineId Id="66" Count="3" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="33" Count="24" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_Outbound">
      <LineId Id="100" Count="1" />
      <LineId Id="111" Count="17" />
      <LineId Id="91" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>