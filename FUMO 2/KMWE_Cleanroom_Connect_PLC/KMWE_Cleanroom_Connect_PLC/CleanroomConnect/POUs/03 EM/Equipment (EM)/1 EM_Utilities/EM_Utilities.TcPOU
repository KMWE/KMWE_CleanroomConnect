<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_Utilities" Id="{d3bdaf93-23e0-447c-addf-e1fdaa10e5f0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_Utilities EXTENDS EM_Base IMPLEMENTS I_EM_Utilities
VAR
	//Control modules
	s_diSafetyOk : FB_DigInput;	//State from TwinSAFE
	s_diSafetyFbErr : FB_DigInput;	//State from TwinSAFE
	s_diRestartSafety : FB_DigInput;
	s_diPower400VacOk : FB_DigInput; //F1
	s_diPower230VacOk : FB_DigInput; //F2
	s_diPower230VacSocketsOk : FB_DigInput; //F3
	s_diPower48VdcOk : FB_DigInput; //F4
	s_diPowerPotentialGroup24VdcOk : FB_DigInput; //EL9110
	s_diAirPressureOk : FB_DigInput;
	s_diCabinetTemperatureOk : FB_DigInput;
	
	s_doBeaconLedGreen : FB_DigOutput;
	s_doBeaconLedYellow : FB_DigOutput;
	s_doBeaconLedRed : FB_DigOutput;
	s_doSnRestartSafety : FB_DigOutput;
	
	s_FbForceOutputLedGreen : FB_ForceOutput;
	s_FbForceOutputLedYellow : FB_ForceOutput;
	s_FbForceOutputLedRed : FB_ForceOutput;
	s_FbForceOutputSnRestartSafety : FB_ForceOutput;
	
	//States
	s_bStaSafetyOk : BOOL := FALSE;
	s_bSafetyFbErr : BOOL := FALSE;
	s_bEstopInfeedOk : BOOL := FALSE;
	s_bEstopCleanroomOk : BOOL := FALSE;
	s_bDoorGuardCleanroomOk : BOOL := FALSE;
	s_bRestartSafety : BOOL := FALSE;
	s_bStsPower400VacOk : BOOL := FALSE;
	s_bStsPower230VacOk : BOOL := FALSE;
	s_bStsPower230VacSocketsOk : BOOL := FALSE;
	s_bStsPower48VdcOk : BOOL := FALSE;
	s_bStsPowerPotentialGroup24VdcOk : BOOL := FALSE;
	s_bStaAirPressureOk : BOOL := FALSE;
	s_bStaCabinetTemperatureOk : BOOL := FALSE;
	s_bRestartSafetyState : BOOL := FALSE;
	
	//s_bStaError
	s_bStaWarning : BOOL;
	s_bFlashPulse : BOOL;
	
	s_bExtError : BOOL;
	s_bExtWarning : BOOL;
	s_bExtRunning : BOOL;
	
	//Alarms
	s_fbAlarmHandlerSafetyCrc : FB_AlarmHandler;
	s_fbAlarmHandlerSafetyNotOk : FB_AlarmHandler;
	s_fbAlarmHandlerSafetyFbErr : FB_AlarmHandler;
	s_fbAlarmHandlerEstopInfeedPressed : FB_AlarmHandler;
	s_fbAlarmHandlerEstopCleanroomPressed : FB_AlarmHandler;
	s_fbAlarmHandlerDoorGuardCleanroomOpened : FB_AlarmHandler;
	s_fbAlarmHandlerPower400VacNotOk : FB_AlarmHandler;
	s_fbAlarmHandlerPower230VacNotOk : FB_AlarmHandler;
	s_fbAlarmHandlerPower230VacSocketsNotOk : FB_AlarmHandler;
	s_fbAlarmHandlerPower48VdcNotOk : FB_AlarmHandler;
	s_fbAlarmHandlerPowerPotentialGroup24VdcNotOk : FB_AlarmHandler;
	s_fbAlarmHandlerAirPressureNotOk : FB_AlarmHandler;
	s_fbAlarmHandlerCabinetTemperatureNotOk : FB_AlarmHandler;
	
	s_bErrSafetyNotOk : BOOL;
	s_bErrSafetyFbErr : BOOL;
	s_bErrEstopInfeedPressed : BOOL;
	s_bErrEstopCleanroomPressed : BOOL;
	s_bErrDoorGuardCleanroomOpened : BOOL;
	s_bErrPower400VacOk : BOOL;
	s_bErrPower230VacOk : BOOL;
	s_bWrnPower230VacSocketsOk : BOOL;
	s_bErrPower48VdcOk : BOOL;
	s_bErrPowerPotentialGroup24VdcOk : BOOL;
	s_bErrAirPressureNotOk : BOOL;
	s_bErrCabinetTemperatureNotOk : BOOL;
	
	//Hmi
	s_fbHmiLedSafetyOk : FB_HmiLed;
	s_fbHmiLedSafetyFbErr : FB_HmiLed;
	s_fbHmiLedEstopInfeedOk : FB_HmiLed;
	s_fbHmiLedEstopCleanroomOk : FB_HmiLed;
	s_fbHmiLedDoorGuardOk : FB_HmiLed;
	s_fbHmiLedRestartSafety : FB_HmiLed;
	s_fbHmiLedPower400VacOk : FB_HmiLed;
	s_fbHmiLedPower230VacOk : FB_HmiLed;
	s_fbHmiLedPower230VacSocketsOk : FB_HmiLed;
	s_fbHmiLedPower48VdcOk : FB_HmiLed;
	s_fbHmiLedPowerPotentialGroup24VdcOk : FB_HmiLed;
	
	s_fbHmiLedAirPressureOk : FB_HmiLed;
	s_fbHmiLedCabinetTemperatureOk : FB_HmiLed;
	
	s_fbHmiLedBeaconGreen : FB_HmiLed;
	s_fbHmiLedBeaconYellow : FB_HmiLed;
	s_fbHmiLedBeaconRed : FB_HmiLed;
	
	//Interface with TwinSAFE
	Q_bCmdRun AT %Q* : BOOL; //Set TwinSAFE to Run-Mode	
	Q_bCmdErrAck AT %Q* : BOOL; //Reset errors in TwinSAFE logic
	Q_bCmdRestartSafety AT %Q* : BOOL; //Restart/reset safety blocks (reset Estop-safety-relay)
	
	I_bStaTwinSAFE_Estop1ChA AT %I* : BOOL;
	I_bStaTwinSAFE_Estop1ChB AT %I* : BOOL;
	I_bStaTwinSAFE_Estop2ChA AT %I* : BOOL;
	I_bStaTwinSAFE_Estop2ChB AT %I* : BOOL;
	I_bStaTwinSAFE_FbPalletConveyorSTO AT %I* : BOOL;
	I_bStaTwinSAFE_FbPotGrpValvesOFF AT %I* : BOOL;
//??	I_bStaTwinSAFE_FbTransportUnitSTO AT %I* : BOOL;
	I_bStaTwinSAFE_DoorGuardCleanroomChA AT %I* : BOOL;
	I_bStaTwinSAFE_DoorGuardCleanroomChB AT %I* : BOOL;
	
	I_nTwinSATE_ProjectCrc AT %I* : WORD; //Cyclic Redundancy Check (check if TwinSAFE code is still the same)
	s_nVerified_Crc : WORD := 16#0000;
	
	s_bHmiForceOutputEnabled : BOOL;
END_VAR

VAR_INPUT
	i_bFlashPulse : BOOL;
	i_eCtrlState : E_CtrlState;
END_VAR

VAR_OUTPUT
	q_bStaWarning : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Folder Name="Base" Id="{51a251f3-18e3-4027-86be-bdb2be30b25f}" />
    <Method Name="_m_Alarms" Id="{91068a31-fcc6-4281-af61-d7a6e7120f8c}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

//Set error bits
s_bErrSafetyNotOk S= NOT(s_bStaSafetyOk);
s_bErrSafetyFbErr S= s_bSafetyFbErr;
s_bErrEstopInfeedPressed S= NOT(s_bEstopInfeedOk);
s_bErrEstopCleanroomPressed S= NOT(s_bEstopCleanroomOk);
s_bErrDoorGuardCleanroomOpened S= NOT(s_bDoorGuardCleanroomOk);
s_bErrPower400VacOk S= NOT(s_bStsPower400VacOk);
s_bErrPower230VacOk S= NOT(s_bStsPower230VacOk);
s_bWrnPower230VacSocketsOk S= NOT(s_bStsPower230VacSocketsOk);
s_bErrPower48VdcOk S= NOT(s_bStsPower48VdcOk);
s_bErrPowerPotentialGroup24VdcOk S= NOT(s_bStsPowerPotentialGroup24VdcOk);
s_bErrAirPressureNotOk S= NOT(s_bStaAirPressureOk);
s_bErrCabinetTemperatureNotOk S= NOT(s_bStaCabinetTemperatureOk);

//Alarm Handlers ( config --> init() )
s_fbAlarmHandlerSafetyCrc(i_bStaActive := (I_nTwinSATE_ProjectCrc <> s_nVerified_Crc));
s_fbAlarmHandlerSafetyNotOk(i_bStaActive := s_bErrSafetyNotOk);
s_fbAlarmHandlerSafetyFbErr(i_bStaActive := s_bErrSafetyFbErr);
s_fbAlarmHandlerEstopInfeedPressed(i_bStaActive := s_bErrEstopInfeedPressed);
s_fbAlarmHandlerEstopCleanroomPressed(i_bStaActive := s_bErrEstopCleanroomPressed);
s_fbAlarmHandlerDoorGuardCleanroomOpened(i_bStaActive := s_bErrDoorGuardCleanroomOpened);
s_fbAlarmHandlerPower400VacNotOk(i_bStaActive := s_bErrPower400VacOk);
s_fbAlarmHandlerPower230VacNotOk(i_bStaActive := s_bErrPower230VacOk);
s_fbAlarmHandlerPower230VacSocketsNotOk(i_bStaActive := s_bWrnPower230VacSocketsOk);
s_fbAlarmHandlerPower48VdcNotOk(i_bStaActive := s_bErrPower48VdcOk);
s_fbAlarmHandlerPowerPotentialGroup24VdcNotOk(i_bStaActive := s_bErrPowerPotentialGroup24VdcOk);
s_fbAlarmHandlerAirPressureNotOk(i_bStaActive := s_bErrAirPressureNotOk);
s_fbAlarmHandlerCabinetTemperatureNotOk(i_bStaActive := s_bErrCabinetTemperatureNotOk);

//Reset Errors
s_bErrSafetyNotOk R= i_bCmdReset AND s_bStaSafetyOk;
s_bErrSafetyFbErr R= i_bCmdReset AND NOT(s_bSafetyFbErr);
s_bErrEstopInfeedPressed R= i_bCmdReset AND s_bEstopInfeedOk;
s_bErrEstopCleanroomPressed R= i_bCmdReset AND s_bEstopCleanroomOk;
s_bErrDoorGuardCleanroomOpened R= i_bCmdReset AND s_bDoorGuardCleanroomOk;
s_bErrPower400VacOk R= i_bCmdReset AND s_bStsPower400VacOk;
s_bErrPower230VacOk R= i_bCmdReset AND s_bStsPower230VacOk;
s_bWrnPower230VacSocketsOk R= i_bCmdReset AND s_bStsPower230VacSocketsOk;
s_bErrPower48VdcOk R= i_bCmdReset AND s_bStsPower48VdcOk;
s_bErrPowerPotentialGroup24VdcOk R= i_bCmdReset AND s_bStsPowerPotentialGroup24VdcOk;

s_bErrAirPressureNotOk R= i_bCmdReset AND s_bStaAirPressureOk;

s_bErrCabinetTemperatureNotOk R= i_bCmdReset AND s_bStaCabinetTemperatureOk;

s_bStaError :=
 	s_fbAlarmHandlerSafetyCrc.q_bStaActive
	OR s_fbAlarmHandlerSafetyNotOk.q_bStaActive
	OR s_fbAlarmHandlerSafetyFbErr.q_bStaActive
	OR s_fbAlarmHandlerEstopInfeedPressed.q_bStaActive
	OR s_fbAlarmHandlerEstopCleanroomPressed.q_bStaActive
	OR s_fbAlarmHandlerPower400VacNotOk.q_bStaActive
	OR s_fbAlarmHandlerPower230VacNotOk.q_bStaActive
	OR s_fbAlarmHandlerPower230VacSocketsNotOk.q_bStaActive
	OR s_fbAlarmHandlerPower48VdcNotOk.q_bStaActive
	OR s_fbAlarmHandlerPowerPotentialGroup24VdcNotOk.q_bStaActive
	OR s_fbAlarmHandlerAirPressureNotOk.q_bStaActive
	OR s_fbAlarmHandlerCabinetTemperatureNotOk.q_bStaActive;
	
s_bStaWarning :=
	s_fbAlarmHandlerDoorGuardCleanroomOpened.q_bStaActive;
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{97b8a94d-21c8-46ff-ac2c-0f330eabe3be}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

//Control module
s_diSafetyOk();
s_diSafetyFbErr();
s_diRestartSafety();
s_diPower400VacOk();
s_diPower230VacOk();
s_diPower230VacSocketsOk();
s_diPower48VdcOk();
s_diPowerPotentialGroup24VdcOk();
s_diAirPressureOk();
s_diCabinetTemperatureOk();

s_doBeaconLedGreen();
s_doBeaconLedYellow();
s_doBeaconLedRed();
s_doSnRestartSafety();

IF NOT(s_bStaSafetyOk) THEN
	IF s_bSafetyFbErr THEN
		s_bRestartSafetyState := s_bFlashPulse;
	ELSE
		s_bRestartSafetyState := TRUE;
	END_IF
ELSE
	s_bRestartSafetyState := FALSE;
END_IF

//TwinSAFE --> PLC
//<none>

//PLC --> TwinSAFE
Q_bCmdRun := i_bReqEnable;
Q_bCmdErrAck := i_bCmdReset;
Q_bCmdRestartSafety := s_bRestartSafety;

_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{97417a1d-1af2-4f07-b43b-e4325d410b41}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
//<none>

//Hmi Leds
s_fbHmiLedSafetyOk(i_bStaLed := s_bStaSafetyOk);
s_fbHmiLedSafetyFbErr(i_bStaLed := s_bSafetyFbErr);
s_fbHmiLedEstopInfeedOk(i_bStaLed := s_bEstopInfeedOk);
s_fbHmiLedEstopCleanroomOk(i_bStaLed := s_bEstopCleanroomOk);
s_fbHmiLedDoorGuardOk(i_bStaLed := s_bDoorGuardCleanroomOk);
s_fbHmiLedRestartSafety(i_bStaLed := s_bRestartSafetyState);
s_fbHmiLedPower400VacOk(i_bStaLed := s_bStsPower400VacOk);
s_fbHmiLedPower230VacOk(i_bStaLed := s_bStsPower230VacOk);
s_fbHmiLedPower230VacSocketsOk(i_bStaLed := s_bStsPower230VacSocketsOk);
s_fbHmiLedPower48VdcOk(i_bStaLed := s_bStsPower48VdcOk);
s_fbHmiLedPowerPotentialGroup24VdcOk(i_bStaLed := s_bStsPowerPotentialGroup24VdcOk);
s_fbHmiLedAirPressureOk(i_bStaLed := s_bStaAirPressureOk);
s_fbHmiLedCabinetTemperatureOk(i_bStaLed := s_bStaCabinetTemperatureOk);

s_fbHmiLedBeaconGreen(i_bStaLed := s_bExtRunning);
s_fbHmiLedBeaconYellow(i_bStaLed := s_bExtWarning);
s_fbHmiLedBeaconRed(i_bStaLed := s_bExtError);

_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{7f1871a0-83c4-4557-ac15-5a15f84be50f}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Safety config
s_nVerified_Crc := 16#0000;

//Control Modules
s_diSafetyOk.i_stSettings.tmInputDelay := T#1S;
s_diSafetyFbErr.i_stSettings.tmInputDelay := T#1S;
s_diRestartSafety.i_stSettings.tmInputDelay := T#0S;
s_diPower400VacOk.i_stSettings.tmInputDelay := T#1S;
s_diPower230VacOk.i_stSettings.tmInputDelay := T#1S;
s_diPower230VacSocketsOk.i_stSettings.tmInputDelay := T#1S;
s_diPower48VdcOk.i_stSettings.tmInputDelay := T#1S;
s_diPowerPotentialGroup24VdcOk.i_stSettings.tmInputDelay := T#1S;
s_diAirPressureOk.i_stSettings.tmInputDelay := T#1S;
s_diCabinetTemperatureOk.i_stSettings.tmInputDelay := T#600S;

s_doBeaconLedGreen.i_stSettings.bCfgDelay := FALSE;
s_doBeaconLedGreen.i_stSettings.tmOutputDelay := T#0S;
s_doBeaconLedYellow.i_stSettings.bCfgDelay := FALSE;
s_doBeaconLedYellow.i_stSettings.tmOutputDelay := T#0S;
s_doBeaconLedRed.i_stSettings.bCfgDelay := FALSE;
s_doBeaconLedRed.i_stSettings.tmOutputDelay := T#0S;
s_doSnRestartSafety.i_stSettings.bCfgDelay := FALSE;
s_doSnRestartSafety.i_stSettings.tmOutputDelay := T#0S;

//Alarm config
s_fbAlarmHandlerSafetyCrc.i_sAlarmText := CONCAT(i_sEmName, ' - TwinSAFE Crc not equal to verified');
s_fbAlarmHandlerSafetyCrc.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerSafetyNotOk.i_sAlarmText := CONCAT(i_sEmName, ' - Safety not OK');
s_fbAlarmHandlerSafetyNotOk.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerSafetyFbErr.i_sAlarmText := CONCAT(i_sEmName, ' - Safety Fb error (ssytem error), twinSAFE configuration for details');
s_fbAlarmHandlerSafetyFbErr.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerEstopInfeedPressed.i_sAlarmText := CONCAT(i_sEmName, ' - Emergency stop button infeed not OK');
s_fbAlarmHandlerEstopInfeedPressed.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerEstopCleanroomPressed.i_sAlarmText := CONCAT(i_sEmName, ' - Emergency stop button cleanroom not OK');
s_fbAlarmHandlerEstopCleanroomPressed.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerDoorGuardCleanroomOpened.i_sAlarmText := CONCAT(i_sEmName, ' - Door guard cleanroom not OK');
s_fbAlarmHandlerDoorGuardCleanroomOpened.i_eAlarmLevel := E_AlarmLevel.Warning;

s_fbAlarmHandlerPower400VacNotOk.i_sAlarmText := CONCAT(i_sEmName, ' - Power supply 400Vac not OK');
s_fbAlarmHandlerPower400VacNotOk.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerPower230VacNotOk.i_sAlarmText := CONCAT(i_sEmName, ' - Power supply 230Vac not OK');
s_fbAlarmHandlerPower230VacNotOk.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerPower230VacSocketsNotOk.i_sAlarmText := CONCAT(i_sEmName, ' - Power supply 230Vac sockets not OK');
s_fbAlarmHandlerPower230VacSocketsNotOk.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerPower48VdcNotOk.i_sAlarmText := CONCAT(i_sEmName, ' - Power supply 48Vdc not OK');
s_fbAlarmHandlerPower48VdcNotOk.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerPowerPotentialGroup24VdcNotOk.i_sAlarmText := CONCAT(i_sEmName, ' - Power potential group 24Vdc not OK');
s_fbAlarmHandlerPowerPotentialGroup24VdcNotOk.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerAirPressureNotOk.i_sAlarmText := CONCAT(i_sEmName, ' - Air pressure not OK');
s_fbAlarmHandlerAirPressureNotOk.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerCabinetTemperatureNotOk.i_sAlarmText := CONCAT(i_sEmName, ' - Cabinet temperature not OK');
s_fbAlarmHandlerCabinetTemperatureNotOk.i_eAlarmLevel := E_AlarmLevel.Alarm;

//Hmi
s_fbHmiLedSafetyOk.p_bStaVisible := FALSE;
s_fbHmiLedSafetyOk.p_sToHmiDescriptionLed := 'Safety Ok';

s_fbHmiLedEstopInfeedOk.p_bStaVisible := FALSE;
s_fbHmiLedEstopInfeedOk.p_sToHmiDescriptionLed := 'Emergency stop button Infeed OK';

s_fbHmiLedEstopCleanroomOk.p_bStaVisible := FALSE;
s_fbHmiLedEstopCleanroomOk.p_sToHmiDescriptionLed := 'Emergency stop button Cleanroom OK';

s_fbHmiLedDoorGuardOk.p_bStaVisible := FALSE;
s_fbHmiLedDoorGuardOk.p_sToHmiDescriptionLed := 'Door Guard Cleanroom OK';

s_fbHmiLedRestartSafety.p_bStaVisible := FALSE;
s_fbHmiLedRestartSafety.p_sToHmiDescriptionLed := 'Restart Safety';

s_fbHmiLedSafetyFbErr.p_bStaVisible := FALSE;
s_fbHmiLedSafetyFbErr.p_sToHmiDescriptionLed := 'Safety FB error';

s_fbHmiLedPower400VacOk.p_bStaVisible := FALSE;
s_fbHmiLedPower400VacOk.p_sToHmiDescriptionLed := 'Power 400Vac Ok';

s_fbHmiLedPower230VacOk.p_bStaVisible := FALSE;
s_fbHmiLedPower230VacOk.p_sToHmiDescriptionLed := 'Power 230Vac Ok';

s_fbHmiLedPower230VacSocketsOk.p_bStaVisible := FALSE;
s_fbHmiLedPower230VacSocketsOk.p_sToHmiDescriptionLed := 'Power 230Vac Service Ok';

s_fbHmiLedPower48VdcOk.p_bStaVisible := FALSE;
s_fbHmiLedPower48VdcOk.p_sToHmiDescriptionLed := 'Power 48Vdc Ok';

s_fbHmiLedPowerPotentialGroup24VdcOk.p_bStaVisible := FALSE;
s_fbHmiLedPowerPotentialGroup24VdcOk.p_sToHmiDescriptionLed := 'Power Potentialgroup Ok';

s_fbHmiLedAirPressureOk.p_bStaVisible := FALSE;
s_fbHmiLedAirPressureOk.p_sToHmiDescriptionLed := 'Air pressure Ok';

s_fbHmiLedCabinetTemperatureOk.p_bStaVisible := FALSE;
s_fbHmiLedCabinetTemperatureOk.p_sToHmiDescriptionLed := 'Cabinet temperature Ok';

s_fbHmiLedBeaconGreen.p_bStaVisible := FALSE;
s_fbHmiLedBeaconGreen.p_sToHmiDescriptionLed := 'Beacon green led';

s_fbHmiLedBeaconYellow.p_bStaVisible := FALSE;
s_fbHmiLedBeaconYellow.p_sToHmiDescriptionLed := 'Beacon yellow led';

s_fbHmiLedBeaconRed.p_bStaVisible := FALSE;
s_fbHmiLedBeaconRed.p_sToHmiDescriptionLed := 'Beacon red led';

_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{458358e5-23ba-4231-abac-3325a6a209a2}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

s_bFlashPulse := i_bFlashPulse;
s_bStaSafetyOk := s_diSafetyOk.p_bStaInputDelayed AND s_diSafetyOk.p_bStaInput; //on-delay only
s_bSafetyFbErr := s_diSafetyFbErr.p_bStaInput;
s_bEstopInfeedOk := I_bStaTwinSAFE_Estop1ChA AND I_bStaTwinSAFE_Estop1ChB;
s_bEstopCleanroomOk := I_bStaTwinSAFE_Estop2ChA AND I_bStaTwinSAFE_Estop2ChB;
s_bDoorGuardCleanroomOk := I_bStaTwinSAFE_DoorGuardCleanroomChA AND I_bStaTwinSAFE_DoorGuardCleanroomChB;
s_bRestartSafety := s_diRestartSafety.p_bStaInput;
s_bStsPower400VacOk := s_diPower400VacOk.p_bStaInputDelayed AND s_diPower400VacOk.p_bStaInput; //on-delay only
s_bStsPower230VacOk := s_diPower230VacOk.p_bStaInputDelayed AND s_diPower230VacOk.p_bStaInput; //on-delay only
s_bStsPower230VacSocketsOk := s_diPower230VacSocketsOk.p_bStaInputDelayed AND s_diPower230VacSocketsOk.p_bStaInput; //on-delay only
s_bStsPower48VdcOk := s_diPower48VdcOk.p_bStaInputDelayed AND s_diPower48VdcOk.p_bStaInput; //on-delay only
s_bStsPowerPotentialGroup24VdcOk := s_diPowerPotentialGroup24VdcOk.p_bStaInputDelayed AND s_diPowerPotentialGroup24VdcOk.p_bStaInput; //on-delay only
s_bStaAirPressureOk := s_diAirPressureOk.p_bStaInputDelayed AND s_diAirPressureOk.p_bStaInput; //on-delay only
s_bStaCabinetTemperatureOk := s_diCabinetTemperatureOk.p_bStaInputDelayed OR s_diCabinetTemperatureOk.p_bStaInput; //off-delay only

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{535a3bcf-7515-4ea2-9150-50d7560b683c}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

//Reset to released if IO-Test Running is not active anymore
IF (i_eCtrlMode <> E_CtrlMode.IO) OR (i_eCtrlState <> E_CtrlState.RUNNING) THEN
	s_FbForceOutputLedGreen.i_eForceValue := E_ForceValue.RELEASED;
END_IF

IF (i_eCtrlMode <> E_CtrlMode.IO) OR (i_eCtrlState <> E_CtrlState.RUNNING) THEN
	s_FbForceOutputLedYellow.i_eForceValue := E_ForceValue.RELEASED;
END_IF

IF (i_eCtrlMode <> E_CtrlMode.IO) OR (i_eCtrlState <> E_CtrlState.RUNNING) THEN
	s_FbForceOutputLedRed.i_eForceValue := E_ForceValue.RELEASED;
END_IF

IF (i_eCtrlMode <> E_CtrlMode.IO) OR (i_eCtrlState <> E_CtrlState.RUNNING) THEN
	s_FbForceOutputSnRestartSafety.i_eForceValue := E_ForceValue.RELEASED;
END_IF

//Force outputs
IF s_FbForceOutputLedGreen.i_eForceValue = E_ForceValue.RELEASED THEN
	s_doBeaconLedGreen.i_bStaOutput := s_bExtRunning;
ELSE
	s_doBeaconLedGreen.i_bStaOutput := s_FbForceOutputLedGreen.i_eForceValue = E_ForceValue.FORCE_ON;
END_IF

IF s_FbForceOutputLedYellow.i_eForceValue = E_ForceValue.RELEASED THEN
	s_doBeaconLedYellow.i_bStaOutput := s_bExtWarning;
ELSE
	s_doBeaconLedYellow.i_bStaOutput := s_FbForceOutputLedYellow.i_eForceValue = E_ForceValue.FORCE_ON;
END_IF

IF s_FbForceOutputLedRed.i_eForceValue = E_ForceValue.RELEASED THEN
	s_doBeaconLedRed.i_bStaOutput := s_bExtError;
ELSE
	s_doBeaconLedRed.i_bStaOutput := s_FbForceOutputLedRed.i_eForceValue = E_ForceValue.FORCE_ON;
END_IF

IF s_FbForceOutputSnRestartSafety.i_eForceValue = E_ForceValue.RELEASED THEN
	s_doSnRestartSafety.i_bStaOutput := s_bRestartSafetyState;
ELSE
	s_doSnRestartSafety.i_bStaOutput := s_FbForceOutputSnRestartSafety.i_eForceValue = E_ForceValue.FORCE_ON;
END_IF

q_bStaWarning := s_bStaWarning;

_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_GetGeneralState" Id="{c779e9cb-e8a4-4825-ad08-77e95827b039}">
      <Declaration><![CDATA[METHOD PUBLIC m_GetGeneralState : BOOL
VAR_INPUT
	i_bError : BOOL;
	i_bWarning : BOOL;
	i_bRunning : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_bExtError := i_bError;
s_bExtWarning := i_bWarning;
s_bExtRunning := i_bRunning;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{6ee57644-97c7-4cd8-ab66-2c7443d8efae}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

CASE i_eCtrlMode OF
	E_CtrlMode.IDLE:
		;//Nothing
		
	E_CtrlMode.AUTOMATIC:
		//Execute automatic control (based on request from higher-layer unit)
		;//Nothing
		
	E_CtrlMode.MANUAL:
		//Execute manaual control (based on HMI buttons)
		;//Nothing
		
	E_CtrlMode.MAINTENANCE:
		//Execute maintenance control (HMI control module buttons)
		;//Nothing
	
	E_CtrlMode.IO:
		//Execute IO-test control (HMI output force control)
		; 	//IO-Test control is implemented in lower-layer control modules
		
	E_CtrlMode.CLEANING:
		//Execute cleaning control (cleaning  specific functionalities)
		;	//Cleaning control is not implemented, this could be a done in the future if neccesary
END_CASE

//AUTOMATIC-mode///////////////////////////////////////////////////////////////////////////////////
//..

//MANUAL-mode//////////////////////////////////////////////////////////////////////////////////////
//..

//MAINTENANCE-mode/////////////////////////////////////////////////////////////////////////////////
//..

//IO-mode//////////////////////////////////////////////////////////////////////////////////////////
IF (i_eCtrlMode = E_CtrlMode.IO) AND (i_eCtrlState = E_CtrlState.RUNNING) THEN
	s_bHmiForceOutputEnabled := TRUE;
ELSE
	s_bHmiForceOutputEnabled := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bStaAirPressureOk" Id="{0af5c43c-8953-4fa1-af7f-5b3f4e44e13a}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaAirPressureOk : BOOL]]></Declaration>
      <Get Name="Get" Id="{4dede668-7bed-49aa-adc6-f4d7ad59be53}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaAirPressureOk := s_bStaAirPressureOk;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaCabinetTemperatureOk" Id="{80fd165e-a940-4d5d-899f-027c185da331}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaCabinetTemperatureOk : BOOL]]></Declaration>
      <Get Name="Get" Id="{4d1c5c46-3465-46a4-9268-9816d243c519}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaCabinetTemperatureOk := s_bStaCabinetTemperatureOk;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaSafetyOk" Id="{7ea03187-b7ec-46c2-a694-807e2d1d70bb}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaSafetyOk : BOOL]]></Declaration>
      <Get Name="Get" Id="{7f5e3440-eaae-47cd-8f92-6961cd1007ef}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaSafetyOk := s_bStaSafetyOk;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStsPowerOk" Id="{4313e908-4780-46b5-aee4-16ddce14fbff}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStsPowerOk : BOOL]]></Declaration>
      <Get Name="Get" Id="{b2a078c1-b0bd-4ba8-8232-d29d32a14d28}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStsPowerOk :=
	s_bStsPower400VacOk
	AND s_bStsPower230VacOk
	AND s_bStsPower230VacSocketsOk
	AND s_bStsPowerPotentialGroup24VdcOk;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>