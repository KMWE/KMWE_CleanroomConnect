<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_DockingInterface" Id="{1a98308c-f0e0-4a53-963d-dfa6a727e4cb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_DockingInterface EXTENDS EM_Base IMPLEMENTS I_EM_DockingInterface

VAR_INPUT
	i_ref_stSettings : REFERENCE TO ST_SettingsDockingInterface;
	i_eCtrlState : E_CtrlState;
	
	{warning '#FUMO3: Option can be deleted when cabin doors are commisioned'}
	i_bTestDisableCabinDoors : BOOL;
	i_bStaTbAtDockingPosition : BOOL;
	i_bStaDockingPositionFree : BOOL;
	
	//External interlocks (from outside this EM)
	{warning '#TODO: Delete unused (not written external) inputs'}
	i_stExtIlckDockingClampsToClose : ST_Interlock;
	i_stExtIlckDockingClampsToOpen : ST_Interlock;
	i_stExtIlckUnlockingPinsToLock : ST_Interlock;		//-- NOT_USED
	i_stExtIlckUnlockingPinsToRelease : ST_Interlock;	//-- NOT_USED
	i_stExtIlckDoorOpenerToClose : ST_Interlock;
	i_stExtIlckDoorOpenerToOpen : ST_Interlock;
	i_stExtIlckDoorShutterToClose : ST_Interlock;
	i_stExtIlckDoorShutterToOpen : ST_Interlock;
	i_stExtIlckOuterCabinDoorToClose : ST_Interlock;
	i_stExtIlckOuterCabinDoorToOpen : ST_Interlock;		//-- NOT_USED
	i_stExtIlckInnerCabinDoorToClose : ST_Interlock;
	i_stExtIlckInnerCabinDoorToOpen : ST_Interlock;		//-- NOT_USED
END_VAR

VAR_OUTPUT
	q_bStaWarning : BOOL;
END_VAR

VAR
	//Control Modules
	s_cmDockingClampsUpper : CM_ValveWithDoubleFB; //Off = Open, On = Close
	s_cmDockingClampsLower : CM_ValveWithDoubleFB; //Off = Open, On = Close
	s_cmClampsUpperHighPressure : CM_DigOutput; //Off = Low, On = High
	s_cmClampsLowerHighPressure : CM_DigOutput; //Off = Low, On = High
	s_cmUnlockingPinUpper : CM_ValveWithFB; //Off = Lock, On = Release
	s_cmUnlockingPinLower : CM_ValveWithFB; //Off = Lock, On = Release
	s_cmDoorOpener : CM_ValveWithFB; //Off = Close, On = Open
	s_cmDoorShutter : CM_ValveWithFB; //Off = Open, On = Close
	s_cmOuterCabinDoor : CM_SpeedDoor;
	s_cmInnerCabinDoor : CM_SpeedDoor;
	
	//Inputs
	s_diStaDoorAlmostClosed : FB_DigInput;
	
	//Outputs
	//none
	
	//Interlocks
	s_fbIlckHandlerClampsUpperPressureLow : FB_InterlockHandler;
	s_fbIlckHandlerClampsUpperPressureHigh : FB_InterlockHandler;
	s_fbIlckHandlerClampsLowerPressureLow : FB_InterlockHandler;
	s_fbIlckHandlerClampsLowerPressureHigh : FB_InterlockHandler;
	s_fbIlckHandlerDockingClampsClose : FB_InterlockHandler;
	s_fbIlckHandlerDockingClampsOpen : FB_InterlockHandler;
	s_fbIlckHandlerUnlockingPinsLock : FB_InterlockHandler;
	s_fbIlckHandlerUnlockingPinsRelease : FB_InterlockHandler;
	s_fbIlckHandlerDoorOpenerClose : FB_InterlockHandler;
	s_fbIlckHandlerDoorOpenerOpen : FB_InterlockHandler;
	s_fbIlckHandlerDoorShutterClose : FB_InterlockHandler;
	s_fbIlckHandlerDoorShutterOpen : FB_InterlockHandler;
	s_fbIlckHandlerOuterCabinDoorOpen : FB_InterlockHandler;
	s_fbIlckHandlerOuterCabinDoorClose : FB_InterlockHandler;
	s_fbIlckHandlerInnerCabinDoorOpen : FB_InterlockHandler;
	s_fbIlckHandlerInnerCabinDoorClose : FB_InterlockHandler;
	
	s_bIlckDockingClampsUpperPressureLow : BOOL;
	s_bIlckDockingClampsUpperPressureHigh : BOOL;
	s_bIlckDockingClampsLowerPressureLow : BOOL;
	s_bIlckDockingClampsLowerPressureHigh : BOOL;
	s_bIlckDockingClampsToClose : BOOL;
	s_bIlckDockingClampsToOpen : BOOL;
	s_bIlckUnlockingPinsToLock : BOOL;
	s_bIlckUnlockingPinsToRelease : BOOL;
	s_bIlckDoorOpenerToClose : BOOL;
	s_bIlckDoorOpenerToOpen : BOOL;
	s_bIlckDoorShutterToClose : BOOL;
	s_bIlckDoorShutterToOpen : BOOL;
	s_bIlckOuterCabinDoorToClose : BOOL;
	s_bIlckOuterCabinDoorToOpen : BOOL;
	s_bIlckInnerCabinDoorToClose : BOOL;
	s_bIlckInnerCabinDoorToOpen : BOOL;
	
	//Requests
	s_bReqDockTB : BOOL;
	s_bReqUndockTB : BOOL;
	s_bReqOpenInnerDoor : BOOL;
	s_bReqCloseInnerDoor : BOOL;
	
	s_bOverruleInterlocks : BOOL;
	
	//States
	s_bStaDockingClampsUpperHighPressure : BOOL;
	s_bStaDockingClampsLowerHighPressure : BOOL;
	s_bStaDockingClampsUpperClosed : BOOL;
	s_bStaDockingClampsUpperOpened : BOOL;
	s_bStaDockingClampsLowerClosed : BOOL;
	s_bStaDockingClampsLowerOpened : BOOL;
	s_bStaLockingPinUpperReleased : BOOL;
	s_bStaLockingPinUpperLocked : BOOL;
	s_bStaLockingPinLowerReleased : BOOL;
	s_bStaLockingPinLowerLocked : BOOL;
	s_bStaDoorOpenerOpened : BOOL;
	s_bStaDoorOpenerClosed : BOOL;
	s_bStaDoorOpenerAlmostClosed : BOOL;
	s_bStaDoorShutterOpened : BOOL;
	s_bStaDoorShutterClosed : BOOL;
	s_bStaOuterCabinDoorOpened : BOOL;
	s_bStaOuterCabinDoorClosed : BOOL;
	s_bStaInnerCabinDoorOpened : BOOL;
	s_bStaInnerCabinDoorClosed : BOOL;
	s_bStaTbAtDockingPosition : BOOL;
	s_bStaDockingPositionFree : BOOL;
	s_bStaUndockingDone : BOOL;
	
	//Properties
	s_bStaDocked : BOOL;
	s_bStaUndocked : BOOL;
	s_bStaHighPressureSelected : BOOL;
	s_bStaDockingClampsClosed : BOOL;
	s_bStaDockingClampsOpened : BOOL;
	s_bStaUnlockingPinsLocked : BOOL;
	s_bStaUnlockingPinsReleased : BOOL;
	s_bStaBoxAtPreDockingPosition : BOOL;
	s_bStaBoxAtDockedPosition : BOOL;
	s_bStaInnerDoorClosedAndLocked : BOOL;
	s_bStaInnerDoorOpenedAndReleased : BOOL;
	s_bStsReadyToReceiveTB : BOOL;
	s_bStsReadyToSendTB : BOOL;
	
	//Alarms
	s_sReason : STRING(GVL.g_nMAX_LEN_REASON);
	
	s_fbAlarmHandlerClosingDoorFailed : FB_AlarmHandler;
	s_fbAlarmHandlerCmdNotAllowed : FB_AlarmHandler;
	
	s_bErrClosingDoorFailed : BOOL;
	s_bErrCmdNotAllowed : BOOL;
	
	//Warnings
	s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition : FB_AlarmHandler;
	s_fbAlarmHandlerNoBoxPresentAtDockedPosition : FB_AlarmHandler;
	
	s_bWrnNoBoxPresentAtPreDockingPosition : BOOL;
	s_bWrnNoBoxPresentAtDockedPosition : BOOL;
	
	s_bStaWarning : BOOL;
	
	//Params
	s_fbParamOpenClampsAfterClosingTimeout : FB_HmiParamHandler;
	s_fbParamCloseClampsAfterEachOther : FB_HmiParamHandler;
	s_fbParamCompressSealDuration : FB_HmiParamHandler;
	
	//Variables
	//none
	
	//Sequencers
	s_eSequence : E_SeqDockingInterface;
	s_fbSeqControl : FB_SeqControl;
	
	s_ePreviousStep : E_SeqDockingInterface;
	s_eResumeStep : E_SeqDockingInterface;
	s_sResumeStep : STRING(GVL.g_nMAX_LEN_STEP_NAME);
	s_sLastStepPersistent : STRING(GVL.g_nMAX_LEN_STEP_NAME);
	
	s_tonTimer : TON;
	
	//Hmi
	//Buttons for MANUAL-mode
	s_fbHmiBtnDockTB : FB_HmiBtn;
	s_fbHmiBtnUndockTB : FB_HmiBtn;
	s_fbHmiBtnOpenInnerDoor : FB_HmiBtn;
	s_fbHmiBtnCloseInnerDoor : FB_HmiBtn;
	
	//Leds
	s_fbHmiLedDockTbDone : FB_HmiLed;
	s_fbHmiLedUndockTbDone : FB_HmiLed;
	s_fbHmiLedOpenInnerDoorDone : FB_HmiLed;
	s_fbHmiLedCloseInnerDoorDone : FB_HmiLed;
	s_fbHmiLedClampsUpperPressureSelect : FB_HmiLed;
	s_fbHmiLedClampsLowerPressureSelect : FB_HmiLed;
	s_fbHmiLedClampsOpened : FB_HmiLed;
	s_fbHmiLedClampsClosed : FB_HmiLed;
	s_fbHmiLedPinsLocked : FB_HmiLed;
	s_fbHmiLedPinsReleased : FB_HmiLed;
	s_fbHmiLedClampsUpperOpened : FB_HmiLed;
	s_fbHmiLedClampsUpperClosed : FB_HmiLed;
	s_fbHmiLedClampsLowerOpened : FB_HmiLed;
	s_fbHmiLedClampsLowerClosed : FB_HmiLed;
	s_fbHmiLedPinUpperReleased : FB_HmiLed;
	s_fbHmiLedPinUpperLocked : FB_HmiLed;
	s_fbHmiLedPinLowerReleased : FB_HmiLed;
	s_fbHmiLedPinLowerLocked : FB_HmiLed;
	s_fbHmiLedOpenerOpened : FB_HmiLed;
	s_fbHmiLedOpenerClosed : FB_HmiLed;
	s_fbHmiLedOpenerAlmostClosed : FB_HmiLed;
	s_fbHmiLedShutterOpened : FB_HmiLed;
	s_fbHmiLedShutterClosed : FB_HmiLed;
	s_fbHmiLedOuterDoorClosed : FB_HmiLed;
	s_fbHmiLedOuterDoorOpened : FB_HmiLed;
	s_fbHmiLedInnerDoorClosed : FB_HmiLed;
	s_fbHmiLedInnerDoorOpened : FB_HmiLed;
	
	//Enable force output in IO-mode
	s_bHmiForceOutputEnabled : BOOL;
	
END_VAR

VAR PERSISTENT //Variables below will be returned during: Power Cycle, Active Configuration, Download, Cold Restart
	s_eLastStepPersistent : E_SeqDockingInterface := E_SeqDockingInterface.READY;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Folder Name="Base" Id="{07fbcd8f-5aa9-45bb-81ec-c9a513967daf}" />
    <Method Name="_m_Alarms" Id="{c0cf83f3-e704-4016-bd6f-2d30156087ff}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

//Set error bits

//Alarm Handlers
s_fbAlarmHandlerClosingDoorFailed(i_bStaActive := s_bErrClosingDoorFailed);
s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition(i_bStaActive := s_bWrnNoBoxPresentAtPreDockingPosition);
s_fbAlarmHandlerNoBoxPresentAtDockedPosition(i_bStaActive := s_bWrnNoBoxPresentAtDockedPosition);

s_fbAlarmHandlerCmdNotAllowed(
	i_bStaActive := s_bErrCmdNotAllowed,
	i_sAlarmText := CONCAT(i_sEmName, CONCAT(': ', s_sReason)));

//Reset warnings
IF i_bCmdReset THEN
	s_bWrnNoBoxPresentAtPreDockingPosition := FALSE;
	s_bWrnNoBoxPresentAtDockedPosition := FALSE;
	s_bErrClosingDoorFailed := FALSE;
	s_bErrCmdNotAllowed := FALSE;
END_IF

s_bStaError := 
	s_cmDockingClampsUpper.p_bStaError
	OR s_cmDockingClampsLower.p_bStaError
	OR s_cmUnlockingPinUpper.p_bStaError
	OR s_cmUnlockingPinLower.p_bStaError
	OR s_cmDoorOpener.p_bStaError
	OR s_cmDoorShutter.p_bStaError
	OR s_cmOuterCabinDoor.p_bStaError
	OR s_cmInnerCabinDoor.p_bStaError
	OR s_fbAlarmHandlerClosingDoorFailed.q_bStaActive
	OR s_fbAlarmHandlerCmdNotAllowed.q_bStaActive;

s_bStaWarning :=
	s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition.q_bStaActive
	OR s_fbAlarmHandlerNoBoxPresentAtDockedPosition.q_bStaActive
	OR s_cmDockingClampsUpper.p_bStaWarning
	OR s_cmDockingClampsLower.p_bStaWarning
	OR s_cmUnlockingPinUpper.p_bStaWarning
	OR s_cmUnlockingPinLower.p_bStaWarning
	OR s_cmDoorOpener.p_bStaWarning
	OR s_cmDoorShutter.p_bStaWarning
	OR s_cmOuterCabinDoor.p_bStaWarning
	OR s_cmInnerCabinDoor.p_bStaWarning;
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_CmdCloseInnerDoor" Id="{410bcb72-5351-4d55-ac55-5d0e27ce8155}">
      <Declaration><![CDATA[METHOD PROTECTED _m_CmdCloseInnerDoor : BOOL
VAR_INPUT
	i_refReason : REFERENCE TO STRING(GVL.g_nMAX_LEN_REASON);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

{warning '#TODO: Interlock is blocking to start buttons in MANUAL-Mode'}
IF s_bIlckDoorOpenerToClose AND FALSE THEN
	i_refReason := CONCAT('Cmd To Close Inner Door: Interlocked - ', s_fbIlckHandlerDoorOpenerClose.p_sReason);
	_m_CmdCloseInnerDoor := FALSE;
	s_bErrCmdNotAllowed := TRUE;
ELSE
	i_refReason := '-';
	_m_CmdCloseInnerDoor := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_CmdDockTB" Id="{8e382bf6-1d32-4474-a8a5-7c183a3c7036}">
      <Declaration><![CDATA[METHOD PROTECTED _m_CmdDockTB : BOOL
VAR_INPUT
	i_refReason : REFERENCE TO STRING(GVL.g_nMAX_LEN_REASON);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

IF s_bIlckDockingClampsToClose THEN
	i_refReason := CONCAT('Cmd To Dock: Interlocked - ', s_fbIlckHandlerDockingClampsClose.p_sReason);
	_m_CmdDockTB := FALSE;
	s_bErrCmdNotAllowed := TRUE;
ELSE
	i_refReason := '-';
	_m_CmdDockTB := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_CmdOpenInnerDoor" Id="{8be47e79-6c29-4713-b252-eb11a6bb46fb}">
      <Declaration><![CDATA[METHOD PROTECTED _m_CmdOpenInnerDoor : BOOL
VAR_INPUT
	i_refReason : REFERENCE TO STRING(GVL.g_nMAX_LEN_REASON);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

{warning '#TOOD: Interlock is blocking to start buttons in MANUAL-Mode'}
IF s_bIlckDoorShutterToOpen AND FALSE THEN
	i_refReason := CONCAT('Cmd To Open Inner Door: Interlocked - ', s_fbIlckHandlerDoorShutterOpen.p_sReason);
	_m_CmdOpenInnerDoor := FALSE;
	s_bErrCmdNotAllowed := TRUE;
ELSE
	i_refReason := '-';
	_m_CmdOpenInnerDoor := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_CmdUndockTB" Id="{b328f671-5464-49bf-836c-f1f93f3d32af}">
      <Declaration><![CDATA[METHOD PROTECTED _m_CmdUndockTB : BOOL
VAR_INPUT
	i_refReason : REFERENCE TO STRING(GVL.g_nMAX_LEN_REASON);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

IF s_bIlckDockingClampsToOpen THEN
	i_refReason := CONCAT('Cmd To UnDock: Interlocked - ', s_fbIlckHandlerDockingClampsOpen.p_sReason);
	_m_CmdUndockTB := FALSE;
	s_bErrCmdNotAllowed := TRUE;
ELSE
	i_refReason := '-';
	_m_CmdUndockTB := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{b43c077f-3abc-4642-868d-7667cd19393f}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

s_cmClampsUpperHighPressure(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := FALSE,
	i_bIclkOff := FALSE);
	
s_cmClampsLowerHighPressure(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := FALSE,
	i_bIclkOff := FALSE);
	
s_cmDockingClampsUpper(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckDockingClampsToClose AND NOT(s_bOverruleInterlocks),
	i_bIclkOff := s_bIlckDockingClampsToOpen AND NOT(s_bOverruleInterlocks));
	
s_cmDockingClampsLower(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckDockingClampsToClose AND NOT(s_bOverruleInterlocks),
	i_bIclkOff := s_bIlckDockingClampsToOpen AND NOT(s_bOverruleInterlocks));
	
s_bStaDockingClampsUpperHighPressure := s_cmClampsUpperHighPressure.p_bStaOutput;
s_bStaDockingClampsLowerHighPressure := s_cmClampsLowerHighPressure.p_bStaOutput;
s_bStaDockingClampsUpperClosed := s_cmDockingClampsUpper.p_bStaIsOn;
s_bStaDockingClampsUpperOpened := s_cmDockingClampsUpper.p_bStaIsOff;
s_bStaDockingClampsLowerClosed := s_cmDockingClampsLower.p_bStaIsOn;
s_bStaDockingClampsLowerOpened := s_cmDockingClampsLower.p_bStaIsOff;

s_bStaHighPressureSelected := s_bStaDockingClampsUpperHighPressure AND s_bStaDockingClampsLowerHighPressure;
s_bStaDockingClampsClosed := s_bStaDockingClampsUpperClosed AND s_bStaDockingClampsLowerClosed;
s_bStaDockingClampsOpened := s_bStaDockingClampsUpperOpened AND s_bStaDockingClampsLowerOpened;

s_cmUnlockingPinUpper(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckUnlockingPinsToRelease AND NOT(s_bOverruleInterlocks), 
	i_bIclkOff := s_bIlckUnlockingPinsToRelease AND NOT(s_bOverruleInterlocks));
	
s_cmUnlockingPinLower(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckUnlockingPinsToRelease AND NOT(s_bOverruleInterlocks),
	i_bIclkOff := s_bIlckUnlockingPinsToRelease AND NOT(s_bOverruleInterlocks));
	
s_bStaLockingPinUpperReleased := s_cmUnlockingPinUpper.p_bStaIsOn;
s_bStaLockingPinUpperLocked := s_cmUnlockingPinUpper.p_bStaIsOff;
s_bStaLockingPinLowerReleased := s_cmUnlockingPinLower.p_bStaIsOn;
s_bStaLockingPinLowerLocked := s_cmUnlockingPinLower.p_bStaIsOff;

s_bStaUnlockingPinsLocked := s_bStaLockingPinUpperLocked AND s_bStaLockingPinLowerLocked;
s_bStaUnlockingPinsReleased := s_bStaLockingPinUpperReleased AND s_bStaLockingPinLowerReleased;

s_cmDoorOpener(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckDoorOpenerToOpen AND NOT(s_bOverruleInterlocks),
	i_bIclkOff := s_bIlckDoorOpenerToClose AND NOT(s_bOverruleInterlocks));

s_bStaDoorOpenerOpened := s_cmDoorOpener.p_bStaIsOn;
s_bStaDoorOpenerClosed := s_cmDoorOpener.p_bStaIsOff;

s_cmDoorShutter(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckDoorShutterToClose AND NOT(s_bOverruleInterlocks),
	i_bIclkOff := s_bIlckDoorShutterToOpen AND NOT(s_bOverruleInterlocks));
	
s_bStaDoorShutterOpened := s_cmDoorShutter.p_bStaIsOff;
s_bStaDoorShutterClosed := s_cmDoorShutter.p_bStaIsOn;

s_cmOuterCabinDoor(
	i_bReqEnable := i_bReqEnable AND NOT(i_bTestDisableCabinDoors),
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOpen := s_bIlckOuterCabinDoorToOpen AND  NOT(s_bOverruleInterlocks),
	i_bIclkClose := s_bIlckOuterCabinDoorToClose AND NOT(s_bOverruleInterlocks));

s_bStaOuterCabinDoorOpened := s_cmOuterCabinDoor.p_bStaIsOpened;
s_bStaOuterCabinDoorClosed := s_cmOuterCabinDoor.p_bStaIsClosed;

s_cmInnerCabinDoor(
	i_bReqEnable := i_bReqEnable AND NOT(i_bTestDisableCabinDoors),
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOpen := s_bIlckInnerCabinDoorToOpen AND NOT(s_bOverruleInterlocks),
	i_bIclkClose := s_bIlckInnerCabinDoorToClose AND NOT(s_bOverruleInterlocks));

s_bStaInnerCabinDoorOpened := s_cmInnerCabinDoor.p_bStaIsOpened;
s_bStaInnerCabinDoorClosed := s_cmInnerCabinDoor.p_bStaIsClosed;

_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{5090ba0a-8e2b-4ba6-88b3-b451c7c7863d}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
//Manual control
s_fbHmiBtnDockTB();
s_fbHmiBtnUndockTB();
s_fbHmiBtnOpenInnerDoor();
s_fbHmiBtnCloseInnerDoor();

//Leds
s_fbHmiLedDockTbDone(i_bStaLed := s_bStaDocked);
s_fbHmiLedUndockTbDone(i_bStaLed := s_bStaUndocked);
s_fbHmiLedOpenInnerDoorDone(i_bStaLed := s_bStaInnerDoorOpenedAndReleased);
s_fbHmiLedCloseInnerDoorDone(i_bStaLed := s_bStaInnerDoorClosedAndLocked);

s_fbHmiLedClampsUpperPressureSelect(i_bStaLed := s_bStaDockingClampsUpperHighPressure);
s_fbHmiLedClampsLowerPressureSelect(i_bStaLed := s_bStaDockingClampsLowerHighPressure);

s_fbHmiLedClampsUpperOpened(i_bStaLed := s_bStaDockingClampsUpperOpened);
s_fbHmiLedClampsUpperClosed(i_bStaLed := s_bStaDockingClampsUpperClosed);

s_fbHmiLedClampsLowerOpened(i_bStaLed := s_bStaDockingClampsLowerOpened);
s_fbHmiLedClampsLowerClosed(i_bStaLed := s_bStaDockingClampsLowerClosed);

s_fbHmiLedPinUpperReleased(i_bStaLed := s_bStaLockingPinUpperReleased);
s_fbHmiLedPinUpperLocked(i_bStaLed := s_bStaLockingPinUpperLocked);

s_fbHmiLedPinLowerReleased(i_bStaLed := s_bStaLockingPinLowerReleased);
s_fbHmiLedPinLowerLocked(i_bStaLed := s_bStaLockingPinLowerLocked);

s_fbHmiLedOpenerOpened(i_bStaLed := s_bStaDoorOpenerOpened);
s_fbHmiLedOpenerClosed(i_bStaLed := s_bStaDoorOpenerClosed);
s_fbHmiLedOpenerAlmostClosed(i_bStaLed := s_bStaDoorOpenerAlmostClosed);

s_fbHmiLedShutterOpened(i_bStaLed := s_bStaDoorShutterOpened);
s_fbHmiLedShutterClosed(i_bStaLed := s_bStaDoorShutterClosed);

s_fbHmiLedOuterDoorOpened(i_bStaLed := s_bStaOuterCabinDoorOpened);
s_fbHmiLedOuterDoorClosed(i_bStaLed := s_bStaOuterCabinDoorClosed);

s_fbHmiLedInnerDoorOpened(i_bStaLed := s_bStaInnerCabinDoorOpened);
s_fbHmiLedInnerDoorClosed(i_bStaLed := s_bStaInnerCabinDoorClosed);

_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{f248bb7d-4543-4fa5-93e5-377095a1130a}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Control Modules
s_cmDockingClampsUpper.i_bReqEnable := FALSE;
s_cmDockingClampsUpper.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmDockingClampsUpper.i_sCmName := 'CM Docking Clamps Upper';
s_cmDockingClampsUpper.i_stSettings.tValveOnTimeout := T#10S;
s_cmDockingClampsUpper.i_stSettings.tValveOffTimeout := T#10S;
s_cmDockingClampsUpper.p_bCfgBiStableValve := FALSE; //5/3 monostable, closed middle position
s_cmDockingClampsUpper.p_bCfgReverseValve := FALSE;
s_cmDockingClampsUpper.p_sCfgOffName := 'Release';
s_cmDockingClampsUpper.p_sCfgOnName := 'Clamp';
s_cmDockingClampsUpper.p_sCfgFB1Name := 'Left';
s_cmDockingClampsUpper.p_sCfgFB2Name := 'Right';

s_cmClampsUpperHighPressure.i_bReqEnable := FALSE;
s_cmClampsUpperHighPressure.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmClampsUpperHighPressure.i_sCmName := 'CM Clamps Upper Pressure Select';
s_cmClampsUpperHighPressure.i_stSettings.bCfgDelay := FALSE; //3/2 monostable
s_cmClampsUpperHighPressure.i_stSettings.tmOutputDelay := T#0S;
s_cmClampsUpperHighPressure.p_bCfgReverseOutput := FALSE;
s_cmClampsUpperHighPressure.p_sCfgOffName := 'Low';
s_cmClampsUpperHighPressure.p_sCfgOnName := 'High';

s_cmDockingClampsLower.i_bReqEnable := FALSE;
s_cmDockingClampsLower.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmDockingClampsLower.i_sCmName := 'CM Docking Clamps Lower';
s_cmDockingClampsLower.i_stSettings.tValveOnTimeout := T#10S;
s_cmDockingClampsLower.i_stSettings.tValveOffTimeout := T#10S;
s_cmDockingClampsLower.p_bCfgBiStableValve := FALSE; //5/3 monostable, closed middle position
s_cmDockingClampsLower.p_bCfgReverseValve := FALSE;
s_cmDockingClampsLower.p_sCfgOffName := 'Release';
s_cmDockingClampsLower.p_sCfgOnName := 'Clamp';
s_cmDockingClampsLower.p_sCfgFB1Name := 'Left';
s_cmDockingClampsLower.p_sCfgFB2Name := 'Right';

s_cmClampsLowerHighPressure.i_bReqEnable := FALSE;
s_cmClampsLowerHighPressure.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmClampsLowerHighPressure.i_sCmName := 'CM Clamps Lower Pressure Select';
s_cmClampsLowerHighPressure.i_stSettings.bCfgDelay := FALSE; //3/2 monostable
s_cmClampsLowerHighPressure.i_stSettings.tmOutputDelay := T#0S;
s_cmClampsLowerHighPressure.p_bCfgReverseOutput := FALSE;
s_cmClampsLowerHighPressure.p_sCfgOffName := 'Low';
s_cmClampsLowerHighPressure.p_sCfgOnName := 'High';

s_cmUnlockingPinUpper.i_bReqEnable := FALSE;
s_cmUnlockingPinUpper.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmUnlockingPinUpper.i_sCmName := 'CM Unlocking Pin Upper';
s_cmUnlockingPinUpper.i_stSettings.tValveOnTimeout := T#10S;
s_cmUnlockingPinUpper.i_stSettings.tValveOffTimeout := T#10S;
s_cmUnlockingPinUpper.p_bCfgBiStableValve := FALSE; //5/2 monostable
s_cmUnlockingPinUpper.p_bCfgReverseValve := FALSE;
s_cmUnlockingPinUpper.p_sCfgOffName := 'Lock';
s_cmUnlockingPinUpper.p_sCfgOnName := 'Unlock';

s_cmUnlockingPinLower.i_bReqEnable := FALSE;
s_cmUnlockingPinLower.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmUnlockingPinLower.i_sCmName := 'CM Unlocking Pin Lower';
s_cmUnlockingPinLower.i_stSettings.tValveOnTimeout := T#10S;
s_cmUnlockingPinLower.i_stSettings.tValveOffTimeout := T#10S;
s_cmUnlockingPinLower.p_bCfgBiStableValve := FALSE; //5/2 monostable
s_cmUnlockingPinLower.p_bCfgReverseValve := FALSE;
s_cmUnlockingPinLower.p_sCfgOffName := 'Lock';
s_cmUnlockingPinLower.p_sCfgOnName := 'Unlock';

s_cmDoorOpener.i_bReqEnable := FALSE;
s_cmDoorOpener.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmDoorOpener.i_sCmName := 'CM Door Opener';
s_cmDoorOpener.i_stSettings.tValveOnTimeout := T#10S;
s_cmDoorOpener.i_stSettings.tValveOffTimeout := T#10S;
s_cmDoorOpener.p_bCfgBiStableValve := TRUE; //5/2 bistable
s_cmDoorOpener.p_bCfgReverseValve := FALSE;
s_cmDoorOpener.p_sCfgOffName := 'Close';
s_cmDoorOpener.p_sCfgOnName := 'Open';

s_diStaDoorAlmostClosed.i_stSettings.tmInputDelay := T#0S;

s_cmDoorShutter.i_bReqEnable := FALSE;
s_cmDoorShutter.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmDoorShutter.i_sCmName := 'CM Door Shutter';
s_cmDoorShutter.i_stSettings.tValveOnTimeout := T#10S;
s_cmDoorShutter.i_stSettings.tValveOffTimeout := T#10S;
s_cmDoorShutter.p_bCfgBiStableValve := TRUE; //5/2 bistable
s_cmDoorShutter.p_bCfgReverseValve := FALSE;
s_cmDoorShutter.p_sCfgOffName := 'Open';
s_cmDoorShutter.p_sCfgOnName := 'Close';

s_cmOuterCabinDoor.i_bReqEnable := FALSE;
s_cmOuterCabinDoor.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmOuterCabinDoor.i_sCmName := 'Outer Cabin Door';
s_cmOuterCabinDoor.i_stSettings.tDoorClosingTimeout := T#10S;
s_cmOuterCabinDoor.i_stSettings.tDoorOpeningTimeout := T#10S;
s_cmOuterCabinDoor.i_stSettings.tResetPulseDuration := T#1S;
s_cmOuterCabinDoor.p_sCfgOpenName := 'Open';
s_cmOuterCabinDoor.p_sCfgCloseName := 'Close';

s_cmInnerCabinDoor.i_bReqEnable := FALSE;
s_cmInnerCabinDoor.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmInnerCabinDoor.i_sCmName := 'Inner Cabin Door';
s_cmInnerCabinDoor.i_stSettings.tDoorClosingTimeout := T#10S;
s_cmInnerCabinDoor.i_stSettings.tDoorOpeningTimeout := T#10S;
s_cmInnerCabinDoor.i_stSettings.tResetPulseDuration := T#1S;
s_cmInnerCabinDoor.p_sCfgOpenName := 'Open';
s_cmInnerCabinDoor.p_sCfgCloseName := 'Close';

//Parameters (default values read from file)
s_fbParamOpenClampsAfterClosingTimeout.i_sName := CONCAT(i_sEmName, ': Open Clamps After Closing Timeout');
s_fbParamOpenClampsAfterClosingTimeout.i_nArrayFolderIndex := 1;
s_fbParamOpenClampsAfterClosingTimeout.i_bIsNumber := TRUE;

s_fbParamCloseClampsAfterEachOther.i_sName := CONCAT(i_sEmName, ': Close Clamps After Each Other');
s_fbParamCloseClampsAfterEachOther.i_nArrayFolderIndex := 1;
s_fbParamCloseClampsAfterEachOther.i_bIsNumber := TRUE;

s_fbParamCompressSealDuration.i_sName := CONCAT(i_sEmName, ': Compress Seal Duration');
s_fbParamCompressSealDuration.i_nArrayFolderIndex := 1;
s_fbParamCompressSealDuration.i_bIsNumber := TRUE;

//Interlocks
//Clamps upper/lower pressure selection
//[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerClampsUpperPressureLow.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerClampsUpperPressureHigh.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerClampsLowerPressureLow.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerClampsLowerPressureHigh.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';

//Docking Clamps
//[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerDockingClampsOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerDockingClampsOpen.i_stInterlockList.arr_Interlocks[2].sReason := 'Inner Cabin Door not Closed';
s_fbIlckHandlerDockingClampsOpen.i_stInterlockList.arr_Interlocks[3].sReason := 'Outer Cabin Door not Opened';

s_fbIlckHandlerDockingClampsClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerDockingClampsClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Inner Cabin Door not Closed';
s_fbIlckHandlerDockingClampsClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Outer Cabin Door not Opened';

//Unlockig Pins
//[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerUnlockingPinsRelease.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerUnlockingPinsLock.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';

//Door Opener
//[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerDoorOpenerClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerDoorOpenerClose.i_stInterlockList.arr_Interlocks[2].sReason := 'Door Shutter not opened';
s_fbIlckHandlerDoorOpenerOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerDoorOpenerOpen.i_stInterlockList.arr_Interlocks[2].sReason := 'Door Shutter not opened';
s_fbIlckHandlerDoorOpenerOpen.i_stInterlockList.arr_Interlocks[3].sReason := 'Inner Cabin Door not opened';

//Door Shutter
//[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerDoorShutterOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerDoorShutterOpen.i_stInterlockList.arr_Interlocks[2].sReason := 'Inner Cabin Door not opened';
s_fbIlckHandlerDoorShutterClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerDoorShutterClose.i_stInterlockList.arr_Interlocks[2].sReason := 'Door Opener not (almost)closed';

//Outer Cabin Door
//[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[2].sReason := 'Inner Cabin Door not Closed';
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[3].sReason := 'Docking Clamps not Closed';
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[4].sReason := 'Unlocking Pins not Locked';
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[2].sReason := 'Docking Clamps not Closed';
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[3].sReason := 'Unlocking Pins not Locked';

//Inner Cabin Door
//[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[2].sReason := 'Outer Cabin Door not Closed';
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[3].sReason := 'Door Opener not Closed';
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[4].sReason := 'Door Shutter not Closed';
s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[2].sReason := 'Door Opener not Closed';
s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[3].sReason := 'Door Shutter not Closed';

//Alarm config
s_fbAlarmHandlerClosingDoorFailed.i_sAlarmText := CONCAT(i_sEmName, ': Closing inner door failed');
s_fbAlarmHandlerClosingDoorFailed.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition.i_sAlarmText := CONCAT(i_sEmName, ': No box present AT per-docking position');
s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition.i_eAlarmLevel := E_AlarmLevel.Warning;

s_fbAlarmHandlerNoBoxPresentAtDockedPosition.i_sAlarmText := CONCAT(i_sEmName, ': No box present at docked position');
s_fbAlarmHandlerNoBoxPresentAtDockedPosition.i_eAlarmLevel := E_AlarmLevel.Warning;

s_fbAlarmHandlerCmdNotAllowed.i_eAlarmLevel := E_AlarmLevel.Alarm;

//Hmi
//Manual-mode
s_fbHmiBtnDockTB.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnDockTB.p_bStaVisible := FALSE;
s_fbHmiBtnDockTB.p_bStaEnabled := FALSE;
s_fbHmiBtnDockTB.p_sBtnText := 'Dock TB';

s_fbHmiBtnUndockTB.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnUndockTB.p_bStaVisible := FALSE;
s_fbHmiBtnUndockTB.p_bStaEnabled := FALSE;
s_fbHmiBtnUndockTB.p_sBtnText := 'Undock TB';

s_fbHmiBtnOpenInnerDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnOpenInnerDoor.p_bStaVisible := FALSE;
s_fbHmiBtnOpenInnerDoor.p_bStaEnabled := FALSE;
s_fbHmiBtnOpenInnerDoor.p_sBtnText := 'Open Inner TB Door';

s_fbHmiBtnCloseInnerDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnCloseInnerDoor.p_bStaVisible := FALSE;
s_fbHmiBtnCloseInnerDoor.p_bStaEnabled := FALSE;
s_fbHmiBtnCloseInnerDoor.p_sBtnText := 'Close Inner TB Door';

//Leds
//Manual-mode
s_fbHmiLedDockTbDone.p_bStaVisible := FALSE;
s_fbHmiLedDockTbDone.p_sToHmiDescriptionLed := 'Dock TB Done';

s_fbHmiLedUndockTbDone.p_bStaVisible := FALSE;
s_fbHmiLedUndockTbDone.p_sToHmiDescriptionLed := 'Undock TB Done';

s_fbHmiLedOpenInnerDoorDone.p_bStaVisible := FALSE;
s_fbHmiLedOpenInnerDoorDone.p_sToHmiDescriptionLed := 'Open Inner TB Door Done';

s_fbHmiLedCloseInnerDoorDone.p_bStaVisible := FALSE;
s_fbHmiLedCloseInnerDoorDone.p_sToHmiDescriptionLed := 'Close Inner TB Door Done';

s_fbHmiLedClampsUpperPressureSelect.p_bStaVisible := FALSE;
s_fbHmiLedClampsUpperPressureSelect.p_sToHmiDescriptionLed := 'Pressure Select Upper Clamps';

s_fbHmiLedClampsLowerPressureSelect.p_bStaVisible := FALSE;
s_fbHmiLedClampsLowerPressureSelect.p_sToHmiDescriptionLed := 'Pressure Select Lower Clamps';

s_fbHmiLedClampsOpened.p_bStaVisible := FALSE;
s_fbHmiLedClampsOpened.p_sToHmiDescriptionLed := 'Clamps Opened';

s_fbHmiLedClampsClosed.p_bStaVisible := FALSE;
s_fbHmiLedClampsClosed.p_sToHmiDescriptionLed := 'Clamps Closed';

s_fbHmiLedClampsUpperOpened.p_bStaVisible := FALSE;
s_fbHmiLedClampsUpperOpened.p_sToHmiDescriptionLed := 'Clamps Upper Left Opened';

s_fbHmiLedClampsUpperClosed.p_bStaVisible := FALSE;
s_fbHmiLedClampsUpperClosed.p_sToHmiDescriptionLed := 'Clamps Upper Left Closed';

s_fbHmiLedClampsLowerOpened.p_bStaVisible := FALSE;
s_fbHmiLedClampsLowerOpened.p_sToHmiDescriptionLed := 'Clamps Lower Left Opened';

s_fbHmiLedClampsLowerClosed.p_bStaVisible := FALSE;
s_fbHmiLedClampsLowerClosed.p_sToHmiDescriptionLed := 'Clamps Lower Left Closed';

s_fbHmiLedPinsLocked.p_bStaVisible := FALSE;
s_fbHmiLedPinsLocked.p_sToHmiDescriptionLed := 'Pins Locked';

s_fbHmiLedPinsReleased.p_bStaVisible := FALSE;
s_fbHmiLedPinsReleased.p_sToHmiDescriptionLed := 'Pins Unlocked';

s_fbHmiLedPinUpperReleased.p_bStaVisible := FALSE;
s_fbHmiLedPinUpperReleased.p_sToHmiDescriptionLed := 'Unlocking Pin Upper Released';
s_fbHmiLedPinUpperLocked.p_bStaVisible := FALSE;
s_fbHmiLedPinUpperLocked.p_sToHmiDescriptionLed := 'Unlocking Pin Upper Locked';

s_fbHmiLedPinLowerReleased.p_bStaVisible := FALSE;
s_fbHmiLedPinLowerReleased.p_sToHmiDescriptionLed := 'Unlocking Pin Lower Released';
s_fbHmiLedPinLowerLocked.p_bStaVisible := FALSE;
s_fbHmiLedPinLowerLocked.p_sToHmiDescriptionLed := 'Unlocking Pin Lower Locked';

s_fbHmiLedOpenerOpened.p_bStaVisible := FALSE;
s_fbHmiLedOpenerOpened.p_sToHmiDescriptionLed := 'Door Opener Opened';
s_fbHmiLedOpenerClosed.p_bStaVisible := FALSE;
s_fbHmiLedOpenerClosed.p_sToHmiDescriptionLed := 'Door Opener Closed';
s_fbHmiLedOpenerAlmostClosed.p_bStaVisible := FALSE;
s_fbHmiLedOpenerAlmostClosed.p_sToHmiDescriptionLed := 'Door Opener Almost Closed';

s_fbHmiLedShutterOpened.p_bStaVisible := FALSE;
s_fbHmiLedShutterOpened.p_sToHmiDescriptionLed := 'Door Shutter Opened';
s_fbHmiLedShutterClosed.p_bStaVisible := FALSE;
s_fbHmiLedShutterClosed.p_sToHmiDescriptionLed := 'Door Shutter Closed';

s_fbHmiLedOuterDoorOpened.p_bStaVisible := FALSE;
s_fbHmiLedOuterDoorOpened.p_sToHmiDescriptionLed := 'Outer Cabin Door Opened';
s_fbHmiLedOuterDoorClosed.p_bStaVisible := FALSE;
s_fbHmiLedOuterDoorClosed.p_sToHmiDescriptionLed := 'Outer Cabin Door Closed';

s_fbHmiLedInnerDoorOpened.p_bStaVisible := FALSE;
s_fbHmiLedInnerDoorOpened.p_sToHmiDescriptionLed := 'Inner Cabin Door Opened';
s_fbHmiLedInnerDoorClosed.p_bStaVisible := FALSE;
s_fbHmiLedInnerDoorClosed.p_sToHmiDescriptionLed := 'Inner Cabin Door Closed';

_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{15e5d91e-088b-4383-82aa-ad9257b81a9b}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

//Interlocks
_m_Interlocks();

s_diStaDoorAlmostClosed();
s_bStaDoorOpenerAlmostClosed := s_diStaDoorAlmostClosed.p_bStaInputDelayed;

s_bStaTbAtDockingPosition := i_bStaTbAtDockingPosition;
s_bStaDockingPositionFree := i_bStaDockingPositionFree;

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Interlocks" Id="{a0b92bb0-5a61-49ec-a39f-1fa55e573e55}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Interlocks
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Clamps upper pressure selection//////////////////////////////////////////////////////////////////
s_fbIlckHandlerClampsUpperPressureLow.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerClampsUpperPressureLow();

s_fbIlckHandlerClampsUpperPressureHigh.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerClampsUpperPressureHigh();

s_bIlckDockingClampsUpperPressureLow := s_fbIlckHandlerClampsUpperPressureLow.p_bInterlocked;
s_bIlckDockingClampsUpperPressureHigh := s_fbIlckHandlerClampsUpperPressureHigh.p_bInterlocked;

IF s_bIlckDockingClampsUpperPressureLow THEN
	s_cmClampsUpperHighPressure.p_sInterlockedReasonOff := s_fbIlckHandlerClampsUpperPressureLow.p_sReason;
ELSE
	s_cmClampsUpperHighPressure.p_sInterlockedReasonOff := '-';
END_IF

IF s_bIlckDockingClampsUpperPressureHigh THEN
	s_cmClampsUpperHighPressure.p_sInterlockedReasonOn := s_fbIlckHandlerClampsUpperPressureHigh.p_sReason;
ELSE
	s_cmClampsUpperHighPressure.p_sInterlockedReasonOn := '-';
END_IF

//Clamps lower pressure selection//////////////////////////////////////////////////////////////////
s_fbIlckHandlerClampsLowerPressureLow.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerClampsLowerPressureLow();

s_fbIlckHandlerClampsLowerPressureHigh.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerClampsLowerPressureHigh();

s_bIlckDockingClampsLowerPressureLow := s_fbIlckHandlerClampsLowerPressureLow.p_bInterlocked;
s_bIlckDockingClampsLowerPressureHigh := s_fbIlckHandlerClampsLowerPressureHigh.p_bInterlocked;

IF s_bIlckDockingClampsLowerPressureLow THEN
	s_cmClampsLowerHighPressure.p_sInterlockedReasonOff := s_fbIlckHandlerClampsLowerPressureLow.p_sReason;
ELSE
	s_cmClampsLowerHighPressure.p_sInterlockedReasonOff := '-';
END_IF

IF s_bIlckDockingClampsLowerPressureHigh THEN
	s_cmClampsLowerHighPressure.p_sInterlockedReasonOn := s_fbIlckHandlerClampsLowerPressureHigh.p_sReason;
ELSE
	s_cmClampsLowerHighPressure.p_sInterlockedReasonOn := '-';
END_IF

//Docking Clamps///////////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerDockingClampsOpen.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckDockingClampsToOpen;
s_fbIlckHandlerDockingClampsOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerDockingClampsOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_bStaInnerCabinDoorClosed) AND NOT(i_bTestDisableCabinDoors);
s_fbIlckHandlerDockingClampsOpen.i_stInterlockList.arr_Interlocks[3].bState := NOT(s_bStaOuterCabinDoorOpened) AND NOT(i_bTestDisableCabinDoors);
s_fbIlckHandlerDockingClampsOpen();

s_fbIlckHandlerDockingClampsClose.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckDockingClampsToClose;
s_fbIlckHandlerDockingClampsClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerDockingClampsClose();

s_bIlckDockingClampsToOpen := s_fbIlckHandlerDockingClampsOpen.p_bInterlocked;
s_bIlckDockingClampsToClose := s_fbIlckHandlerDockingClampsClose.p_bInterlocked;

IF s_bIlckDockingClampsToOpen THEN
	s_cmDockingClampsUpper.p_sInterlockedReasonOff := s_fbIlckHandlerDockingClampsOpen.p_sReason;
	s_cmDockingClampsLower.p_sInterlockedReasonOff := s_fbIlckHandlerDockingClampsOpen.p_sReason;
ELSE
	s_cmDockingClampsUpper.p_sInterlockedReasonOff := '-';
	s_cmDockingClampsLower.p_sInterlockedReasonOff := '-';
END_IF

IF s_bIlckDockingClampsToClose THEN
	s_cmDockingClampsUpper.p_sInterlockedReasonOn := s_fbIlckHandlerDockingClampsClose.p_sReason;
	s_cmDockingClampsLower.p_sInterlockedReasonOn := s_fbIlckHandlerDockingClampsClose.p_sReason;
ELSE
	s_cmDockingClampsUpper.p_sInterlockedReasonOn := '-';
	s_cmDockingClampsLower.p_sInterlockedReasonOn := '-';
END_IF

//Unlocking Pins///////////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerUnlockingPinsLock.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckUnlockingPinsToLock;
s_fbIlckHandlerUnlockingPinsLock.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerUnlockingPinsLock();

s_fbIlckHandlerUnlockingPinsRelease.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckUnlockingPinsToRelease;
s_fbIlckHandlerUnlockingPinsRelease.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerUnlockingPinsRelease();

s_bIlckUnlockingPinsToLock := s_fbIlckHandlerUnlockingPinsLock.p_bInterlocked;
s_bIlckUnlockingPinsToRelease := s_fbIlckHandlerUnlockingPinsRelease.p_bInterlocked;

IF s_bIlckUnlockingPinsToLock THEN
	s_cmUnlockingPinUpper.p_sInterlockedReasonOff := s_fbIlckHandlerUnlockingPinsLock.p_sReason;
	s_cmUnlockingPinLower.p_sInterlockedReasonOff := s_fbIlckHandlerUnlockingPinsLock.p_sReason;
ELSE
	s_cmUnlockingPinUpper.p_sInterlockedReasonOff := '-';
	s_cmUnlockingPinLower.p_sInterlockedReasonOff := '-';
END_IF

IF s_bIlckUnlockingPinsToRelease THEN
	s_cmUnlockingPinUpper.p_sInterlockedReasonOn := s_fbIlckHandlerUnlockingPinsRelease.p_sReason;
	s_cmUnlockingPinLower.p_sInterlockedReasonOn := s_fbIlckHandlerUnlockingPinsRelease.p_sReason;
ELSE
	s_cmUnlockingPinUpper.p_sInterlockedReasonOn := '-';
	s_cmUnlockingPinLower.p_sInterlockedReasonOn := '-';
END_IF

//Door Opener//////////////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerDoorOpenerClose.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckDoorOpenerToClose;
s_fbIlckHandlerDoorOpenerClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerDoorOpenerClose.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_bStaDoorShutterOpened);
s_fbIlckHandlerDoorOpenerClose();

s_fbIlckHandlerDoorOpenerOpen.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckDoorOpenerToOpen;
s_fbIlckHandlerDoorOpenerOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerDoorOpenerOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_bStaDoorShutterOpened);
s_fbIlckHandlerDoorOpenerOpen.i_stInterlockList.arr_Interlocks[3].bState := NOT(s_bStaInnerCabinDoorOpened) AND NOT(i_bTestDisableCabinDoors);
s_fbIlckHandlerDoorOpenerOpen();

s_bIlckDoorOpenerToOpen := s_fbIlckHandlerDoorOpenerOpen.p_bInterlocked;
s_bIlckDoorOpenerToClose := s_fbIlckHandlerDoorOpenerClose.p_bInterlocked;

IF s_bIlckDoorOpenerToClose THEN
	s_cmDoorOpener.p_sInterlockedReasonOff := s_fbIlckHandlerDoorOpenerClose.p_sReason;
ELSE
	s_cmDoorOpener.p_sInterlockedReasonOff := '-';
END_IF

IF s_bIlckDoorOpenerToOpen THEN
	s_cmDoorOpener.p_sInterlockedReasonOn := s_fbIlckHandlerDoorOpenerOpen.p_sReason;
ELSE
	s_cmDoorOpener.p_sInterlockedReasonOn := '-';
END_IF

//Door Shutter/////////////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerDoorShutterOpen.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckDoorShutterToOpen;
s_fbIlckHandlerDoorShutterOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerDoorShutterOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_bStaInnerCabinDoorOpened) AND NOT(i_bTestDisableCabinDoors);
s_fbIlckHandlerDoorShutterOpen();

s_fbIlckHandlerDoorShutterClose.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckDoorShutterToClose;
s_fbIlckHandlerDoorShutterClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerDoorShutterClose.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_bStaDoorOpenerClosed) AND NOT(s_bStaDoorOpenerAlmostClosed); 
s_fbIlckHandlerDoorShutterClose();

s_bIlckDoorShutterToOpen := s_fbIlckHandlerDoorShutterOpen.p_bInterlocked;
s_bIlckDoorShutterToClose := s_fbIlckHandlerDoorShutterClose.p_bInterlocked;

IF s_bIlckDoorShutterToOpen THEN
	s_cmDoorShutter.p_sInterlockedReasonOff := s_fbIlckHandlerDoorShutterOpen.p_sReason;
ELSE
	s_cmDoorShutter.p_sInterlockedReasonOff := '-';
END_IF

IF s_bIlckDoorShutterToClose THEN
	s_cmDoorShutter.p_sInterlockedReasonOn := s_fbIlckHandlerDoorShutterClose.p_sReason;
ELSE
	s_cmDoorShutter.p_sInterlockedReasonOn := '-';
END_IF

//Outer Cabin Door/////////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckOuterCabinDoorToOpen;
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_bStaInnerCabinDoorClosed) AND NOT(i_bTestDisableCabinDoors);
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[3].bState := NOT(s_bStaDockingClampsClosed);
s_fbIlckHandlerOuterCabinDoorOpen.i_stInterlockList.arr_Interlocks[4].bState := NOT(s_bStaUnlockingPinsLocked);
s_fbIlckHandlerOuterCabinDoorOpen();

s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckOuterCabinDoorToClose;
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_bStaDockingClampsClosed);
s_fbIlckHandlerOuterCabinDoorClose.i_stInterlockList.arr_Interlocks[3].bState := NOT(s_bStaUnlockingPinsLocked);
s_fbIlckHandlerOuterCabinDoorClose();

s_bIlckOuterCabinDoorToOpen := s_fbIlckHandlerOuterCabinDoorOpen.p_bInterlocked;
s_bIlckOuterCabinDoorToClose := s_fbIlckHandlerOuterCabinDoorClose.p_bInterlocked;

IF s_bIlckOuterCabinDoorToOpen THEN
	s_cmOuterCabinDoor.p_sInterlockedReasonOpen := s_fbIlckHandlerOuterCabinDoorOpen.p_sReason;
ELSE
	s_cmOuterCabinDoor.p_sInterlockedReasonOpen := '-';
END_IF

IF s_bIlckOuterCabinDoorToClose THEN
	s_cmOuterCabinDoor.p_sInterlockedReasonClose := s_fbIlckHandlerOuterCabinDoorClose.p_sReason;
ELSE
	s_cmOuterCabinDoor.p_sInterlockedReasonClose := '-';
END_IF

//Inner Cabin Door/////////////////////////////////////////////////////////////////////////////////
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckInnerCabinDoorToOpen;
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_bStaOuterCabinDoorClosed) AND NOT(i_bTestDisableCabinDoors);
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[3].bState := NOT(s_bStaDoorOpenerClosed);
s_fbIlckHandlerInnerCabinDoorOpen.i_stInterlockList.arr_Interlocks[4].bState := NOT(s_bStaDoorShutterClosed);
s_fbIlckHandlerInnerCabinDoorOpen();

s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[0] := i_stExtIlckInnerCabinDoorToClose;
s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_bStaDoorOpenerClosed);
s_fbIlckHandlerInnerCabinDoorClose.i_stInterlockList.arr_Interlocks[3].bState := NOT(s_bStaDoorShutterClosed);
s_fbIlckHandlerInnerCabinDoorClose();

s_bIlckInnerCabinDoorToOpen := s_fbIlckHandlerInnerCabinDoorOpen.p_bInterlocked;
s_bIlckInnerCabinDoorToClose := s_fbIlckHandlerInnerCabinDoorClose.p_bInterlocked;

IF s_bIlckInnerCabinDoorToOpen THEN
	s_cmInnerCabinDoor.p_sInterlockedReasonOpen := s_fbIlckHandlerInnerCabinDoorOpen.p_sReason;
ELSE
	s_cmInnerCabinDoor.p_sInterlockedReasonOpen := '-';
END_IF

IF s_bIlckInnerCabinDoorToClose THEN
	s_cmInnerCabinDoor.p_sInterlockedReasonClose := s_fbIlckHandlerInnerCabinDoorClose.p_sReason;
ELSE
	s_cmInnerCabinDoor.p_sInterlockedReasonClose := '-';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{748b7abf-6524-428b-ad1f-dd34bf2d901c}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

s_cmClampsUpperHighPressure(i_eCtrlMode := i_eCtrlMode, i_ref_eCtrlState := i_eCtrlState);
s_cmClampsLowerHighPressure(i_eCtrlMode := i_eCtrlMode, i_ref_eCtrlState := i_eCtrlState);

s_bStaDocked :=
		s_bStaHighPressureSelected
	AND s_bStaDockingClampsClosed
	AND (s_bStaOuterCabinDoorOpened OR i_bTestDisableCabinDoors)
	AND s_bStaTbAtDockingPosition;
 	
s_bStaUndocked :=
		s_bStaDockingClampsClosed
	AND s_bStaUnlockingPinsLocked
	AND s_bStaDoorOpenerClosed
	AND s_bStaDoorShutterClosed
	AND (s_bStaOuterCabinDoorClosed OR i_bTestDisableCabinDoors)
	AND NOT(s_bStaTbAtDockingPosition);
	
s_bStaInnerDoorClosedAndLocked :=
		s_bStaUnlockingPinsLocked
	AND s_bStaDoorOpenerClosed
	AND s_bStaDoorShutterClosed
	AND (s_bStaInnerCabinDoorClosed OR i_bTestDisableCabinDoors);
	
s_bStaInnerDoorOpenedAndReleased :=
		s_bStaUnlockingPinsReleased
	AND s_bStaDoorOpenerOpened
	AND s_bStaDoorShutterOpened
	AND (s_bStaInnerCabinDoorOpened OR i_bTestDisableCabinDoors);
	
s_bStsReadyToReceiveTB :=
	(s_eSequence = E_SeqDockingInterface.WAIT_FOR_TB_PLACED)
	AND (i_eCtrlState = E_CtrlState.RUNNING);
	
s_bStsReadyToSendTB := (s_eSequence = E_SeqDockingInterface.WAIT_FOR_TB_REMOVED)
	AND (i_eCtrlState = E_CtrlState.RUNNING);
	
q_bStaWarning := s_bStaWarning;

_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Params" Id="{78648659-4a86-4875-84af-aa8b2b68e067}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Params : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Params() THEN
	RETURN;
END_IF

//Parameters
s_fbParamOpenClampsAfterClosingTimeout();
s_fbParamCloseClampsAfterEachOther();
s_fbParamCompressSealDuration();

//Write to settings
i_ref_stSettings.bOpenClampsAfterClosingTimeout := LREAL_TO_BOOL(s_fbParamOpenClampsAfterClosingTimeout.p_fValue);
i_ref_stSettings.bCloseClampsAfterEachOther := LREAL_TO_BOOL(s_fbParamCloseClampsAfterEachOther.p_fValue);
i_ref_stSettings.tCompressSealDuration := LREAL_TO_TIME(s_fbParamCompressSealDuration.p_fValue);

_m_Params := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Sequence" Id="{99e9476f-c6f4-43bb-b223-447cd5d85ec0}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Sequence : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Register previous step
IF s_eSequence <> s_ePreviousStep
	AND s_eSequence <> E_SeqDockingInterface.STOP
	AND s_eSequence <> E_SeqDockingInterface.ERROR THEN
	s_ePreviousStep := s_eSequence;
END_IF

s_fbSeqControl(
	i_nSeqStep := s_eSequence,
	i_sStepName := TO_STRING(s_eSequence),
	i_bCmdReset :=
		i_bCmdReset
		AND i_bReqEnable
		AND (s_eSequence = E_SeqDockingInterface.ERROR) //Only reset/resume sequencer from ERROR state
		AND NOT(s_bStaError),
	i_bStaError := s_bStaError OR NOT(i_bReqEnable));
	
s_tonTimer(PT := T#3600S);

//Force to stop
IF (i_eCtrlState = E_CtrlState.STOPPING) THEN
	s_eSequence := E_SeqDockingInterface.STOP;
END_IF

//Load last step from persistent memory
IF s_fbSeqControl.q_bStaEntry
	AND (s_eSequence = E_SeqDockingInterface.READY)
	OR ( (s_eSequence > E_SeqDockingInterface.START) AND (s_eSequence < E_SeqDockingInterface.STOP) )
	THEN
		s_eLastStepPersistent := s_eSequence;
END_IF

s_sResumeStep := TO_STRING(s_eResumeStep);
s_sLastStepPersistent := TO_STRING(s_eLastStepPersistent);

CASE s_eSequence OF
	E_SeqDockingInterface.IDLE:
		IF (i_eCtrlState = E_CtrlState.IDLE) THEN
			s_eSequence := E_SeqDockingInterface.START;
			s_eResumeStep := s_eLastStepPersistent;
		END_IF
		
//START////////////////////////////////////////////////////////////////////////////////////////////
	E_SeqDockingInterface.START:
		IF s_fbSeqControl.q_bStaEntry THEN
			
			//Check actual status
			IF NOT(s_bStaDocked)
				AND(
					s_bStaHighPressureSelected
					OR NOT(s_bStaDockingClampsClosed)
					OR NOT(s_bStaDoorOpenerClosed)
					OR NOT(s_bStaDoorShutterClosed)
					OR NOT(s_bStaUnlockingPinsLocked)
					OR NOT(s_bStaOuterCabinDoorOpened OR i_bTestDisableCabinDoors)
					)
			THEN
				s_eSequence := E_SeqDockingInterface.PREPARE_READY;
			END_IF;
			
			s_sReason := 'start';
		END_IF
		
		s_tonTimer.IN := FALSE;
		
		//Added state running before continuing the sequense (automatically)
		IF i_eCtrlState = E_CtrlState.RUNNING THEN
			s_eSequence := s_eResumeStep;
		END_IF
		
	E_SeqDockingInterface.PREPARE_READY:
		IF s_fbSeqControl.q_bStaEntry THEN
			;
		END_IF
		
		IF NOT(s_cmClampsUpperHighPressure.p_bStaIsOff) OR NOT(s_cmClampsLowerHighPressure.p_bStaIsOff) THEN
			s_cmClampsUpperHighPressure.m_Off();
			s_cmClampsLowerHighPressure.m_Off();
		ELSIF NOT(s_cmDockingClampsUpper.p_bStaIsOn) OR NOT(s_cmDockingClampsLower.p_bStaIsOn) THEN
			s_cmDockingClampsUpper.m_On();
			s_cmDockingClampsLower.m_On();
		ELSIF NOT(s_cmDoorOpener.p_bStaIsOff) THEN
			s_cmDoorOpener.m_Off();
		ELSIF NOT(s_cmDoorShutter.p_bStaIsOn) THEN
			s_cmDoorShutter.m_On();
		ELSIF NOT(s_cmUnlockingPinUpper.p_bStaIsOff) OR NOT(s_cmUnlockingPinLower.p_bStaIsOff) THEN
			s_cmUnlockingPinUpper.m_Off();
			s_cmUnlockingPinLower.m_Off();
		ELSE
			s_eSequence := E_SeqDockingInterface.READY;
		END_IF
		
//READY////////////////////////////////////////////////////////////////////////////////////////////
	E_SeqDockingInterface.READY:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_eResumeStep := E_SeqDockingInterface.READY;
			s_bStaUndockingDone := FALSE;
		END_IF
		
		//Resturn to start
		IF i_eCtrlState <> E_CtrlState.RUNNING THEN
			s_eSequence := E_SeqDockingInterface.START;
		END_IF
		
		//Command Dock TB//////////////////////////////////////////////////////////////////////////
		IF s_bReqDockTB THEN
			IF _m_CmdDockTB(i_refReason := s_sReason) THEN
				
				{warning '#FUMO3: "Disabled Doors" option can be deleted, IF FUMO3 is build'}
				IF i_bTestDisableCabinDoors THEN
					s_eSequence := E_SeqDockingInterface.DOCK_OPEN_DOCKING_CLAMPS;
				ELSE
					s_eSequence := E_SeqDockingInterface.OPEN_OUTER_CABIN_DOOR;
				END_IF
				
			ELSE
				s_bErrCmdNotAllowed := TRUE;
			END_IF
		END_IF
		
		//Command Undock TB////////////////////////////////////////////////////////////////////////
		IF s_bReqUnDockTB THEN
			IF _m_CmdUndockTB(i_refReason := s_sReason) THEN
				s_eSequence := E_SeqDockingInterface.UNDOCK_OPEN_DOCKING_CLAMPS;
			ELSE
				s_bErrCmdNotAllowed := TRUE;
			END_IF
		END_IF
		
		//Command Open Inner TB Door///////////////////////////////////////////////////////////////
		IF s_bReqOpenInnerDoor THEN
			IF _m_CmdOpenInnerDoor(i_refReason := s_sReason) THEN
				
				{warning '#FUMO3: "Disabled Doors" option can be deleted, IF FUMO3 is build'}
				IF i_bTestDisableCabinDoors THEN
					s_eSequence := E_SeqDockingInterface.RELEASE_UNLOCKING_PINS;
				ELSE
					s_eSequence := E_SeqDockingInterface.OPEN_INNER_CABIN_DOOR;
				END_IF
				
			ELSE
				s_bErrCmdNotAllowed := TRUE;
			END_IF
		END_IF
		
		//Command Close Inner TB Door//////////////////////////////////////////////////////////////
		IF s_bReqCloseInnerDoor THEN
			IF _m_CmdCloseInnerDoor(i_refReason := s_sReason) THEN
				s_eSequence := E_SeqDockingInterface.CLOSE_DOOR_OPENER;
			ELSE
				s_bErrCmdNotAllowed := TRUE;
			END_IF
		END_IF
		
//DOCK TB//////////////////////////////////////////////////////////////////////////////////////////
	E_SeqDockingInterface.OPEN_OUTER_CABIN_DOOR:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmOuterCabinDoor.m_Open();
		END_IF
		
		IF s_cmOuterCabinDoor.p_bStaIsOpened THEN
			s_eSequence := E_SeqDockingInterface.DOCK_OPEN_DOCKING_CLAMPS;
		END_IF
		
	E_SeqDockingInterface.DOCK_OPEN_DOCKING_CLAMPS:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmDockingClampsUpper.m_Off();
			s_cmDockingClampsLower.m_Off();
		END_IF
		
		IF s_cmDockingClampsUpper.p_bStaIsOff AND s_cmDockingClampsLower.p_bStaIsOff THEN
			s_eSequence := E_SeqDockingInterface.WAIT_FOR_TB_PLACED;
		END_IF
		
	E_SeqDockingInterface.WAIT_FOR_TB_PLACED:
		IF s_fbSeqControl.q_bStaEntry THEN
			; //Ready to receive signal is written in _mOutputs(), based on this step ANS state RUNNING
		END_IF
		
		IF s_bStaTbAtDockingPosition THEN
			IF NOT(i_ref_stSettings.bCloseClampsAfterEachOther) THEN
				s_eSequence := E_SeqDockingInterface.DOCK_CLOSE_DOCKING_CLAMPS; //(option 1)
			ELSE
				s_eSequence := E_SeqDockingInterface.CLOSE_LOWER_DOCKING_CLAMPS; //(option 2)
			END_IF
		END_IF
		
		IF s_bReqUnDockTB THEN //Escape
			IF _m_CmdUndockTB(i_refReason := s_sReason) THEN
				s_eSequence := E_SeqDockingInterface.UNDOCK_CLOSE_DOCKING_CLAMPS;
			ELSE
				s_bErrCmdNotAllowed := TRUE;
			END_IF
		END_IF
		
	//(option 1)
	E_SeqDockingInterface.DOCK_CLOSE_DOCKING_CLAMPS:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmClampsUpperHighPressure.m_Off();
			s_cmClampsLowerHighPressure.m_Off();
		END_IF
		
		//If docking clamps doesn't reach reed contact then continue after fixed time
		s_tonTimer.IN := (s_cmDockingClampsUpper.m_On() AND s_cmDockingClampsLower.m_On()) OR (s_fbSeqControl.q_tmStepTime >= T#2S);
		
		IF s_tonTimer.ET >= i_ref_stSettings.tDelayNextStep THEN
			s_tonTimer.IN := FALSE;
			s_eSequence := E_SeqDockingInterface.COMPRESS_ALL_SEAL;
		//ELSE
		//In case of error all docking clamps will be openeed (this is implemented in error-step)
		END_IF
		
	E_SeqDockingInterface.COMPRESS_ALL_SEAL:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmClampsUpperHighPressure.m_On();
			s_cmClampsLowerHighPressure.m_On();
		END_IF
		
		IF s_fbSeqControl.q_tmStepTime >= i_ref_stSettings.tCompressSealDuration
			//Check if all docking clamps are closed
			AND (s_cmDockingClampsUpper.p_bStaIsOn AND s_cmDockingClampsLower.p_bStaIsOn) THEN
				s_eSequence := E_SeqDockingInterface.DOCK_TB_DONE;
		END_IF
		
	//(option 2)
	E_SeqDockingInterface.CLOSE_LOWER_DOCKING_CLAMPS:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmClampsLowerHighPressure.m_Off();
		END_IF
		
		//If docking clamps doesn't reach reed contact then continu after fixed time
		s_tonTimer.IN := (s_cmDockingClampsLower.m_On()) OR (s_fbSeqControl.q_tmStepTime >= T#2S);
		
		IF s_tonTimer.ET >= i_ref_stSettings.tDelayNextStep THEN
			s_tonTimer.IN := FALSE;
			s_eSequence := E_SeqDockingInterface.COMPRESS_LOWER_SEAL;
		//ELSE
		//In case of error all docking clamps will be openeed (this is implemented in error-step)
		END_IF
		
	E_SeqDockingInterface.COMPRESS_LOWER_SEAL:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmClampsLowerHighPressure.m_On();
		END_IF
		
		IF s_fbSeqControl.q_tmStepTime >= i_ref_stSettings.tCompressSealDuration
			//Check if lower docking clamps are closed
			AND (s_cmDockingClampsLower.p_bStaIsOn OR (s_cmDockingClampsLower.i_stSettings.tValveOnTimeout = T#0S)) THEN
			s_eSequence := E_SeqDockingInterface.CLOSE_UPPER_DOCKING_CLAMPS;
		END_IF
		
	E_SeqDockingInterface.CLOSE_UPPER_DOCKING_CLAMPS:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmClampsUpperHighPressure.m_Off();
			s_cmClampsLowerHighPressure.m_Off(); //Back to low pressure at lower clamps
		END_IF
		
		//If docking clamps doesn't reach reed contact then continu after fixed time
		s_tonTimer.IN := (s_cmDockingClampsUpper.m_On()) OR (s_fbSeqControl.q_tmStepTime >= T#2S);
		
		IF s_tonTimer.ET >= i_ref_stSettings.tDelayNextStep THEN
			s_tonTimer.IN := FALSE;
			s_eSequence := E_SeqDockingInterface.COMPRESS_UPPER_SEAL;
		//ELSE
		//In case of error all docking clamps will be openeed (this is implemented in error-step)
		END_IF
		
	E_SeqDockingInterface.COMPRESS_UPPER_SEAL:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmClampsUpperHighPressure.m_On();
			s_cmClampsLowerHighPressure.m_On();
		END_IF
		
		IF s_fbSeqControl.q_tmStepTime >= i_ref_stSettings.tCompressSealDuration
			//Check if all docking clamps are closed
			AND ((s_cmDockingClampsLower.p_bStaIsOn OR (s_cmDockingClampsLower.i_stSettings.tValveOnTimeout = T#0S)) AND s_cmDockingClampsUpper.p_bStaIsOn) THEN
				s_eSequence := E_SeqDockingInterface.DOCK_TB_DONE;
		END_IF
		
	E_SeqDockingInterface.DOCK_TB_DONE:
		IF s_fbSeqControl.q_bStaEntry THEN
			;
		END_IF
		
		IF (s_fbSeqControl.q_tmStepTime > T#2S) THEN
			s_eSequence := E_SeqDockingInterface.READY;
		END_IF
		
//UNDOCK TB////////////////////////////////////////////////////////////////////////////////////////
	E_SeqDockingInterface.UNDOCK_OPEN_DOCKING_CLAMPS:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmDockingClampsUpper.m_Off();
			s_cmDockingClampsLower.m_Off();
		END_IF
		
		IF s_cmDockingClampsUpper.p_bStaIsOff AND s_cmDockingClampsLower.p_bStaIsOff THEN
			s_eSequence := E_SeqDockingInterface.WAIT_FOR_TB_REMOVED;
		END_IF
		
	E_SeqDockingInterface.WAIT_FOR_TB_REMOVED:
		IF s_fbSeqControl.q_bStaEntry THEN
			; //Ready to send signal is written in _mOutputs(), based on this step ANS state RUNNING
		END_IF
		
		IF s_bStaDockingPositionFree THEN
			s_eSequence := E_SeqDockingInterface.UNDOCK_CLOSE_DOCKING_CLAMPS;
		END_IF
		
		IF s_bReqDockTB THEN //Escape
			IF _m_CmdDockTB(i_refReason := s_sReason) THEN
				IF NOT(i_ref_stSettings.bCloseClampsAfterEachOther) THEN
					s_eSequence := E_SeqDockingInterface.DOCK_CLOSE_DOCKING_CLAMPS; //(option 1)
				ELSE
					s_eSequence := E_SeqDockingInterface.CLOSE_LOWER_DOCKING_CLAMPS; //(option 2)
				END_IF
			ELSE
				s_bErrCmdNotAllowed := TRUE;
			END_IF
		END_IF
		
	E_SeqDockingInterface.UNDOCK_CLOSE_DOCKING_CLAMPS:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmDockingClampsUpper.m_On();
			s_cmDockingClampsLower.m_On();
		END_IF
		
		IF s_cmDockingClampsUpper.p_bStaIsOn AND s_cmDockingClampsLower.p_bStaIsOn THEN
			
			{warning '#FUMO3: "Disabled Doors" option can be deleted, IF FUMO3 is build'}
			IF i_bTestDisableCabinDoors THEN
				s_eSequence := E_SeqDockingInterface.UNDOCK_TB_DONE;
			ELSE
				s_eSequence := E_SeqDockingInterface.CLOSE_OUTER_CABIN_DOOR;
			END_IF
			
		END_IF
		
	E_SeqDockingInterface.CLOSE_OUTER_CABIN_DOOR:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmOuterCabinDoor.m_Close();
		END_IF
		
		IF s_cmOuterCabinDoor.p_bStaIsClosed THEN
			s_eSequence := E_SeqDockingInterface.UNDOCK_TB_DONE;
		END_IF
		
	E_SeqDockingInterface.UNDOCK_TB_DONE:
		IF s_fbSeqControl.q_bStaEntry THEN
			;
		END_IF
		
		IF (s_fbSeqControl.q_tmStepTime > T#2S) THEN
			s_eSequence := E_SeqDockingInterface.READY;
		END_IF
		
//OPEN INNER TB DOOR///////////////////////////////////////////////////////////////////////////////
	E_SeqDockingInterface.OPEN_INNER_CABIN_DOOR:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmInnerCabinDoor.m_Open();
		END_IF
		
		IF s_cmInnerCabinDoor.p_bStaIsOpened THEN
			s_eSequence := E_SeqDockingInterface.RELEASE_UNLOCKING_PINS;
		END_IF
		
	E_SeqDockingInterface.RELEASE_UNLOCKING_PINS:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmUnlockingPinUpper.m_On();
			s_cmUnlockingPinLower.m_On();
		END_IF
		
		s_tonTimer.IN := s_cmUnlockingPinUpper.p_bStaIsOn AND s_cmUnlockingPinLower.p_bStaIsOn;
		
		IF s_tonTimer.ET > i_ref_stSettings.tDelayNextStep THEN
			s_tonTimer.IN := FALSE;
			s_eSequence := E_SeqDockingInterface.OPEN_DOOR_SHUTTER;
		END_IF
		
	E_SeqDockingInterface.OPEN_DOOR_SHUTTER:
		s_tonTimer.IN := s_cmDoorShutter.m_Off();
		
		IF s_tonTimer.ET > i_ref_stSettings.tDelayNextStep THEN
			s_tonTimer.IN := FALSE;
			s_eSequence := E_SeqDockingInterface.OPEN_DOOR_OPENER;
		END_IF
		
	E_SeqDockingInterface.OPEN_DOOR_OPENER:
		IF s_cmDoorOpener.m_On() THEN
			s_eSequence := E_SeqDockingInterface.OPEN_INNER_TB_DOOR_DONE;
		END_IF
		
	E_SeqDockingInterface.OPEN_INNER_TB_DOOR_DONE:
		IF s_fbSeqControl.q_bStaEntry THEN
			;
//--			s_bStaInnerDoorOpenedAndReleased := TRUE;
//--			s_bStaInnerDoorClosedAndLocked := FALSE;
		END_IF
		
		IF (s_fbSeqControl.q_tmStepTime > T#2S) THEN
			s_eSequence := E_SeqDockingInterface.READY;
		END_IF
		
//CLOSE INNER TB DOOR//////////////////////////////////////////////////////////////////////////////
	E_SeqDockingInterface.CLOSE_DOOR_OPENER:
		s_tonTimer.IN := s_cmDoorOpener.m_Off();
		
		IF s_tonTimer.ET > i_ref_stSettings.tDelayNextStep
			AND (s_bStaDoorOpenerClosed OR s_bStaDoorOpenerAlmostClosed)
			THEN
			s_tonTimer.IN := FALSE;
			s_eSequence := E_SeqDockingInterface.CLOSE_DOOR_SHUTTER;
		ELSIF s_fbSeqControl.q_tmStepTime >= T#15S THEN
			s_bErrClosingDoorFailed := TRUE;
			s_eSequence := E_SeqDockingInterface.ERROR;
		END_IF
		
	E_SeqDockingInterface.CLOSE_DOOR_SHUTTER:
		s_tonTimer.IN := s_cmDoorShutter.m_On();
		
		IF s_tonTimer.ET > i_ref_stSettings.tDelayNextStep THEN
			s_tonTimer.IN := FALSE;
			s_eSequence := E_SeqDockingInterface.LOCK_UNLOCKING_PINS;
		END_IF
		
	E_SeqDockingInterface.LOCK_UNLOCKING_PINS:
		s_tonTimer.IN := (s_cmUnlockingPinUpper.m_Off() AND s_cmUnlockingPinLower.m_Off());
		
		IF s_tonTimer.ET > i_ref_stSettings.tDelayNextStep THEN
			s_tonTimer.IN := FALSE;
			
			{warning '#FUMO3: "Disabled Doors" option can be deleted, IF FUMO3 is build'}
			IF i_bTestDisableCabinDoors THEN
				s_eSequence := E_SeqDockingInterface.CLOSE_INNER_TB_DOOR_DONE;
			ELSE
				s_eSequence := E_SeqDockingInterface.CLOSE_INNER_CABIN_DOOR;
			END_IF
			
		END_IF
		
	E_SeqDockingInterface.CLOSE_INNER_CABIN_DOOR:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmInnerCabinDoor.m_Close();
		END_IF
		
		IF s_cmInnerCabinDoor.p_bStaIsClosed THEN
			s_eSequence := E_SeqDockingInterface.CLOSE_INNER_TB_DOOR_DONE;
		END_IF
		
	E_SeqDockingInterface.CLOSE_INNER_TB_DOOR_DONE:
		IF s_fbSeqControl.q_bStaEntry THEN
			;
//--			s_bStaInnerDoorOpenedAndReleased := FALSE;
//--			s_bStaInnerDoorClosedAndLocked := TRUE;
		END_IF
		
		IF (s_fbSeqControl.q_tmStepTime > T#2S) THEN
			s_eSequence := E_SeqDockingInterface.READY;
		END_IF
		
//STOP/////////////////////////////////////////////////////////////////////////////////////////////
	E_SeqDockingInterface.STOP:
		IF s_fbSeqControl.q_bStaEntry THEN
			IF (i_eCtrlMode = E_CtrlMode.AUTOMATIC)
				AND (s_ePreviousStep > E_SeqDockingInterface.START)
				AND (s_ePreviousStep < E_SeqDockingInterface.ERROR) THEN
					s_eResumeStep := s_ePreviousStep;
			END_IF
		END_IF
		
		IF (i_eCtrlState = E_CtrlState.IDLE) THEN
			s_eSequence := E_SeqDockingInterface.START;
		END_IF
		
//ERROR////////////////////////////////////////////////////////////////////////////////////////////
	E_SeqDockingInterface.ERROR:
		IF s_fbSeqControl.q_bStaEntry THEN
			IF (i_eCtrlMode = E_CtrlMode.AUTOMATIC)
				AND (s_ePreviousStep > E_SeqDockingInterface.START)
				AND (s_ePreviousStep < E_SeqDockingInterface.ERROR) THEN
					s_eResumeStep := s_ePreviousStep;
			ELSE
//--				s_eResumeStep := E_SeqDockingInterface.PREPARE_READY;
				s_eResumeStep := E_SeqDockingInterface.READY;
			END_IF
			
			//Error response: During "Dock TB"
			IF i_ref_stSettings.bOpenClampsAfterClosingTimeout AND_THEN
				((s_ePreviousStep >= E_SeqDockingInterface.DOCK_CLOSE_DOCKING_CLAMPS) AND (s_ePreviousStep <= E_SeqDockingInterface.COMPRESS_UPPER_SEAL))
				AND (s_cmDockingClampsUpper.p_bStaError OR s_cmDockingClampsLower.p_bStaError)
				THEN
				//Open all docking clamps if closing on low pressure has failed
				s_cmClampsUpperHighPressure.m_Off();
				s_cmClampsLowerHighPressure.m_Off();
				s_cmDockingClampsUpper.m_Off();
				s_cmDockingClampsLower.m_Off();
				
				//Resume from READY
				s_eResumeStep := E_SeqDockingInterface.READY;
				
			//Error response: During "Open Inner Door"
			ELSIF FALSE THEN
				; //TBD (reverse sequence?)
				
				//Resume from "TB Docked"
				s_eResumeStep := E_SeqDockingInterface.DOCK_TB_DONE;
				
			//Error response: During "Close Inner Door"
			ELSIF FALSE THEN
				; //TBD (reverse sequence?)
				
				//Resume from "Inner Door Opened"
				s_eResumeStep := E_SeqDockingInterface.DOCK_TB_DONE;
				
			ELSE
				s_cmDockingClampsUpper.m_Stop(); //pressurized rest/middle position
				s_cmDockingClampsLower.m_Stop(); //pressurezed rest/middle position
			END_IF
			
			s_cmUnlockingPinUpper.m_Stop();
			s_cmUnlockingPinLower.m_Stop();
			
		END_IF
		
END_CASE

s_bReqDockTB := FALSE;
s_bReqUndockTB := FALSE;
s_bReqOpenInnerDoor := FALSE;
s_bReqCloseInnerDoor := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{13829dfc-fc98-4f3a-8520-8dee66cb84d9}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

CASE i_eCtrlMode OF
	E_CtrlMode.IDLE:
		;
		
	E_CtrlMode.AUTOMATIC:
		//Execute automatic control
		_m_Sequence();
		
	E_CtrlMode.MANUAL:
		//Execute manaual control (based on HMI buttons)
		
		//Manual commands (convert HMI buttons to requests)
		s_bReqDockTB := s_fbHmiBtnDockTB.p_osrBtnPress;
		s_bReqUndockTB := s_fbHmiBtnUndockTB.p_osrBtnPress;
		s_bReqOpenInnerDoor := s_fbHmiBtnOpenInnerDoor.p_osrBtnPress;
		s_bReqCloseInnerDoor := s_fbHmiBtnCloseInnerDoor.p_osrBtnPress;
		
		_m_Sequence();
		
	E_CtrlMode.MAINTENANCE:
		//Execute maintenance control (HMI control module buttons)
		//Reset automatic/manual sequencer
		IF i_eCtrlState = E_CtrlState.RUNNING THEN
			s_eSequence := E_SeqDockingInterface.IDLE;
			
		ELSIF i_eCtrlState = E_CtrlState.IDLE THEN
			s_cmDoorOpener.m_Stop(); //keep last position
			s_cmDoorShutter.m_Stop(); //keep last position
			
		END_IF
		; 	//Maintenance control is implemented in lower-layer control modules
		
	E_CtrlMode.IO:
		//Execute IO-test control (HMI output force control)
		; 	//IO-Test control is implemented in lower-layer control modules
			//Enabling control is done direcly under this case instruction
		
	E_CtrlMode.CLEANING:
		//Execute cleaning control (cleaning  specific functionalities)
		;	//Cleaning control is not implemented, this could be a done in the future if neccesary
		
END_CASE

//AUTOMATIC-mode///////////////////////////////////////////////////////////////////////////////////

//MANUAL-mode//////////////////////////////////////////////////////////////////////////////////////

//Buttons visibility
IF (i_eCtrlMode = E_CtrlMode.MANUAL) THEN
	s_fbHmiBtnDockTB.p_bStaVisible := TRUE;
	s_fbHmiBtnUndockTB.p_bStaVisible := TRUE;
	s_fbHmiBtnOpenInnerDoor.p_bStaVisible := TRUE;
	s_fbHmiBtnCloseInnerDoor.p_bStaVisible := TRUE;
ELSE
	s_fbHmiBtnDockTB.p_bStaVisible := FALSE;
	s_fbHmiBtnUndockTB.p_bStaVisible := FALSE;
	s_fbHmiBtnOpenInnerDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnCloseInnerDoor.p_bStaVisible := FALSE;
END_IF

//Buttons enabling
IF i_bReqEnable AND (i_eCtrlMode = E_CtrlMode.MANUAL) AND (i_eCtrlState = E_CtrlState.RUNNING) THEN
	
	s_fbHmiBtnDockTB.p_bStaEnabled :=
		NOT(s_bStaDocked)
		AND NOT(s_bIlckDockingClampsToClose)
		AND NOT(s_cmDockingClampsUpper.p_bStaError)
		AND NOT(s_cmDockingClampsLower.p_bStaError)
		AND NOT(s_cmOuterCabinDoor.p_bStaError)
		AND ( (s_eSequence = E_SeqDockingInterface.READY) OR (s_eSequence =E_SeqDockingInterface.WAIT_FOR_TB_REMOVED) );
		
	s_fbHmiBtnUnDockTB.p_bStaEnabled :=
		NOT(s_bStaUndocked)
		AND s_bStaInnerDoorClosedAndLocked
		AND NOT(s_bIlckDockingClampsToOpen)
		AND NOT(s_cmDockingClampsUpper.p_bStaError)
		AND NOT(s_cmDockingClampsLower.p_bStaError)
		AND NOT(s_cmOuterCabinDoor.p_bStaError)
		AND ( (s_eSequence = E_SeqDockingInterface.READY) OR (s_eSequence =E_SeqDockingInterface.WAIT_FOR_TB_PLACED) );
		
	s_fbHmiBtnOpenInnerDoor.p_bStaEnabled :=
		s_bStaDocked
		AND NOT(s_bStaInnerDoorOpenedAndReleased)
		AND NOT(s_bIlckUnlockingPinsToRelease)
		AND NOT(s_bIlckDoorShutterToOpen)
//		AND NOT(s_bIlckDoorOpenerToOpen) //to prevent death-lock
		AND NOT(s_bIlckUnlockingPinsToRelease)
		AND NOT(s_cmUnlockingPinUpper.p_bStaError)
		AND NOT(s_cmUnlockingPinLower.p_bStaError)
		AND NOT(s_cmDoorShutter.p_bStaError)
		AND NOT(s_cmDoorOpener.p_bStaError)
		AND NOT(s_cmInnerCabinDoor.p_bStaError)
		AND (s_eSequence = E_SeqDockingInterface.READY);
		
	s_fbHmiBtnCloseInnerDoor.p_bStaEnabled :=
		s_bStaDocked
		AND NOT(s_bStaInnerDoorClosedAndLocked)
		AND NOT(s_bIlckDoorOpenerToClose)
//		AND NOT(s_bIlckDoorShutterToClose) //to prevent death-lock
		AND NOT(s_bIlckUnlockingPinsToLock)
		AND NOT(s_cmUnlockingPinUpper.p_bStaError)
		AND NOT(s_cmUnlockingPinLower.p_bStaError)
		AND NOT(s_cmDoorShutter.p_bStaError)
		AND NOT(s_cmDoorOpener.p_bStaError)
		AND NOT(s_cmInnerCabinDoor.p_bStaError)
		AND (s_eSequence = E_SeqDockingInterface.READY);
ELSE
	s_fbHmiBtnDockTB.p_bStaEnabled := FALSE;
	s_fbHmiBtnUndockTB.p_bStaEnabled := FALSE;
	s_fbHmiBtnOpenInnerDoor.p_bStaEnabled := FALSE;
	s_fbHmiBtnCloseInnerDoor.p_bStaEnabled := FALSE;
END_IF

//IO-mode//////////////////////////////////////////////////////////////////////////////////////////
IF (i_eCtrlMode = E_CtrlMode.IO) AND (i_eCtrlState = E_CtrlState.RUNNING) THEN
	s_bHmiForceOutputEnabled := TRUE;
ELSE
	s_bHmiForceOutputEnabled := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReqCloseInnerDoor" Id="{1fa4ee8a-afe9-445a-a083-5023c47af3e8}">
      <Declaration><![CDATA[METHOD PUBLIC m_ReqCloseInnerDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

s_bReqCloseInnerDoor := TRUE;

m_ReqCloseInnerDoor := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReqDockTB" Id="{a0624d17-910f-46f4-aad8-ec9dc796e335}">
      <Declaration><![CDATA[METHOD PUBLIC m_ReqDockTB : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

s_bReqDockTB := TRUE;

m_ReqDockTB := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReqOpenInnerDoor" Id="{af05bc54-8424-4586-adf6-51c519642be5}">
      <Declaration><![CDATA[METHOD PUBLIC m_ReqOpenInnerDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

s_bReqOpenInnerDoor := TRUE;

m_ReqOpenInnerDoor := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReqUndockTB" Id="{3ed99a4a-5538-4adf-806b-ec3280a600a5}">
      <Declaration><![CDATA[METHOD PUBLIC m_ReqUndockTB : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

s_bReqUndockTB := TRUE;

m_ReqUndockTB := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bStaClampsClosed" Id="{de32a338-e965-450c-a404-78adcd65d0d0}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaClampsClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{7682c14a-e4ab-4156-bdf2-ba42269377d9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaClampsClosed := s_bStaDockingClampsClosed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaClampsOpened" Id="{20b689ca-7b07-4e51-a3ea-324f8cec92e0}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaClampsOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{31c09844-15c2-48d5-9a5b-8c43458c7d91}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaClampsOpened := s_bStaDockingClampsOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDocked" Id="{a61394df-c5f0-450a-8cdf-e47379cb8b81}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaDocked : BOOL]]></Declaration>
      <Get Name="Get" Id="{e6843217-13bc-4765-b8f6-a237563e9d39}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDocked := s_bStaDocked;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockPosFree" Id="{1c1bcc1f-d42b-48d2-9743-d0c845e1b595}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaDockPosFree : BOOL]]></Declaration>
      <Get Name="Get" Id="{8f44ecfc-2d8a-4e22-a3b9-d3876337bbab}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockPosFree := s_bStaDockingPositionFree;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDoorOpenerClosed" Id="{63cd96f8-f624-4b02-bd3a-a2cbe14252be}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaDoorOpenerClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{238a51b0-36e0-4400-a703-3d528d4349de}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDoorOpenerClosed := s_bStaDoorOpenerClosed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDoorOpenerOpened" Id="{261d2f2a-92b8-40e0-b106-5be72c42c34f}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaDoorOpenerOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{8944314f-27c4-49d0-b519-697d3a5de967}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDoorOpenerOpened := s_bStaDoorOpenerOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDoorShutterClosed" Id="{6b93ad88-41ce-4a26-8ca3-594c78a4f4a8}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaDoorShutterClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{b4d06cd5-edac-4137-90e6-bf23b147bc4d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDoorShutterClosed := s_bStaDoorShutterClosed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDoorShutterOpened" Id="{e05a4787-9e9f-4e04-8600-016deb64de05}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaDoorShutterOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{595c0f51-794c-49e6-9af4-44cc0b9562dd}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDoorShutterOpened := s_bStaDoorShutterOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaInnerDoorClosed" Id="{dd31784c-49d6-4d32-a02f-66ee1e524851}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaInnerDoorClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{ec81e0aa-07a2-4a59-858a-8a8d7988d797}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaInnerDoorClosed := s_bStaInnerDoorClosedAndLocked;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaInnerDoorOpened" Id="{38547cf9-5983-403c-914e-3b92e4e4e9d8}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaInnerDoorOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{c2f8547d-c997-4c85-95f1-ef32b94df578}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaInnerDoorOpened := s_bStaInnerDoorOpenedAndReleased;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaOuterDoorClosed" Id="{3bee48fb-c1b7-4a50-aaab-2f8746475cee}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaOuterDoorClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{bb2dfa90-c8d2-4ad9-8560-32f84f2d1922}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaOuterDoorClosed := s_bStaOuterCabinDoorClosed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaOuterDoorOpened" Id="{7347b399-2c14-4724-9146-93dc500f8bbb}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaOuterDoorOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{d545b3f3-8376-458f-ae3b-983defb7dd36}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaOuterDoorOpened := s_bStaOuterCabinDoorOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaReady" Id="{70848e19-c91a-41af-b75e-c674a90c1f5a}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaReady : BOOL]]></Declaration>
      <Get Name="Get" Id="{68401e4d-749c-4e8c-94bf-1ef2897db83f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaReady := (s_eSequence = E_SeqDockingInterface.READY);
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaTbAtDockedPos" Id="{95822bca-1047-492e-8877-1d8528242dc0}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaTbAtDockedPos : BOOL]]></Declaration>
      <Get Name="Get" Id="{aa3a83b8-f468-44df-903c-150f557391f1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaTbAtDockedPos := s_bStaBoxAtDockedPosition;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaTbAtPreDockingPos" Id="{edbe1074-bded-474c-9558-f67f08872474}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaTbAtPreDockingPos : BOOL]]></Declaration>
      <Get Name="Get" Id="{cf71d052-481e-48f0-aa51-5a234c033608}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaTbAtPreDockingPos := s_bStaBoxAtPreDockingPosition;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaUndocked" Id="{2a632f80-434e-4ff6-ad02-3973770d7bbf}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaUndocked : BOOL]]></Declaration>
      <Get Name="Get" Id="{56b7d6e8-1510-46ea-84c2-20aa46607960}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaUndocked := s_bStaUndocked;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaUnlockPinsLocked" Id="{381598b9-274a-4acf-a463-9515a8485594}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaUnlockPinsLocked : BOOL]]></Declaration>
      <Get Name="Get" Id="{96038b2d-5ca7-4911-abb6-0bbc33b7db24}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaUnlockPinsLocked := s_bStaUnlockingPinsLocked;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaUnlockPinsRelease" Id="{1ee245ec-6be0-491b-81fe-2557cdf23641}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaUnlockPinsRelease : BOOL]]></Declaration>
      <Get Name="Get" Id="{67bd3638-8daf-4342-96aa-831b81b68027}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaUnlockPinsRelease := s_bStaUnlockingPinsReleased;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStsReadyToReceiveTB" Id="{17690c87-094d-42c4-90ff-e50669b59ba6}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStsReadyToReceiveTB : BOOL]]></Declaration>
      <Get Name="Get" Id="{150a498c-849f-4c97-a175-eee386008d2a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStsReadyToReceiveTB := s_bStsReadyToReceiveTB;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStsReadyToSendTB" Id="{d03da2e7-a9bd-4f93-955d-b5549332b0b5}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStsReadyToSendTB : BOOL]]></Declaration>
      <Get Name="Get" Id="{dcf3742e-1ee2-46a4-ab0c-ac86b50fa1b9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStsReadyToSendTB := s_bStsReadyToSendTB;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>