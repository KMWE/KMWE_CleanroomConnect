<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_Doors" Id="{0ea26ddd-052a-4260-bfaf-0daade60103a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_Doors EXTENDS EM_Base //??IMPLEMENTS I_EM_DOORS
VAR CONSTANT 
	c_nResultDataSize : UINT := 20;
END_VAR

VAR_INPUT
//Inputs
	i_ref_stSettings : REFERENCE TO ST_SettingsDoors;
	
	i_bStaInfeedSealed : BOOL;
	
	// External interlocks (from outside this EM)
	i_fbExtIlckOuterDoorOpen : FB_Interlock;
	i_fbExtIlckOuterDoorClose : FB_Interlock;
	
	i_fbExtIlckInnerDoorOpen : FB_Interlock;
	i_fbExtIlckInnerDoorClose : FB_Interlock;
	
//++	i_fbExtIlckCleanroomDoorToLock : FB_Interlock;
//++	i_fbExtIlckCleanroomDoorToRelease : FB_Interlock;	

	i_ref_objCarrier : REFERENCE TO OBJ_Carrier;
	
	i_eCtrlState : E_CtrlState;
END_VAR

VAR_OUTPUT
	q_bStaWarning : BOOL;
END_VAR

VAR
	
	//Interlocks
	s_fbIlckHandlerOuterDoorOpen : FB_InterlockHandler;
	s_fbIlckHandlerOuterDoorClose : FB_InterlockHandler;
	
	s_fbIlckHandlerInnerDoorOpen : FB_InterlockHandler;
	s_fbIlckHandlerInnerDoorClose : FB_InterlockHandler;
	
//------------------------------------------//
//Control Modules (Devices)
	s_cmOuterCabinDoor : CM_SpeedDoor;
	s_cmInnerCabinDoor : CM_SpeedDoor;	
//++	s_cmCleanroomDoor : CM_DoorLock;
//------------------------------------------//


	


//------------------------------------------//

	
	//..

//------------------------------------------//
//Outputs
	//..

//------------------------------------------//

//Requests
	s_bReqOpenOuterDoor : BOOL := FALSE;
	s_bReqCloseOuterDoor : BOOL := FALSE;
	s_bReqOpenInnerDoor : BOOL := FALSE;
	s_bReqCloseInnerDoor : BOOL := FALSE;
//++	s_bReqReleaseCleanroomDoor : BOOL := FALSE;
//++	s_bReqLockCleanroomDoor : BOOL := FALSE;
	
	s_bOverruleInterlocks : BOOL := FALSE;

	//Commands
	//--s_bCmdHold : BOOL;
	
//Properties
	s_bStaOuterDoorOpened : BOOL := FALSE;
	s_bStaOuterDoorClosed : BOOL := FALSE;
	
	s_bStaInnerDoorOpened : BOOL := FALSE;
	s_bStaInnerDoorClosed : BOOL := FALSE;
	
//++	s_bStaCleanroomDoorOpened : BOOL := FALSE;
//++	s_bStaCleanroomDoorClosed : BOOL := FALSE;
//++	s_bStaCleanroomLockReleased : BOOL := FALSE;
//++	s_bStaCleanroomLockApplied : BOOL := FALSE;

//------------------------------------------//
//Params
//..
//------------------------------------------//

//------------------------------------------//
//Variables
	s_eSeqDoors : E_SeqDoors;
	s_fbSeqDoorsControl : FB_SeqControl;
	
	// Interlocks
	s_bIlckOuterDoorToClose 			: BOOL := TRUE;
	s_bIlckOuterDoorToOpen		 		: BOOL := TRUE;
	
	s_bIlckInnerDoorToClose 			: BOOL := TRUE;
	s_bIlckInnerDoorToOpen		 		: BOOL := TRUE;
	
//++	s_bIlckCleanroomDoorToLock 			: BOOL := TRUE;
//++	s_bIlckCleanroomDoorToRelease		: BOOL := TRUE;
	
//------------------------------------------//

//------------------------------------------//

//------------------------------------------//
//Alarms
	s_sReason : STRING;
	s_sMessage : STRING;
	s_fbAlarmHandlerCmdNotAllowed : FB_AlarmHandler;
	s_bErrCmdNotAllowed : BOOL;
	
//Warning	
	s_fbAlarmHandlerOuterDoorNoAllowedToOpen : FB_AlarmHandler;
	s_bWrnOuterDoorNoAllowedToOpen : BOOL;
	
	s_fbAlarmHandlerOuterDoorNoAllowedToClose : FB_AlarmHandler;
	s_bWrnOuterDoorNoAllowedToClose : BOOL;

	s_fbAlarmHandlerInnerDoorNoAllowedToOpen : FB_AlarmHandler;
	s_bWrnInnerDoorNoAllowedToOpen : BOOL;

	s_fbAlarmHandlerInnerDoorNoAllowedToClose : FB_AlarmHandler;
	s_bWrnInnerDoorNoAllowedToClose : BOOL;
	
//++	s_bWrnCleanroomDoorNoAllowedToRelease : BOOL;
//++	s_bWrnCleanroomDoorNoAllowedToLock : BOOL;

//++	s_fbAlarmHandlerCleanroomDoorNoAllowedToRelease : FB_AlarmHandler;
//++	s_fbAlarmHandlerCleanroomDoorNoAllowedToLock : FB_AlarmHandler;

	s_bStaWarning : BOOL;

//------------------------------------------//

//------------------------------------------//
//Hmi
	s_fbHmiBtnReset						: FB_HmiBtn;
	
	s_fbHmiBtnCloseOuterDoor		: FB_HmiBtn;
	s_fbHmiBtnOpenOuterDoor		: FB_HmiBtn;
	
	s_fbHmiBtnCloseInnerDoor		: FB_HmiBtn;
	s_fbHmiBtnOpenInnerDoor		: FB_HmiBtn;
	
//++	s_fbHmiBtnApplyLockCleanroomDoor	: FB_HmiBtn;
//++	s_fbHmiBtnReleaseLockCleanroomDoor	: FB_HmiBtn;
	
	s_fbHmiLedOuterDoorClosed			: FB_HmiLed;
	s_fbHmiLedOuterDoorOpened			: FB_HmiLed;
	
	s_fbHmiLedInnerDoorClosed			: FB_HmiLed;
	s_fbHmiLedInnerDoorOpened			: FB_HmiLed;
	
//++	s_fbHmiLedCleanDoorClosed			: FB_HmiLed;
//++	s_fbHmiLedCleanDoorOpened			: FB_HmiLed;
//++	s_fbHmiLedCleanroomDoorLocked		: FB_HmiLed;
//++	s_fbHmiLedCleanroomDoorReleased		: FB_HmiLed;
	
//------------------------------------------//

	{warning '#TODO' Het zou beter zijn om dit onder te brengen in de onderstaande control modules}
	s_bHmiForceOutputEnabled : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Folder Name="Base" Id="{86d48589-7e2d-40d8-97de-3d4db9988d9a}" />
    <Method Name="_m_Alarms" Id="{34703853-800b-4320-8e6c-49abce8785b7}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF
	
	s_fbAlarmHandlerOuterDoorNoAllowedToOpen(
		i_bStaActive := i_bReqEnable AND s_bWrnOuterDoorNoAllowedToOpen,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Outer Cabin Door Not Allowed To Open');
	
	s_fbAlarmHandlerOuterDoorNoAllowedToClose(
		i_bStaActive := i_bReqEnable AND s_bWrnOuterDoorNoAllowedToClose,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Outer Cabin Door Not Allowed To Close');
		
	s_fbAlarmHandlerInnerDoorNoAllowedToOpen(
		i_bStaActive := i_bReqEnable AND s_bWrnInnerDoorNoAllowedToOpen,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Inner Cabin Door Not Allowed To Open');
	
	s_fbAlarmHandlerInnerDoorNoAllowedToClose(
		i_bStaActive := i_bReqEnable AND s_bWrnInnerDoorNoAllowedToClose,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Inner Cabin Door Not Allowed To Close');
	
//++	s_fbAlarmHandlerCleanroomDoorNoAllowedToRelease(
//++		i_bStaActive := i_bReqEnable AND s_bWrnCleanroomDoorNoAllowedToRelease,
//++		i_eAlarmLevel := E_AlarmLevel.Warning,
//++		i_sAlarmText := 'Cleanroom Door Not Allowed To Release/Open');
	
//++	s_fbAlarmHandlerCleanroomDoorNoAllowedToLock(
//++		i_bStaActive := i_bReqEnable AND s_bWrnCleanroomDoorNoAllowedToLock,
//++		i_eAlarmLevel := E_AlarmLevel.Warning,
//++		i_sAlarmText := 'Cleanroom Door Not Allowed To Lock');
	
	//Reset error/warning bits
	IF i_bCmdReset THEN
		s_bWrnOuterDoorNoAllowedToOpen := FALSE;
		s_bWrnOuterDoorNoAllowedToClose := FALSE;
		s_bWrnInnerDoorNoAllowedToOpen := FALSE;
		s_bWrnInnerDoorNoAllowedToClose := FALSE;
//++		s_bWrnCleanroomDoorNoAllowedToRelease := FALSE;
//++		s_bWrnCleanroomDoorNoAllowedToLock := FALSE;
	END_IF

_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_AutomaticControl" Id="{700eca28-66ce-4dcb-9674-65c1f34a9bce}">
      <Declaration><![CDATA[METHOD PRIVATE _m_AutomaticControl : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Doros
_m_SeqDoors();

//Pallet Conveyor
//--_m_SeqTransport();
		
//Pallet Centering
//--centering functionality is build into the transport sequencer
//--_m_SeqCentering();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_CmdCloseInnerDoor" Id="{813bc456-e783-4657-8894-c3a4fdfe5bb3}">
      <Declaration><![CDATA[METHOD PRIVATE _m_CmdCloseInnerDoor : BOOL
VAR_INPUT
	i_refReason : REFERENCE TO STRING;
END_VAR
	]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF s_bIlckInnerDoorToClose THEN
	i_refReason := CONCAT('Cmd Close Inner Door: Interlocked - ', s_fbIlckHandlerInnerDoorClose.p_sReason);
	_m_CmdCloseInnerDoor := FALSE;
	s_bErrCmdNotAllowed := TRUE;
ELSE
	i_refReason := '-';
	_m_CmdCloseInnerDoor := TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_CmdCloseOuterDoor" Id="{8a8141a6-8be9-4396-8d1d-5c155e234201}">
      <Declaration><![CDATA[METHOD PRIVATE _m_CmdCloseOuterDoor : BOOL
VAR_INPUT
	i_refReason : REFERENCE TO STRING;
END_VAR
	]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF s_bIlckOuterDoorToClose THEN
	i_refReason := CONCAT('Cmd Close Outer Door: Interlocked - ', s_fbIlckHandlerOuterDoorClose.p_sReason);
	_m_CmdCloseOuterDoor := FALSE;
	s_bErrCmdNotAllowed := TRUE;
ELSE
	i_refReason := '-';
	_m_CmdCloseOuterDoor := TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_CmdOpenInnerDoor" Id="{0d49e8ec-6fae-45fa-a6a6-d8e844207ab7}">
      <Declaration><![CDATA[METHOD PRIVATE _m_CmdOpenInnerDoor : BOOL
VAR_INPUT
	i_refReason : REFERENCE TO STRING;
END_VAR
	]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF s_bIlckInnerDoorToOpen THEN
	i_refReason := CONCAT('Cmd Open Inner Door: Interlocked - ', s_fbIlckHandlerInnerDoorOpen.p_sReason);
	_m_CmdOpenInnerDoor := FALSE;
	s_bErrCmdNotAllowed := TRUE;
ELSE
	i_refReason := '-';
	_m_CmdOpenInnerDoor := TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_CmdOpenOuterDoor" Id="{8e78a8ed-2bf1-45ba-8b7a-bd326eec6a84}">
      <Declaration><![CDATA[METHOD PRIVATE _m_CmdOpenOuterDoor : BOOL
VAR_INPUT
	i_refReason : REFERENCE TO STRING;
END_VAR
	]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF s_bIlckOuterDoorToOpen THEN
	i_refReason := CONCAT('Cmd Open Outer Door: Interlocked - ', s_fbIlckHandlerOuterDoorOpen.p_sReason);
	_m_CmdOpenOuterDoor := FALSE;
	s_bErrCmdNotAllowed := TRUE;
ELSE
	i_refReason := '-';
	_m_CmdOpenOuterDoor := TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{c18c3403-a619-4da8-8c16-d38b3f2bd5db}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

s_cmOuterCabinDoor(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOpen := s_bIlckOuterDoorToOpen AND NOT(s_bOverruleInterlocks), 
	i_bIclkClose := s_bIlckOuterDoorToClose AND NOT(s_bOverruleInterlocks));

s_cmInnerCabinDoor(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOpen := s_bIlckInnerDoorToOpen AND NOT(s_bOverruleInterlocks), 
	i_bIclkClose := s_bIlckInnerDoorToClose AND NOT(s_bOverruleInterlocks));
	
//++s_cmCleanroomDoor(
//++	i_bReqEnable := i_bReqEnable,
//++	i_eCtrlMode := i_eCtrlMode,
//++	i_bCmdReset := i_bCmdReset);

//Statusses
s_bStaOuterDoorClosed := s_cmOuterCabinDoor.p_bStaIsClosed;
s_bStaOuterDoorOpened := s_cmOuterCabinDoor.p_bStaIsOpened;

s_bStaInnerDoorClosed := s_cmInnerCabinDoor.p_bStaIsClosed;
s_bStaInnerDoorOpened := s_cmInnerCabinDoor.p_bStaIsOpened;

//++s_bStaCleanroomLockApplied := s_cmCleanroomDoor.p_bStaLockIsApplied;
//++s_bStaCleanroomLockReleased := s_cmCleanroomDoor.p_bStaLockIsReleased;
//++s_bStaCleanroomDoorClosed := s_cmCleanroomDoor.p_bStaDoorIsClosed;
//++s_bStaCleanroomDoorOpened := NOT(s_cmCleanroomDoor.p_bStaDoorIsClosed);

s_bStaError := s_cmOuterCabinDoor.p_bStaError OR s_cmInnerCabinDoor.p_bStaError; (* OR s_cmCleanroomDoor.p_bStaError;*)
	
_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{06e9697b-07d7-4e29-8455-791381b5d99d}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnReset();
	
s_fbHmiBtnCloseOuterDoor();
s_fbHmiBtnOpenOuterDoor();

s_fbHmiBtnCloseInnerDoor();
s_fbHmiBtnOpenInnerDoor();
	
//++s_fbHmiBtnApplyLockCleanroomDoor();;
//++s_fbHmiBtnReleaseLockCleanroomDoor();

//Leds	
s_fbHmiLedOuterDoorClosed(i_bStaLed := s_bStaOuterDoorClosed);
s_fbHmiLedOuterDoorOpened(i_bStaLed := s_bStaOuterDoorOpened);

s_fbHmiLedInnerDoorClosed(i_bStaLed := s_bStaInnerDoorClosed);
s_fbHmiLedInnerDoorOpened(i_bStaLed := s_bStaInnerDoorOpened);
	
//++s_fbHmiLedCleanDoorClosed(i_bStaLed := s_bStaCleanroomDoorClosed);
//++s_fbHmiLedCleanDoorOpened(i_bStaLed := s_bStaCleanroomDoorOpened);
//++s_fbHmiLedCleanroomDoorLocked(i_bStaLed := s_bStaCleanroomLockApplied);
//++s_fbHmiLedCleanroomDoorReleased(i_bStaLed := s_bStaCleanroomLockReleased);

_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{f5588ebd-495a-4c31-a7f5-23415377d40e}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Control Modules
s_cmOuterCabinDoor.i_bReqEnable := FALSE;
s_cmOuterCabinDoor.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmOuterCabinDoor.i_sCmName := 'Outer Cabin Door';
s_cmOuterCabinDoor.i_stSettings.tDoorClosingTimeout := T#10S;
s_cmOuterCabinDoor.i_stSettings.tDoorOpeningTimeout := T#10S;
s_cmOuterCabinDoor.i_stSettings.tResetPulseDuration := T#1S;
s_cmOuterCabinDoor.p_sCfgOpenName := 'Open';
s_cmOuterCabinDoor.p_sCfgCloseName := 'Close';
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}

s_cmInnerCabinDoor.i_bReqEnable := FALSE;
s_cmInnerCabinDoor.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmInnerCabinDoor.i_sCmName := 'Inner Cabin Door';
s_cmInnerCabinDoor.i_stSettings.tDoorClosingTimeout := T#10S;
s_cmInnerCabinDoor.i_stSettings.tDoorOpeningTimeout := T#10S;
s_cmInnerCabinDoor.i_stSettings.tResetPulseDuration := T#1S;
s_cmInnerCabinDoor.p_sCfgOpenName := 'Open';
s_cmInnerCabinDoor.p_sCfgCloseName := 'Close';
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}
	
//++s_cmCleanroomDoor.i_bReqEnable := FALSE;
//++s_cmCleanroomDoor.i_eCtrlMode := E_CtrlMode.IDLE;
//++s_cmCleanroomDoor.i_sCmName := 'Cleanroom Door';
//++s_cmCleanroomDoor.i_stSettings.tApplyingLockTimeout := T#3S;
//++s_cmCleanroomDoor.i_stSettings.tReleasingLockTimeout := T#3S;
//++{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}

// Waarschijnlijk is het toch beter om de interlock uitsluited extern te verzamelen. 
// Denk bijvoorbeeld aan de situatie dat er een box gedocked is (outer door is dan open),
// de claenroom deur mag in die sitiuatie geopende worden

//Interlock strings
//Outer Cabin Door
//i_stInterlockList.arr_Interlocks[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerOuterDoorOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerOuterDoorOpen.i_stInterlockList.arr_Interlocks[2].sReason := 'Inner Cabin Door Not Closed';

//i_stInterlockList.arr_Interlocks[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerOuterDoorClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';

//Inner Cabin Door
//i_stInterlockList.arr_Interlocks[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerInnerDoorOpen.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';
s_fbIlckHandlerInnerDoorOpen.i_stInterlockList.arr_Interlocks[2].sReason := 'Outer Cabin Door Not Closed';

//i_stInterlockList.arr_Interlocks[0].sReason --> External, dynamical will be written in m_input
s_fbIlckHandlerInnerDoorClose.i_stInterlockList.arr_Interlocks[1].sReason := 'Utilities not OK';

//Alarm config
s_fbAlarmHandlerOuterDoorNoAllowedToOpen.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerOuterDoorNoAllowedToOpen.i_sAlarmText := 'Outer Cabin Door Not Allowed To Open';
s_fbAlarmHandlerOuterDoorNoAllowedToClose.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerOuterDoorNoAllowedToClose.i_sAlarmText := 'Outer Cabin Door Not Allowed To Close';
		
s_fbAlarmHandlerInnerDoorNoAllowedToOpen.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerInnerDoorNoAllowedToOpen.i_sAlarmText := 'Inner Cabin Door Not Allowed To Open';
s_fbAlarmHandlerInnerDoorNoAllowedToClose.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerInnerDoorNoAllowedToClose.i_sAlarmText := 'Inner Cabin Door Not Allowed To Close';
	
//Hmi
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	s_fbHmiBtnCloseOuterDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnCloseOuterDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnCloseOuterDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnCloseOuterDoor.p_sBtnText := 'Close Outer Cabin Door';
	
	s_fbHmiBtnOpenOuterDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnOpenOuterDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnOpenOuterDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnOpenOuterDoor.p_sBtnText := 'Open Outer Cabin Door';
	
	s_fbHmiBtnCloseInnerDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnCloseInnerDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnCloseInnerDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnCloseInnerDoor.p_sBtnText := 'Close Inner Cabin Door';
	
	s_fbHmiBtnOpenInnerDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnOpenInnerDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnOpenInnerDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnOpenInnerDoor.p_sBtnText := 'Open Inner Cabin Door';
	
//++	s_fbHmiBtnApplyLockCleanroomDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
//++	s_fbHmiBtnApplyLockCleanroomDoor.p_bStaVisible := FALSE;
//++	s_fbHmiBtnApplyLockCleanroomDoor.p_bStaEnabled := FALSE;		
//++	s_fbHmiBtnApplyLockCleanroomDoor.p_sBtnText := 'Lock Cleanroom Door';
	
//++	s_fbHmiBtnReleaseLockCleanroomDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
//++	s_fbHmiBtnReleaseLockCleanroomDoor.p_bStaVisible := FALSE;
//++	s_fbHmiBtnReleaseLockCleanroomDoor.p_bStaEnabled := FALSE;		
//++	s_fbHmiBtnReleaseLockCleanroomDoor.p_sBtnText := 'Release Cleanroom Door';

	s_fbHmiLedOuterDoorClosed.p_bStaVisible := FALSE;
	s_fbHmiLedOuterDoorClosed.p_sToHmiDescriptionLed := 'Outer Cabin Door Closed';
	
	s_fbHmiLedOuterDoorOpened.p_bStaVisible := FALSE;
	s_fbHmiLedOuterDoorOpened.p_sToHmiDescriptionLed := 'Outer Cabin Door Opened';
	
	s_fbHmiLedInnerDoorClosed.p_bStaVisible := FALSE;
	s_fbHmiLedInnerDoorClosed.p_sToHmiDescriptionLed := 'Inner Cabin Door Closed';
	
	s_fbHmiLedInnerDoorOpened.p_bStaVisible := FALSE;
	s_fbHmiLedInnerDoorOpened.p_sToHmiDescriptionLed := 'Inner Cabin Door Opened';
	
//++	s_fbHmiLedCleanDoorClosed.p_bStaVisible := FALSE;
//++	s_fbHmiLedCleanDoorClosed.p_sToHmiDescriptionLed := 'Cleanroom Door Closed';
	
//++	s_fbHmiLedCleanDoorOpened.p_bStaVisible := FALSE;
//++	s_fbHmiLedCleanDoorOpened.p_sToHmiDescriptionLed := 'Cleanroom Door Opened';
	
//++	s_fbHmiLedCleanroomDoorLocked.p_bStaVisible := FALSE;
//++	s_fbHmiLedCleanroomDoorLocked.p_sToHmiDescriptionLed := 'Cleanroom Door Locked';
	
//++	s_fbHmiLedCleanroomDoorReleased.p_bStaVisible := FALSE;
//++	s_fbHmiLedCleanroomDoorReleased.p_sToHmiDescriptionLed := 'Cleanroom Door Released';
 
_m_Init := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{08e3676c-19d2-4657-8762-4d7303d85c82}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

//Interlocks
_m_Interlocks();

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Interlocks" Id="{51f4e3fa-df87-40f1-9431-ce3e4a09f8d7}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Interlocks
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Outer Cabin Door
i_fbExtIlckOuterDoorOpen();
s_fbIlckHandlerOuterDoorOpen.i_stInterlockList.arr_Interlocks[0].bState := i_fbExtIlckOuterDoorOpen.p_bInterlocked;
s_fbIlckHandlerOuterDoorOpen.i_stInterlockList.arr_Interlocks[0].sReason := i_fbExtIlckOuterDoorOpen.p_sReason;
s_fbIlckHandlerOuterDoorOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerOuterDoorOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_cmInnerCabinDoor.p_bStaIsClosed) AND NOT(i_bStaInfeedSealed);
s_fbIlckHandlerOuterDoorOpen();

i_fbExtIlckOuterDoorClose();
s_fbIlckHandlerOuterDoorClose.i_stInterlockList.arr_Interlocks[0].bState := i_fbExtIlckOuterDoorClose.p_bInterlocked;
s_fbIlckHandlerOuterDoorClose.i_stInterlockList.arr_Interlocks[0].sReason := i_fbExtIlckOuterDoorClose.p_sReason;
s_fbIlckHandlerOuterDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerOuterDoorClose();

s_bIlckOuterDoorToOpen := s_fbIlckHandlerOuterDoorOpen.p_bInterlocked;
s_bIlckOuterDoorToClose := s_fbIlckHandlerOuterDoorClose.p_bInterlocked;

//Inner Cabin Door
i_fbExtIlckInnerDoorOpen();
s_fbIlckHandlerInnerDoorOpen.i_stInterlockList.arr_Interlocks[0].bState := i_fbExtIlckInnerDoorOpen.p_bInterlocked;
s_fbIlckHandlerInnerDoorOpen.i_stInterlockList.arr_Interlocks[0].sReason := i_fbExtIlckInnerDoorOpen.p_sReason;
s_fbIlckHandlerInnerDoorOpen.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerInnerDoorOpen.i_stInterlockList.arr_Interlocks[2].bState := NOT(s_cmOuterCabinDoor.p_bStaIsClosed) AND NOT(i_bStaInfeedSealed) ;
s_fbIlckHandlerInnerDoorOpen();

i_fbExtIlckInnerDoorClose();
s_fbIlckHandlerInnerDoorClose.i_stInterlockList.arr_Interlocks[0].bState := i_fbExtIlckInnerDoorClose.p_bInterlocked;
s_fbIlckHandlerInnerDoorClose.i_stInterlockList.arr_Interlocks[0].sReason := i_fbExtIlckInnerDoorClose.p_sReason;
s_fbIlckHandlerInnerDoorClose.i_stInterlockList.arr_Interlocks[1].bState := NOT(i_bReqEnable);
s_fbIlckHandlerInnerDoorClose();

s_bIlckInnerDoorToOpen := s_fbIlckHandlerInnerDoorOpen.p_bInterlocked;
s_bIlckInnerDoorToClose := s_fbIlckHandlerInnerDoorClose.p_bInterlocked;

//++s_bIlckCleanroomDoorToRelease := i_bIlckCleanroomDoorToRelease;
//++s_bIlckCleanroomDoorToLock := i_bIlckCleanroomDoorToLock;

//Reasons (own reason first: Cm->Em->Un)
//Outer Cabin Doors
IF s_bIlckOuterDoorToOpen THEN
	s_cmOuterCabinDoor.p_sInterlockedReasonOpen := s_fbIlckHandlerOuterDoorOpen.p_sReason;
ELSE
	s_cmOuterCabinDoor.p_sInterlockedReasonOpen := '-';
END_IF

IF s_bIlckOuterDoorToClose THEN
	s_cmOuterCabinDoor.p_sInterlockedReasonClose := s_fbIlckHandlerOuterDoorClose.p_sReason;
ELSE
	s_cmOuterCabinDoor.p_sInterlockedReasonClose := '-';
END_IF

//Inner Cabin Doors
IF s_bIlckInnerDoorToOpen THEN
	s_cmInnerCabinDoor.p_sInterlockedReasonOpen := s_fbIlckHandlerInnerDoorOpen.p_sReason;
ELSE
	s_cmInnerCabinDoor.p_sInterlockedReasonOpen := '-';
END_IF

IF s_bIlckInnerDoorToClose THEN
	s_cmInnerCabinDoor.p_sInterlockedReasonClose := s_fbIlckHandlerInnerDoorClose.p_sReason;
ELSE
	s_cmInnerCabinDoor.p_sInterlockedReasonClose := '-';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{f763b42e-2a14-49e4-aeec-3b4dc606af2b}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Params" Id="{02936153-be53-403e-812d-8d9a77c13756}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Params : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Params() THEN
	RETURN;
END_IF

_m_Params := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_SeqDoors" Id="{d716563e-6be4-40f5-879d-a7064d9a5631}">
      <Declaration><![CDATA[METHOD PRIVATE _m_SeqDoors : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_fbSeqDoorsControl(
	i_nSeqStep := s_eSeqDoors, 
	i_sStepName := TO_STRING(s_eSeqDoors), 
	i_bCmdReset := i_bCmdReset
					AND (s_eSeqDoors = E_SeqTransport.ERROR) // Only reset/resume sequencer from ERROR state
					AND NOT(s_cmOuterCabinDoor.p_bStaError)
					AND NOT(s_cmInnerCabinDoor.p_bStaError)
					AND i_bReqEnable, 
	i_bStaError := s_bStaError OR NOT(i_bReqEnable));

//Abort operation (go to stop)
IF (i_eCtrlState = E_CtrlState.STOPPING) THEN
	s_eSeqDoors := E_SeqDoors.STOP;
END_IF	
	
CASE s_eSeqDoors OF
	
	E_SeqTransport.IDLE:
		IF (i_eCtrlState = E_CtrlState.IDLE) THEN
			s_eSeqDoors := E_SeqDoors.START;
		END_IF

//START////////////////////////////////////////////////////////////////////////////////////////////			
	E_SeqTransport.START:
		IF s_fbSeqDoorsControl.q_bStaEntry THEN
			s_cmOuterCabinDoor.m_Stop();
			s_cmInnerCabinDoor.m_Stop();
			//--s_bCmdHold := FALSE;
			s_sMessage := '***';
		END_IF		
	
		IF i_eCtrlState = E_CtrlState.RUNNING THEN
			s_eSeqDoors := E_SeqDoors.READY;
		END_IF

//READY////////////////////////////////////////////////////////////////////////////////////////////		
	E_SeqTransport.READY:
		IF s_fbSeqDoorsControl.q_bStaEntry THEN
			;
		END_IF
		
		IF i_eCtrlState <> E_CtrlState.RUNNING THEN
			s_eSeqDoors := E_SeqTransport.START;
		END_IF
		
		IF s_bReqOpenOuterDoor THEN

			IF _m_CmdOpenOuterDoor(i_refReason := s_sMessage) THEN
				s_eSeqDoors := E_SeqDoors.OPEN_OUTER_DOOR;
			ELSE //If failed (command not allowed): the message will be written with the interlock reason
				;
			END_IF

//--			s_bReqOpenOuterDoor := FALSE;
			
		ELSIF s_bReqCloseOuterDoor THEN

			IF _m_CmdCloseOuterDoor(i_refReason := s_sMessage) THEN
				s_eSeqDoors := E_SeqDoors.CLOSE_OUTER_DOOR;
			ELSE //If failed (command not allowed): the message will be written with the interlock reason
				//--s_bCmdHold := TRUE;
				//--s_bErrCmdNotAllowed := TRUE;
				;
			END_IF

//--			s_bReqCloseOuterDoor := FALSE;	
			
		ELSIF s_bReqOpenInnerDoor THEN

			IF _m_CmdOpenInnerDoor(i_refReason := s_sMessage) THEN
				s_eSeqDoors := E_SeqDoors.OPEN_INNER_DOOR;
			ELSE //If failed (command not allowed): the message will be written with the interlock reason
				//--s_bCmdHold := TRUE;
				//--s_bErrCmdNotAllowed := TRUE;
				;
			END_IF

//--			s_bReqOpenInnerDoor := FALSE;
			
		ELSIF s_bReqCloseInnerDoor THEN

			IF _m_CmdCloseInnerDoor(i_refReason := s_sMessage) THEN
				s_eSeqDoors := E_SeqDoors.CLOSE_INNER_DOOR;
			ELSE //If failed (command not allowed): the message will be written with the interlock reason
				//--s_bCmdHold := TRUE;
				//--s_bErrCmdNotAllowed := TRUE;
				;
			END_IF

//--			s_bReqCloseInnerDoor := FALSE;
		
		END_IF

//OPEN_OUTER_DOOR//////////////////////////////////////////////////////////////////////////////////		
	E_SeqDoors.OPEN_OUTER_DOOR:
		IF s_fbSeqDoorsControl.q_bStaEntry THEN
			s_cmOuterCabinDoor.m_Open();		
		END_IF
		
		IF s_cmOuterCabinDoor.p_bStaIsOpened THEN
			s_eSeqDoors := E_SeqDoors.READY;
		//ELSE 
			//In case of error, fb sequener will force to ERROR --> reset --> START
		END_IF
		
//CLOSE_OUTER_DOOR//////////////////////////////////////////////////////////////////////////////////		
	E_SeqDoors.CLOSE_OUTER_DOOR:
		IF s_fbSeqDoorsControl.q_bStaEntry THEN
			s_cmOuterCabinDoor.m_Close();		
		END_IF
		
		IF s_cmOuterCabinDoor.p_bStaIsClosed THEN
			s_eSeqDoors := E_SeqDoors.READY;
		//ELSE 
			//In case of error, fb sequener will force to ERROR --> reset --> START
		END_IF

//OPEN_INNER_DOOR//////////////////////////////////////////////////////////////////////////////////		
	E_SeqDoors.OPEN_INNER_DOOR:
		IF s_fbSeqDoorsControl.q_bStaEntry THEN
			s_cmInnerCabinDoor.m_Open();		
		END_IF
		
		IF s_cmInnerCabinDoor.p_bStaIsOpened THEN
			s_eSeqDoors := E_SeqDoors.READY;
		//ELSE 
			//In case of error, fb sequener will force to ERROR --> reset --> START
		END_IF

//CLOSE_INNER_DOOR//////////////////////////////////////////////////////////////////////////////////		
	E_SeqDoors.CLOSE_INNER_DOOR:
		IF s_fbSeqDoorsControl.q_bStaEntry THEN
			s_cmInnerCabinDoor.m_Close();		
		END_IF
		
		IF s_cmInnerCabinDoor.p_bStaIsClosed THEN
			s_eSeqDoors := E_SeqDoors.READY;
		//ELSE 
			//In case of error, fb sequener will force to ERROR --> reset --> START
		END_IF		

//STOP		
	E_SeqDoors.STOP:
		IF s_fbSeqDoorsControl.q_bStaEntry THEN
			s_cmOuterCabinDoor.m_Stop();
			s_cmInnerCabinDoor.m_Stop();
		END_IF
		
		s_eSeqDoors := E_SeqDoors.READY;
		
	E_SeqDoors.ERROR:
		s_cmOuterCabinDoor.m_Stop();
		s_cmInnerCabinDoor.m_Stop();
		
		//returs to START via FbSeqControl
		
END_CASE

s_bReqOpenOuterDoor := FALSE;
s_bReqCloseOuterDoor := FALSE;
s_bReqOpenInnerDoor := FALSE;
s_bReqCloseInnerDoor := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ApplyLockCleanroomDoor" Id="{4499f858-1c66-4e87-af48-eca8a833d6ae}">
      <Declaration><![CDATA[METHOD PUBLIC m_ApplyLockCleanroomDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(FALSE) THEN
	s_bReqOpenOuterDoor := FALSE;
	s_bReqCloseOuterDoor := FALSE;
	s_bReqReleaseCleanroomDoor := FALSE;
	s_bReqLockCleanroomDoor := TRUE;
	
	m_ApplyLockCleanroomDoor := TRUE;
	
ELSE
	s_bWrnCleanroomDoorNoAllowedToLock := TRUE;
	
	m_ApplyLockCleanroomDoor := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{c1559ad6-cc3e-4059-9eff-299ddfbeac7b}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

CASE i_eCtrlMode OF

	E_CtrlMode.IDLE:
		s_eSeqDoors := E_SeqDoors.IDLE;
	
	E_CtrlMode.AUTOMATIC:
		//Automatic commands are controlled by higher-layer unit
		_m_AutomaticControl();
	
	E_CtrlMode.MANUAL:
		//Manual commands (convert HMI buttons to requests), only in state running
		IF (i_eCtrlState = E_CtrlState.RUNNING) THEN
			s_bReqOpenOuterDoor := s_fbHmiBtnOpenOuterDoor.p_osrBtnPress;
			s_bReqCloseOuterDoor := s_fbHmiBtnCloseOuterDoor.p_osrBtnPress;
			s_bReqOpenInnerDoor := s_fbHmiBtnOpenInnerDoor.p_osrBtnPress;
			s_bReqCloseInnerDoor := s_fbHmiBtnCloseInnerDoor.p_osrBtnPress;
		END_IF	
		
		_m_AutomaticControl();
		
	E_CtrlMode.MAINTENANCE:
		//Execute maintenance control (HMI control module buttons)
		s_eSeqDoors := E_SeqDoors.IDLE;
		; 	//Maintenance control is implemented in lower-layer control modules
		
	E_CtrlMode.IO:
		//Execute IO-test control (HMI output force control)
		; 	//IO-Test control is implemented in lower-layer control modules
			//Enabling control is done direcly under this case instruction
		
	E_CtrlMode.CLEANING:
		//Execute cleaning control (cleaning  specific functionalities)
		;	//Cleaning control is not implemented, this could be a done in the future if neccesary
			
END_CASE

//AUTOMATIC-mode //////////////////////////////////////////////////////////////////////////////////

//MANUAL-mode /////////////////////////////////////////////////////////////////////////////////////

//Buttons visibility
IF (i_eCtrlMode = E_CtrlMode.MANUAL) THEN
	s_fbHmiBtnCloseOuterDoor.p_bStaVisible := TRUE;
	s_fbHmiBtnOpenOuterDoor.p_bStaVisible := TRUE;
	s_fbHmiBtnCloseInnerDoor.p_bStaVisible := TRUE;
	s_fbHmiBtnOpenInnerDoor.p_bStaVisible := TRUE;
ELSE
	s_fbHmiBtnCloseOuterDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnOpenOuterDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnCloseInnerDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnOpenInnerDoor.p_bStaVisible := FALSE;
END_IF

//Buttons enabling
IF i_bReqEnable AND (i_eCtrlMode = E_CtrlMode.MANUAL) AND (i_eCtrlState = E_CtrlState.RUNNING) THEN

	//Outer Cabin Door
	s_fbHmiBtnCloseOuterDoor.p_bStaEnabled := 
		NOT(s_bIlckOuterDoorToClose);

	s_fbHmiBtnOpenOuterDoor.p_bStaEnabled :=
		NOT(s_bIlckOuterDoorToOpen);
	
	//Inner Cabin Door
	s_fbHmiBtnCloseInnerDoor.p_bStaEnabled := 
		NOT(s_bIlckInnerDoorToClose);

	s_fbHmiBtnOpenInnerDoor.p_bStaEnabled :=
		NOT(s_bIlckInnerDoorToOpen);

ELSE
	s_fbHmiBtnCloseOuterDoor.p_bStaEnabled := FALSE;
	s_fbHmiBtnOpenOuterDoor.p_bStaEnabled := FALSE;
	s_fbHmiBtnCloseInnerDoor.p_bStaEnabled := FALSE;
	s_fbHmiBtnOpenInnerDoor.p_bStaEnabled := FALSE;
END_IF

//MAINTENANCE-mode ////////////////////////////////////////////////////////////////////////////////

//Stopping control modules
IF (i_eCtrlMode = E_CtrlMode.MAINTENANCE) AND (i_eCtrlState = E_CtrlState.STOPPING) THEN 
	s_cmOuterCabinDoor.m_Stop();
	s_cmInnerCabinDoor.m_Stop();
END_IF

//IO-mode /////////////////////////////////////////////////////////////////////////////////////////
IF (i_eCtrlMode = E_CtrlMode.IO) AND (i_eCtrlState = E_CtrlState.RUNNING) THEN
	s_bHmiForceOutputEnabled := TRUE;
ELSE
	s_bHmiForceOutputEnabled := FALSE;
END_IF

m_Main := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReleaseLockCleanroomDoor" Id="{145de249-cc49-4a2e-a93a-16f786c2ecb4}">
      <Declaration><![CDATA[METHOD PUBLIC m_ReleaseLockCleanroomDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(s_bIlckCleanroomDoorToLock) THEN
	s_bReqOpenOuterDoor := FALSE;
	s_bReqCloseOuterDoor := FALSE;
	s_bReqReleaseCleanroomDoor := TRUE;
	s_bReqLockCleanroomDoor := FALSE;
	
	m_ReleaseLockCleanroomDoor := TRUE;
ELSE
	
	s_bWrnCleanroomDoorNoAllowedToRelease := TRUE;
	
	m_ReleaseLockCleanroomDoor := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReqCloseInnerDoor" Id="{8b9659e3-9892-4336-a3c2-49b887b841ee}">
      <Declaration><![CDATA[METHOD PUBLIC m_ReqCloseInnerDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqCloseInnerDoor := TRUE;

m_ReqCloseInnerDoor := TRUE;

(*--
IF NOT(s_bIlckInnerDoorToClose) THEN
	s_bReqOpenOuterDoor := FALSE;
	s_bReqCloseOuterDoor := FALSE;
	s_bReqOpenInnerDoor := FALSE;
	s_bReqCloseInnerDoor := TRUE;
//++	s_bReqReleaseCleanroomDoor := FALSE;
//++	s_bReqLockCleanroomDoor := FALSE;
	
	m_ReqCloseInnerDoor := TRUE;
	
ELSE
	s_bWrnInnerDoorNoAllowedToClose := TRUE;
	
	m_ReqCloseInnerDoor := FALSE;
END_IF
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReqCloseOuterDoor" Id="{9c407a35-74a6-401d-8a18-b21be8c2d1a1}">
      <Declaration><![CDATA[METHOD PUBLIC m_ReqCloseOuterDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqCloseOuterDoor := TRUE;

m_ReqCloseOuterDoor := TRUE;

(*--
IF NOT(s_bIlckOuterDoorToClose) THEN
	s_bReqOpenOuterDoor := FALSE;
	s_bReqCloseOuterDoor := TRUE;
	s_bReqOpenInnerDoor := FALSE;
	s_bReqCloseInnerDoor := FALSE;
//++	s_bReqReleaseCleanroomDoor := FALSE;
//++	s_bReqLockCleanroomDoor := FALSE;
	
	m_ReqCloseOuterDoor := TRUE;
	
ELSE
	s_bWrnOuterDoorNoAllowedToClose := TRUE;
	
	m_ReqCloseOuterDoor := FALSE;
END_IF
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReqOpenInnerDoor" Id="{574f8d3a-fdc9-465e-913e-843f784f0e6e}">
      <Declaration><![CDATA[METHOD PUBLIC m_ReqOpenInnerDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqOpenInnerDoor := TRUE;

m_ReqOpenInnerDoor := TRUE;

(*--
IF NOT(s_bIlckInnerDoorToOpen) THEN
	s_bReqOpenOuterDoor := FALSE;
	s_bReqCloseOuterDoor := FALSE;
	s_bReqOpenInnerDoor := TRUE;
	s_bReqCloseInnerDoor := FALSE;
//++	s_bReqReleaseCleanroomDoor := FALSE;
//++	s_bReqLockCleanroomDoor := FALSE;
	
	m_ReqOpenInnerDoor := TRUE;
ELSE
	
	s_bWrnInnerDoorNoAllowedToOpen := TRUE;
	
	m_ReqOpenInnerDoor := FALSE;
END_IF	
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReqOpenOuterDoor" Id="{cacb32c9-2f39-45b3-a10f-fdd38f341162}">
      <Declaration><![CDATA[METHOD PUBLIC m_ReqOpenOuterDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqOpenOuterDoor := TRUE;

m_ReqOpenOuterDoor := TRUE;

(*--
IF NOT(s_bIlckOuterDoorToOpen) THEN
	s_bReqOpenOuterDoor := TRUE;
	s_bReqCloseOuterDoor := FALSE;
	s_bReqOpenInnerDoor := FALSE;
	s_bReqCloseInnerDoor := FALSE;
//++	s_bReqReleaseCleanroomDoor := FALSE;
//++	s_bReqLockCleanroomDoor := FALSE;
	
	m_ReqOpenOuterDoor := TRUE;
ELSE
	
	s_bWrnOuterDoorNoAllowedToOpen := TRUE;
	
	m_ReqOpenOuterDoor := FALSE;
END_IF	
*)]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bStaCleanroomDoorClosed" Id="{3e867690-16e1-4e81-ad03-19ccedfb22c2}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaCleanroomDoorClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{9548d166-8d83-4477-b001-d95261ddbc06}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaCleanroomDoorClosed := s_bStaCleanroomDoorClosed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaCleanroomDoorOpened" Id="{bb117a50-1725-4cdb-9157-fc2597312e4e}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaCleanroomDoorOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{e91b025b-dae0-4ea7-97b1-57ee28a26a9b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaCleanroomDoorOpened := s_bStaCleanroomDoorOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaCleanroomLockApplied" Id="{e6feb3e3-3717-426d-b652-dbbaa9ba0f43}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaCleanroomLockApplied : BOOL]]></Declaration>
      <Get Name="Get" Id="{0d6adf81-f180-40fd-b901-f0c227800da7}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaCleanroomLockApplied := s_bStaCleanroomLockApplied;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaCleanroomLockReleased" Id="{a2b1d59d-5e34-4c2d-b724-72237d669c65}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaCleanroomLockReleased : BOOL]]></Declaration>
      <Get Name="Get" Id="{8ba433c5-2593-4dbc-a0e7-7b9acd8e39d7}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaCleanroomLockReleased := s_bStaCleanroomLockReleased;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaInnerDoorClosed" Id="{e820ef87-a935-4e5a-9f4e-74f710eeaa35}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaInnerDoorClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{723740c9-5feb-4d12-ae81-508dbaf06682}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaInnerDoorClosed := s_bStaInnerDoorClosed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaInnerDoorOpened" Id="{fd770672-09bf-4052-b33b-9e8aaacab69c}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaInnerDoorOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{cd7d4a09-3f8f-4815-907b-09d35b18097b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaInnerDoorOpened := s_bStaInnerDoorOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaOuterDoorClosed" Id="{e8474055-2ea6-4b59-a386-3fcee4ae9262}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaOuterDoorClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{38689063-15e9-462f-9650-3e7d7a523f33}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaOuterDoorClosed := s_bStaOuterDoorClosed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaOuterDoorOpened" Id="{bc66e39f-ee2c-4f79-9694-10ac484efe5a}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaOuterDoorOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{d7cea33e-5fa5-438f-8145-a6950abb53e6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaOuterDoorOpened := s_bStaOuterDoorOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaReady" Id="{6d80e77c-9c68-4a12-b235-99de416ee985}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaReady : BOOL]]></Declaration>
      <Get Name="Get" Id="{ce2aa158-fba6-44ce-a41e-0f93cd362f98}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaReady := (s_eSeqDoors = E_SeqDoors.READY);
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="EM_Doors">
      <LineId Id="221" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="222" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Alarms">
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="32" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="7" />
      <LineId Id="58" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="2" />
      <LineId Id="45" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="52" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="67" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_AutomaticControl">
      <LineId Id="483" Count="2" />
      <LineId Id="473" Count="4" />
      <LineId Id="481" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="479" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_CmdCloseInnerDoor">
      <LineId Id="169" Count="0" />
      <LineId Id="156" Count="6" />
      <LineId Id="170" Count="0" />
      <LineId Id="164" Count="3" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_CmdCloseOuterDoor">
      <LineId Id="169" Count="0" />
      <LineId Id="156" Count="11" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_CmdOpenInnerDoor">
      <LineId Id="169" Count="0" />
      <LineId Id="156" Count="6" />
      <LineId Id="170" Count="0" />
      <LineId Id="164" Count="3" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_CmdOpenOuterDoor">
      <LineId Id="169" Count="0" />
      <LineId Id="156" Count="11" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Devices">
      <LineId Id="127" Count="0" />
      <LineId Id="96" Count="2" />
      <LineId Id="128" Count="0" />
      <LineId Id="130" Count="2" />
      <LineId Id="144" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="146" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="135" Count="2" />
      <LineId Id="145" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="148" Count="1" />
      <LineId Id="134" Count="0" />
      <LineId Id="100" Count="2" />
      <LineId Id="124" Count="0" />
      <LineId Id="111" Count="3" />
      <LineId Id="140" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="115" Count="3" />
      <LineId Id="142" Count="0" />
      <LineId Id="119" Count="2" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Hmi">
      <LineId Id="222" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="199" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="248" Count="3" />
      <LineId Id="265" Count="1" />
      <LineId Id="264" Count="0" />
      <LineId Id="252" Count="2" />
      <LineId Id="262" Count="0" />
      <LineId Id="255" Count="2" />
      <LineId Id="268" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="258" Count="3" />
      <LineId Id="247" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="224" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Init">
      <LineId Id="203" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="297" Count="0" />
      <LineId Id="209" Count="5" />
      <LineId Id="225" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="320" Count="6" />
      <LineId Id="358" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="216" Count="6" />
      <LineId Id="362" Count="1" />
      <LineId Id="365" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="359" Count="1" />
      <LineId Id="369" Count="1" />
      <LineId Id="375" Count="0" />
      <LineId Id="372" Count="2" />
      <LineId Id="377" Count="0" />
      <LineId Id="383" Count="5" />
      <LineId Id="378" Count="0" />
      <LineId Id="389" Count="1" />
      <LineId Id="393" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="405" Count="1" />
      <LineId Id="410" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="239" Count="2" />
      <LineId Id="238" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="243" Count="2" />
      <LineId Id="242" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="247" Count="2" />
      <LineId Id="246" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="329" Count="7" />
      <LineId Id="327" Count="1" />
      <LineId Id="251" Count="2" />
      <LineId Id="250" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="255" Count="2" />
      <LineId Id="254" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="273" Count="2" />
      <LineId Id="269" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="339" Count="3" />
      <LineId Id="338" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="278" Count="10" />
      <LineId Id="226" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Inputs">
      <LineId Id="46" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="63" Count="1" />
      <LineId Id="158" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Interlocks">
      <LineId Id="46" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="125" Count="3" />
      <LineId Id="124" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="134" Count="10" />
      <LineId Id="130" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="88" Count="5" />
      <LineId Id="87" Count="0" />
      <LineId Id="95" Count="4" />
      <LineId Id="94" Count="0" />
      <LineId Id="101" Count="11" />
      <LineId Id="100" Count="0" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Outputs">
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Params">
      <LineId Id="291" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="292" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_SeqDoors">
      <LineId Id="1808" Count="0" />
      <LineId Id="1632" Count="8" />
      <LineId Id="1921" Count="0" />
      <LineId Id="1813" Count="0" />
      <LineId Id="1815" Count="1" />
      <LineId Id="1641" Count="0" />
      <LineId Id="1814" Count="0" />
      <LineId Id="1642" Count="2" />
      <LineId Id="1809" Count="2" />
      <LineId Id="1966" Count="0" />
      <LineId Id="1812" Count="0" />
      <LineId Id="1649" Count="0" />
      <LineId Id="1654" Count="1" />
      <LineId Id="1965" Count="0" />
      <LineId Id="1912" Count="0" />
      <LineId Id="1920" Count="0" />
      <LineId Id="1656" Count="1" />
      <LineId Id="1901" Count="1" />
      <LineId Id="1660" Count="0" />
      <LineId Id="1967" Count="0" />
      <LineId Id="1661" Count="2" />
      <LineId Id="1983" Count="0" />
      <LineId Id="1666" Count="1" />
      <LineId Id="1906" Count="1" />
      <LineId Id="1904" Count="1" />
      <LineId Id="1797" Count="0" />
      <LineId Id="1986" Count="0" />
      <LineId Id="1671" Count="2" />
      <LineId Id="1917" Count="0" />
      <LineId Id="1676" Count="0" />
      <LineId Id="1987" Count="0" />
      <LineId Id="1678" Count="0" />
      <LineId Id="1988" Count="0" />
      <LineId Id="1990" Count="9" />
      <LineId Id="1989" Count="0" />
      <LineId Id="2000" Count="0" />
      <LineId Id="2002" Count="21" />
      <LineId Id="2001" Count="0" />
      <LineId Id="2071" Count="1" />
      <LineId Id="1962" Count="0" />
      <LineId Id="1716" Count="2" />
      <LineId Id="2024" Count="0" />
      <LineId Id="1721" Count="1" />
      <LineId Id="2025" Count="0" />
      <LineId Id="2027" Count="0" />
      <LineId Id="2029" Count="1" />
      <LineId Id="2028" Count="0" />
      <LineId Id="2031" Count="0" />
      <LineId Id="2033" Count="9" />
      <LineId Id="2032" Count="0" />
      <LineId Id="2044" Count="10" />
      <LineId Id="2043" Count="0" />
      <LineId Id="2056" Count="10" />
      <LineId Id="2055" Count="0" />
      <LineId Id="1963" Count="0" />
      <LineId Id="1777" Count="3" />
      <LineId Id="2067" Count="0" />
      <LineId Id="1781" Count="1" />
      <LineId Id="2069" Count="0" />
      <LineId Id="1786" Count="2" />
      <LineId Id="2070" Count="0" />
      <LineId Id="1789" Count="0" />
      <LineId Id="2074" Count="0" />
      <LineId Id="2073" Count="0" />
      <LineId Id="1790" Count="0" />
      <LineId Id="2075" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="2076" Count="2" />
    </LineIds>
    <LineIds Name="EM_Doors.m_ApplyLockCleanroomDoor">
      <LineId Id="182" Count="4" />
      <LineId Id="195" Count="0" />
      <LineId Id="212" Count="2" />
      <LineId Id="210" Count="0" />
      <LineId Id="217" Count="1" />
      <LineId Id="221" Count="0" />
      <LineId Id="215" Count="1" />
      <LineId Id="220" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_Main">
      <LineId Id="330" Count="0" />
      <LineId Id="186" Count="2" />
      <LineId Id="511" Count="0" />
      <LineId Id="516" Count="6" />
      <LineId Id="715" Count="0" />
      <LineId Id="585" Count="1" />
      <LineId Id="730" Count="2" />
      <LineId Id="743" Count="0" />
      <LineId Id="734" Count="0" />
      <LineId Id="744" Count="0" />
      <LineId Id="741" Count="1" />
      <LineId Id="512" Count="0" />
      <LineId Id="745" Count="0" />
      <LineId Id="747" Count="1" />
      <LineId Id="750" Count="0" />
      <LineId Id="752" Count="0" />
      <LineId Id="754" Count="4" />
      <LineId Id="763" Count="3" />
      <LineId Id="746" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="712" Count="0" />
      <LineId Id="597" Count="3" />
      <LineId Id="674" Count="1" />
      <LineId Id="677" Count="0" />
      <LineId Id="672" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="678" Count="2" />
      <LineId Id="609" Count="4" />
      <LineId Id="681" Count="1" />
      <LineId Id="688" Count="0" />
      <LineId Id="692" Count="1" />
      <LineId Id="689" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="690" Count="0" />
      <LineId Id="686" Count="0" />
      <LineId Id="695" Count="3" />
      <LineId Id="683" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="642" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="708" Count="0" />
      <LineId Id="711" Count="0" />
      <LineId Id="647" Count="5" />
      <LineId Id="670" Count="1" />
      <LineId Id="654" Count="0" />
      <LineId Id="669" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="657" Count="1" />
      <LineId Id="660" Count="1" />
      <LineId Id="663" Count="1" />
      <LineId Id="593" Count="0" />
      <LineId Id="592" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_ReleaseLockCleanroomDoor">
      <LineId Id="182" Count="3" />
      <LineId Id="195" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="209" Count="2" />
      <LineId Id="201" Count="7" />
      <LineId Id="196" Count="0" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_ReqCloseInnerDoor">
      <LineId Id="182" Count="3" />
      <LineId Id="229" Count="5" />
      <LineId Id="196" Count="0" />
      <LineId Id="217" Count="1" />
      <LineId Id="226" Count="1" />
      <LineId Id="219" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="203" Count="1" />
      <LineId Id="223" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_ReqCloseOuterDoor">
      <LineId Id="182" Count="3" />
      <LineId Id="229" Count="4" />
      <LineId Id="195" Count="1" />
      <LineId Id="217" Count="1" />
      <LineId Id="226" Count="1" />
      <LineId Id="219" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="203" Count="1" />
      <LineId Id="223" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_ReqOpenInnerDoor">
      <LineId Id="182" Count="0" />
      <LineId Id="237" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="275" Count="2" />
      <LineId Id="245" Count="1" />
      <LineId Id="265" Count="1" />
      <LineId Id="270" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="250" Count="3" />
      <LineId Id="268" Count="0" />
      <LineId Id="254" Count="3" />
      <LineId Id="242" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_ReqOpenOuterDoor">
      <LineId Id="182" Count="0" />
      <LineId Id="237" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="273" Count="4" />
      <LineId Id="245" Count="1" />
      <LineId Id="265" Count="1" />
      <LineId Id="270" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="250" Count="3" />
      <LineId Id="268" Count="0" />
      <LineId Id="254" Count="3" />
      <LineId Id="242" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaCleanroomDoorClosed.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaCleanroomDoorOpened.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaCleanroomLockApplied.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaCleanroomLockReleased.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaInnerDoorClosed.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaInnerDoorOpened.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaOuterDoorClosed.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaOuterDoorOpened.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaReady.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>