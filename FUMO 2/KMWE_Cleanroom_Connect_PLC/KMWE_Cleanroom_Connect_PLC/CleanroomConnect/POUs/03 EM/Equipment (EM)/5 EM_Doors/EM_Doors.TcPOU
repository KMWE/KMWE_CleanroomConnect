<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_Doors" Id="{0ea26ddd-052a-4260-bfaf-0daade60103a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_Doors EXTENDS EM_Base //??IMPLEMENTS I_EM_DOORS
VAR CONSTANT 
	c_nResultDataSize : UINT := 20;
END_VAR

VAR_INPUT
//Inputs
	i_stSettings : ST_SettingsDoors;
		
	i_bIlckOuterSpeedDoorToClose : BOOL; //TRUE = Interlocked
	i_bIlckOuterSpeedDoorToOpen : BOOL; //TRUE = Interlocked
	i_bIlckInnerSpeedDoorToClose : BOOL; //TRUE = Interlocked
	i_bIlckInnerSpeedDoorToOpen : BOOL; //TRUE = Interlocked
//++	i_bIlckCleanroomDoorToLock : BOOL; //TRUE = Interlocked
//++	i_bIlckCleanroomDoorToRelease : BOOL; //TRUE = Interlocked	

	i_ref_objCarrier : REFERENCE TO OBJ_Carrier;
	
	i_eCtrlState : E_CtrlState;
END_VAR

VAR_OUTPUT
	q_bStaWarning : BOOL;
END_VAR

VAR
//------------------------------------------//
//Control Modules (Devices)
	s_cmOuterSpeedDoor : CM_SpeedDoor;
	s_cmInnerSpeedDoor : CM_SpeedDoor;	
//++	s_cmCleanroomDoor : CM_DoorLock;
//------------------------------------------//

//------------------------------------------//

	
	//..

//------------------------------------------//
//Outputs
	//..

//------------------------------------------//

//Requests
	s_bReqOpenOuterSpeedDoor : BOOL := FALSE;
	s_bReqCloseOuterSpeedDoor : BOOL := FALSE;
	s_bReqOpenInnerSpeedDoor : BOOL := FALSE;
	s_bReqCloseInnerSpeedDoor : BOOL := FALSE;
//++	s_bReqReleaseCleanroomDoor : BOOL := FALSE;
//++	s_bReqLockCleanroomDoor : BOOL := FALSE;
	
//Properties
	s_bStaOuterSpeedDoorOpened : BOOL := FALSE;
	s_bStaOuterSpeedDoorClosed : BOOL := FALSE;
	
	s_bStaInnerSpeedDoorOpened : BOOL := FALSE;
	s_bStaInnerSpeedDoorClosed : BOOL := FALSE;
	
//++	s_bStaCleanroomDoorOpened : BOOL := FALSE;
//++	s_bStaCleanroomDoorClosed : BOOL := FALSE;
//++	s_bStaCleanroomLockReleased : BOOL := FALSE;
//++	s_bStaCleanroomLockApplied : BOOL := FALSE;

//------------------------------------------//
//Params
//..
//------------------------------------------//

//------------------------------------------//
//Variables
	s_eSeqDoors : E_SeqDoors;
	s_fbSeqDoors : FB_SeqControl;
	
	// Interlocks
	s_bIlckOuterSpeedDoorToClose 			: BOOL := TRUE;
	s_bIlckOuterSpeedDoorToOpen		 		: BOOL := TRUE;
	
	s_bIlckInnerSpeedDoorToClose 			: BOOL := TRUE;
	s_bIlckInnerSpeedDoorToOpen		 		: BOOL := TRUE;
	
//++	s_bIlckCleanroomDoorToLock 			: BOOL := TRUE;
//++	s_bIlckCleanroomDoorToRelease		: BOOL := TRUE;
	
//------------------------------------------//

//------------------------------------------//

//------------------------------------------//
//Alarms
	s_bWrnOuterSpeedDoorNoAllowedToOpen : BOOL;
	s_bWrnOuterSpeedDoorNoAllowedToClose : BOOL;
	s_bWrnInnerSpeedDoorNoAllowedToOpen : BOOL;
	s_bWrnInnerSpeedDoorNoAllowedToClose : BOOL;
//++	s_bWrnCleanroomDoorNoAllowedToRelease : BOOL;
//++	s_bWrnCleanroomDoorNoAllowedToLock : BOOL;

	s_fbAlarmHandlerOuterSpeedDoorNoAllowedToOpen : FB_AlarmHandler;
	s_fbAlarmHandlerOuterSpeedDoorNoAllowedToClose : FB_AlarmHandler;
	s_fbAlarmHandlerInnerSpeedDoorNoAllowedToOpen : FB_AlarmHandler;
	s_fbAlarmHandlerInnerSpeedDoorNoAllowedToClose : FB_AlarmHandler;
//++	s_fbAlarmHandlerCleanroomDoorNoAllowedToRelease : FB_AlarmHandler;
//++	s_fbAlarmHandlerCleanroomDoorNoAllowedToLock : FB_AlarmHandler;
	
//------------------------------------------//

//------------------------------------------//
//Hmi
	s_fbHmiBtnReset						: FB_HmiBtn;
	
	s_fbHmiBtnCloseOuterSpeedDoor		: FB_HmiBtn;
	s_fbHmiBtnOpenOuterSpeedDoor		: FB_HmiBtn;
	
	s_fbHmiBtnCloseInnerSpeedDoor		: FB_HmiBtn;
	s_fbHmiBtnOpenInnerSpeedDoor		: FB_HmiBtn;
	
//++	s_fbHmiBtnApplyLockCleanroomDoor	: FB_HmiBtn;
//++	s_fbHmiBtnReleaseLockCleanroomDoor	: FB_HmiBtn;
	
	s_fbHmiLedOuterSpeedDoorClosed			: FB_HmiLed;
	s_fbHmiLedOuterSpeedDoorOpened			: FB_HmiLed;
	
	s_fbHmiLedInnerSpeedDoorClosed			: FB_HmiLed;
	s_fbHmiLedInnerSpeedDoorOpened			: FB_HmiLed;
	
//++	s_fbHmiLedCleanDoorClosed			: FB_HmiLed;
//++	s_fbHmiLedCleanDoorOpened			: FB_HmiLed;
//++	s_fbHmiLedCleanroomDoorLocked		: FB_HmiLed;
//++	s_fbHmiLedCleanroomDoorReleased		: FB_HmiLed;
	
//------------------------------------------//

	{warning '#TODO' Het zou beter zijn om dit onder te brengen in de onderstaande control modules}
	s_bHmiForceOutputEnabled : BOOL;
	s_bHmiForceOutputStartEnabled : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Folder Name="Base" Id="{86d48589-7e2d-40d8-97de-3d4db9988d9a}" />
    <Method Name="_m_Alarms" Id="{34703853-800b-4320-8e6c-49abce8785b7}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF
	
	s_fbAlarmHandlerOuterSpeedDoorNoAllowedToOpen(
		i_bStaActive := i_bReqEnable AND s_bWrnOuterSpeedDoorNoAllowedToOpen,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Outer Speed Door Not Allowed To Open');
	
	s_fbAlarmHandlerOuterSpeedDoorNoAllowedToClose(
		i_bStaActive := i_bReqEnable AND s_bWrnOuterSpeedDoorNoAllowedToClose,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Outer Speed Door Not Allowed To Close');
		
	s_fbAlarmHandlerInnerSpeedDoorNoAllowedToOpen(
		i_bStaActive := i_bReqEnable AND s_bWrnInnerSpeedDoorNoAllowedToOpen,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Inner Speed Door Not Allowed To Open');
	
	s_fbAlarmHandlerInnerSpeedDoorNoAllowedToClose(
		i_bStaActive := i_bReqEnable AND s_bWrnInnerSpeedDoorNoAllowedToClose,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Inner Speed Door Not Allowed To Close');
	
//++	s_fbAlarmHandlerCleanroomDoorNoAllowedToRelease(
//++		i_bStaActive := i_bReqEnable AND s_bWrnCleanroomDoorNoAllowedToRelease,
//++		i_eAlarmLevel := E_AlarmLevel.Warning,
//++		i_sAlarmText := 'Cleanroom Door Not Allowed To Release/Open');
	
//++	s_fbAlarmHandlerCleanroomDoorNoAllowedToLock(
//++		i_bStaActive := i_bReqEnable AND s_bWrnCleanroomDoorNoAllowedToLock,
//++		i_eAlarmLevel := E_AlarmLevel.Warning,
//++		i_sAlarmText := 'Cleanroom Door Not Allowed To Lock');
	
	//Reset error/warning bits
	IF i_bCmdReset THEN
		s_bWrnOuterSpeedDoorNoAllowedToOpen := FALSE;
		s_bWrnOuterSpeedDoorNoAllowedToClose := FALSE;
		s_bWrnInnerSpeedDoorNoAllowedToOpen := FALSE;
		s_bWrnInnerSpeedDoorNoAllowedToClose := FALSE;
//++		s_bWrnCleanroomDoorNoAllowedToRelease := FALSE;
//++		s_bWrnCleanroomDoorNoAllowedToLock := FALSE;
	END_IF

_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{c18c3403-a619-4da8-8c16-d38b3f2bd5db}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

s_cmOuterSpeedDoor(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset);

s_cmInnerSpeedDoor(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset);
	
//++s_cmCleanroomDoor(
//++	i_bReqEnable := i_bReqEnable,
//++	i_eCtrlMode := i_eCtrlMode,
//++	i_bCmdReset := i_bCmdReset);

//Statusses
s_bStaOuterSpeedDoorClosed := s_cmOuterSpeedDoor.p_bStaIsClosed;
s_bStaOuterSpeedDoorOpened := s_cmOuterSpeedDoor.p_bStaIsOpened;

s_bStaInnerSpeedDoorClosed := s_cmInnerSpeedDoor.p_bStaIsClosed;
s_bStaInnerSpeedDoorOpened := s_cmInnerSpeedDoor.p_bStaIsOpened;

//++s_bStaCleanroomLockApplied := s_cmCleanroomDoor.p_bStaLockIsApplied;
//++s_bStaCleanroomLockReleased := s_cmCleanroomDoor.p_bStaLockIsReleased;
//++s_bStaCleanroomDoorClosed := s_cmCleanroomDoor.p_bStaDoorIsClosed;
//++s_bStaCleanroomDoorOpened := NOT(s_cmCleanroomDoor.p_bStaDoorIsClosed);

s_bStaError := s_cmOuterSpeedDoor.p_bStaError OR s_cmInnerSpeedDoor.p_bStaError; (* OR s_cmCleanroomDoor.p_bStaError;*)
	
_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{06e9697b-07d7-4e29-8455-791381b5d99d}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnReset();
	
s_fbHmiBtnCloseOuterSpeedDoor();
s_fbHmiBtnOpenOuterSpeedDoor();

s_fbHmiBtnCloseInnerSpeedDoor();
s_fbHmiBtnOpenInnerSpeedDoor();
	
//++s_fbHmiBtnApplyLockCleanroomDoor();;
//++s_fbHmiBtnReleaseLockCleanroomDoor();

//Leds	
s_fbHmiLedOuterSpeedDoorClosed(i_bStaLed := s_bStaOuterSpeedDoorClosed);
s_fbHmiLedOuterSpeedDoorOpened(i_bStaLed := s_bStaOuterSpeedDoorOpened);

s_fbHmiLedInnerSpeedDoorClosed(i_bStaLed := s_bStaInnerSpeedDoorClosed);
s_fbHmiLedInnerSpeedDoorOpened(i_bStaLed := s_bStaInnerSpeedDoorOpened);
	
//++s_fbHmiLedCleanDoorClosed(i_bStaLed := s_bStaCleanroomDoorClosed);
//++s_fbHmiLedCleanDoorOpened(i_bStaLed := s_bStaCleanroomDoorOpened);
//++s_fbHmiLedCleanroomDoorLocked(i_bStaLed := s_bStaCleanroomLockApplied);
//++s_fbHmiLedCleanroomDoorReleased(i_bStaLed := s_bStaCleanroomLockReleased);

_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{f5588ebd-495a-4c31-a7f5-23415377d40e}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Interlock (externala + internal interlock reasons)
// Waarschijnlijk is het toch beter om de interlock uitsluited extern te verzamelen. Denk bijvoorbeeld aan de situatie dat er een box gedocked is (outer door is dan open), de claenroom deur mag in die sitiuatie geopende worden
s_bIlckOuterSpeedDoorToClose := i_bReqEnable AND i_bIlckOuterSpeedDoorToClose;
s_bIlckOuterSpeedDoorToOpen := i_bReqEnable AND i_bIlckOuterSpeedDoorToOpen;
s_bIlckInnerSpeedDoorToClose := i_bReqEnable AND i_bIlckInnerSpeedDoorToClose;
s_bIlckInnerSpeedDoorToOpen := i_bReqEnable AND i_bIlckInnerSpeedDoorToOpen;
//++s_bIlckCleanroomDoorToLock := i_bReqEnable AND i_bIlckCleanroomDoorToLock;
//++s_bIlckCleanroomDoorToRelease := i_bReqEnable AND i_bIlckCleanroomDoorToRelease;	

//Control Modules
s_cmOuterSpeedDoor.i_bReqEnable := FALSE;
s_cmOuterSpeedDoor.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmOuterSpeedDoor.i_sCmName := 'Outer Speed Door';
s_cmOuterSpeedDoor.i_stSettings.tDoorClosingTimeout := T#10S;
s_cmOuterSpeedDoor.i_stSettings.tDoorOpeningTimeout := T#10S;
s_cmOuterSpeedDoor.i_stSettings.tResetPulseDuration := T#1S;
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}

s_cmInnerSpeedDoor.i_bReqEnable := FALSE;
s_cmInnerSpeedDoor.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmInnerSpeedDoor.i_sCmName := 'Inner Speed Door';
s_cmInnerSpeedDoor.i_stSettings.tDoorClosingTimeout := T#10S;
s_cmInnerSpeedDoor.i_stSettings.tDoorOpeningTimeout := T#10S;
s_cmInnerSpeedDoor.i_stSettings.tResetPulseDuration := T#1S;
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}
	
//++s_cmCleanroomDoor.i_bReqEnable := FALSE;
//++s_cmCleanroomDoor.i_eCtrlMode := E_CtrlMode.IDLE;
//++s_cmCleanroomDoor.i_sCmName := 'Cleanroom Door';
//++s_cmCleanroomDoor.i_stSettings.tApplyingLockTimeout := T#3S;
//++s_cmCleanroomDoor.i_stSettings.tReleasingLockTimeout := T#3S;
//++{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}
	
//---------------------------------//	

//----------------------------------//

	
//----------------------------------//	
//Hmi
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	s_fbHmiBtnCloseOuterSpeedDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnCloseOuterSpeedDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnCloseOuterSpeedDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnCloseOuterSpeedDoor.p_sBtnText := 'Close Outer Speed Door';
	
	s_fbHmiBtnOpenOuterSpeedDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnOpenOuterSpeedDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnOpenOuterSpeedDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnOpenOuterSpeedDoor.p_sBtnText := 'Open Outer Speed Door';
	
	s_fbHmiBtnCloseInnerSpeedDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnCloseInnerSpeedDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnCloseInnerSpeedDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnCloseInnerSpeedDoor.p_sBtnText := 'Close Inner Speed Door';
	
	s_fbHmiBtnOpenInnerSpeedDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnOpenInnerSpeedDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnOpenInnerSpeedDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnOpenInnerSpeedDoor.p_sBtnText := 'Open Inner Speed Door';
	
//++	s_fbHmiBtnApplyLockCleanroomDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
//++	s_fbHmiBtnApplyLockCleanroomDoor.p_bStaVisible := FALSE;
//++	s_fbHmiBtnApplyLockCleanroomDoor.p_bStaEnabled := FALSE;		
//++	s_fbHmiBtnApplyLockCleanroomDoor.p_sBtnText := 'Lock Cleanroom Door';
	
//++	s_fbHmiBtnReleaseLockCleanroomDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
//++	s_fbHmiBtnReleaseLockCleanroomDoor.p_bStaVisible := FALSE;
//++	s_fbHmiBtnReleaseLockCleanroomDoor.p_bStaEnabled := FALSE;		
//++	s_fbHmiBtnReleaseLockCleanroomDoor.p_sBtnText := 'Release Cleanroom Door';

	s_fbHmiLedOuterSpeedDoorClosed.p_bStaVisible := FALSE;
	s_fbHmiLedOuterSpeedDoorClosed.p_sToHmiDescriptionLed := 'Outer Speed Door Closed';
	
	s_fbHmiLedOuterSpeedDoorOpened.p_bStaVisible := FALSE;
	s_fbHmiLedOuterSpeedDoorOpened.p_sToHmiDescriptionLed := 'Outer Speed Door Opened';
	
	s_fbHmiLedInnerSpeedDoorClosed.p_bStaVisible := FALSE;
	s_fbHmiLedInnerSpeedDoorClosed.p_sToHmiDescriptionLed := 'Inner Speed Door Closed';
	
	s_fbHmiLedInnerSpeedDoorOpened.p_bStaVisible := FALSE;
	s_fbHmiLedInnerSpeedDoorOpened.p_sToHmiDescriptionLed := 'Inner Speed Door Opened';
	
//++	s_fbHmiLedCleanDoorClosed.p_bStaVisible := FALSE;
//++	s_fbHmiLedCleanDoorClosed.p_sToHmiDescriptionLed := 'Cleanroom Door Closed';
	
//++	s_fbHmiLedCleanDoorOpened.p_bStaVisible := FALSE;
//++	s_fbHmiLedCleanDoorOpened.p_sToHmiDescriptionLed := 'Cleanroom Door Opened';
	
//++	s_fbHmiLedCleanroomDoorLocked.p_bStaVisible := FALSE;
//++	s_fbHmiLedCleanroomDoorLocked.p_sToHmiDescriptionLed := 'Cleanroom Door Locked';
	
//++	s_fbHmiLedCleanroomDoorReleased.p_bStaVisible := FALSE;
//++	s_fbHmiLedCleanroomDoorReleased.p_sToHmiDescriptionLed := 'Cleanroom Door Released';
 
_m_Init := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{08e3676c-19d2-4657-8762-4d7303d85c82}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF


s_bIlckOuterSpeedDoorToOpen := i_bIlckOuterSpeedDoorToOpen;
s_bIlckOuterSpeedDoorToClose := i_bIlckOuterSpeedDoorToClose;

s_bIlckInnerSpeedDoorToOpen := i_bIlckInnerSpeedDoorToOpen;
s_bIlckInnerSpeedDoorToClose := i_bIlckInnerSpeedDoorToClose;
	
//++s_bIlckCleanroomDoorToRelease := i_bIlckCleanroomDoorToRelease;
//++s_bIlckCleanroomDoorToLock := i_bIlckCleanroomDoorToLock;

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{f763b42e-2a14-49e4-aeec-3b4dc606af2b}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Params" Id="{02936153-be53-403e-812d-8d9a77c13756}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Params : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Params() THEN
	RETURN;
END_IF

_m_Params := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ApplyLockCleanroomDoor" Id="{4499f858-1c66-4e87-af48-eca8a833d6ae}">
      <Declaration><![CDATA[METHOD PUBLIC m_ApplyLockCleanroomDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(FALSE) THEN
	s_bReqOpenOuterDoor := FALSE;
	s_bReqCloseOuterDoor := FALSE;
	s_bReqReleaseCleanroomDoor := FALSE;
	s_bReqLockCleanroomDoor := TRUE;
	
	m_ApplyLockCleanroomDoor := TRUE;
	
ELSE
	s_bWrnCleanroomDoorNoAllowedToLock := TRUE;
	
	m_ApplyLockCleanroomDoor := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_CloseInnerSpeedDoor" Id="{8b9659e3-9892-4336-a3c2-49b887b841ee}">
      <Declaration><![CDATA[METHOD PUBLIC m_CloseInnerSpeedDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(s_bIlckInnerSpeedDoorToClose) THEN
	s_bReqOpenOuterSpeedDoor := FALSE;
	s_bReqCloseOuterSpeedDoor := FALSE;
	s_bReqOpenInnerSpeedDoor := FALSE;
	s_bReqCloseInnerSpeedDoor := TRUE;
//++	s_bReqReleaseCleanroomDoor := FALSE;
//++	s_bReqLockCleanroomDoor := FALSE;
	
	m_CloseInnerSpeedDoor := TRUE;
	
ELSE
	s_bWrnInnerSpeedDoorNoAllowedToClose := TRUE;
	
	m_CloseInnerSpeedDoor := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_CloseOuterSpeedDoor" Id="{9c407a35-74a6-401d-8a18-b21be8c2d1a1}">
      <Declaration><![CDATA[METHOD PUBLIC m_CloseOuterSpeedDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(s_bIlckOuterSpeedDoorToClose) THEN
	s_bReqOpenOuterSpeedDoor := FALSE;
	s_bReqCloseOuterSpeedDoor := TRUE;
	s_bReqOpenInnerSpeedDoor := FALSE;
	s_bReqCloseInnerSpeedDoor := FALSE;
//++	s_bReqReleaseCleanroomDoor := FALSE;
//++	s_bReqLockCleanroomDoor := FALSE;
	
	m_CloseOuterSpeedDoor := TRUE;
	
ELSE
	s_bWrnOuterSpeedDoorNoAllowedToClose := TRUE;
	
	m_CloseOuterSpeedDoor := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{c1559ad6-cc3e-4059-9eff-299ddfbeac7b}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

{waring '#TODO: wrtie code below'}
(*
CASE i_eCtrlMode OF

	E_CtrlMode.IDLE:
		;
	
	E_CtrlMode.AUTOMATIC:
		
		CASE i_ref_objCarrier.p_eLocation OF 
	
			E_Location.PRE_DOCKING: //Control outer door
		
				IF i_ref_objCarrier.p_eDestination > E_Location.PRE_DOCKING THEN
					//Check if outer door is allowed to open
					IF NOT(i_bIlckOuterSpeedDoorToOpen) THEN
						s_cmOuterSpeedDoor();
					ELSE
						//Generate warning to user, door not allowed to open	
					END_IF
				END_IF
				
				IF p_bStaOuterSpeedDoorOpened THEN
					//Generate info to user, to place TB to docking position
				END_IF
				
				IF i_ref_objCarrier.p_eDestination <= E_Location.PRE_DOCKING THEN
					//Check if outer door is allowed to close
					IF NOT(i_bIlckOuterSpeedDoorToClose) THEN
						s_cmOuterSpeedDoor.m_Close();
					ELSE
						//Generate warning to user, door not allowed to close	
					END_IF
				END_IF
						
			E_Location.CLEAN_ROOM: //Control cleanroom door
		
				IF i_ref_objCarrier.p_eDestination >= E_Location.CLEAN_ROOM THEN
					//Check if cleanroom door lock is allowed to be released
					IF NOT(i_bIlckCleanroomDoorToRelease) THEN
						IF i_ref_objCarrier.p_bFlushedClean THEN
							s_cmCleanroomDoor.m_Release();
						ELSE
							//Generate warning to user, not flushed/clean
						END_IF		
					ELSE
						//Generate warning to user, door not allowed to be released	
					END_IF
				END_IF
				
				IF i_ref_objCarrier.p_eDestination <= E_Location.PRE_DOCKING THEN
					//Check if outer door is allowed to close
					IF NOT(i_bIlckCleanroomDoorToLock) THEN
						IF s_cmCleanroomDoor.p_bStaDoorIsClosed THEN
							s_cmCleanroomDoor.m_Apply();
						ELSE
							//Generate info to user, close cleanroom door
						END_IF	
					ELSE
						//Generate warning to user, door not allowed to lock	
					END_IF
				END_IF		
				
				
		END_CASE	
		
		
	
	E_CtrlMode.MANUAL:
		;
END_CASE

CASE i_eCtrlMode OF

	E_CtrlMode.IDLE:
		s_cmOuterSpeedDoor.m_Stop();
		s_cmCleanroomDoor.m_Apply();
		
	E_CtrlMode.AUTOMATIC:
		
		s_fbSeqDoors(
			i_nSeqStep := s_eSeqDoors, 
			i_sStepName := TO_STRING(s_fbSeqDoors.q_eActState), 
			i_bCmdReset := i_bCmdReset, 
			i_bStaError := s_bStaError);
	
		CASE s_eSeqDoors OF
			
			E_SeqDoors.IDLE:
				IF s_fbSeqDoors.q_bStaEntry THEN
					//Reset all requests
					s_bReqCloseOuterSpeedDoor := FALSE;
					s_bReqOpenOuterSpeedDoor := FALSE;
					s_bReqLockCleanroomDoor := FALSE;
					s_bReqReleaseCleanroomDoor := FALSE;
				END_IF
			
				//Requests from public mehtods (checked for interlocks)
				IF s_bReqCloseOuterSpeedDoor THEN
					s_eSeqDoors := E_SeqDoors.CLOSE_OUTER_DOOR;
					
				ELSIF s_bReqOpenOuterSpeedDoor THEN
					s_eSeqDoors := E_SeqDoors.OPEN_OUTER_DOOR;
					
				ELSIF s_bReqLockCleanroomDoor THEN
					s_eSeqDoors := E_SeqDoors.LOCK_CLEANROOM_DOOR;
					
				ELSIF s_bReqReleaseCleanroomDoor THEN
					s_eSeqDoors := E_SeqDoors.RELEASE_CLEANROOM_DOOR;
				END_IF
			
			E_SeqDoors.CLOSE_OUTER_DOOR:
				IF s_fbSeqDoors.q_bStaEntry THEN
					s_cmOuterSpeedDoor.m_Close();
				END_IF
				
				IF s_cmOuterSpeedDoor.p_bStaIsClosed THEN
					s_eSeqDoors := E_SeqDoors.OUTER_DOOR_CLOSED;
				ELSIF s_cmOuterSpeedDoor.p_bStaError THEN
					{warning '#TODO write add some info to error string'}
					s_eSeqDoors := E_SeqDoors.ERROR;
				ELSIF (s_fbSeqDoors.q_tmStepTime >= i_stSettings.tOuterDoorTimeout) THEN
					{warning '#TODO write add some info to error string'}
					s_eSeqDoors := E_SeqDoors.ERROR;	
				END_IF
			
			E_SeqDoors.OUTER_DOOR_CLOSED:
				s_eSeqDoors := E_SeqDoors.IDLE;	
			
			E_SeqDoors.OPEN_OUTER_DOOR:
				IF s_fbSeqDoors.q_bStaEntry THEN
					s_cmOuterSpeedDoor.m_Open();
				END_IF
				
				IF s_cmOuterSpeedDoor.p_bStaIsOpened THEN
					s_eSeqDoors := E_SeqDoors.OUTER_DOOR_OPENED;
				ELSIF s_cmOuterSpeedDoor.p_bStaError THEN
					{warning '#TODO write add some info to error string'}
					s_eSeqDoors := E_SeqDoors.ERROR;
				ELSIF (s_fbSeqDoors.q_tmStepTime >= i_stSettings.tOuterDoorTimeout) THEN
					{warning '#TODO write add some info to error string'}
					s_eSeqDoors := E_SeqDoors.ERROR;	
				END_IF
			
			E_SeqDoors.OUTER_DOOR_OPENED:
				s_eSeqDoors := E_SeqDoors.IDLE;
			
			E_SeqDoors.LOCK_CLEANROOM_DOOR:
				IF s_fbSeqDoors.q_bStaEntry THEN
					s_cmCleanroomDoor.m_Apply();
				END_IF
				
				IF s_cmCleanroomDoor.p_bStaLockIsApplied THEN
					s_eSeqDoors := E_SeqDoors.CLEANROOM_DOOR_LOCKED;
				ELSIF s_cmCleanroomDoor.p_bStaError THEN
					{warning '#TODO write add some info to error string'}
					s_eSeqDoors := E_SeqDoors.ERROR;
				ELSIF (s_fbSeqDoors.q_tmStepTime >= i_stSettings.tCleanroomDoorTimeout) THEN
					{warning '#TODO write add some info to error string'}
					s_eSeqDoors := E_SeqDoors.ERROR;	
				END_IF
			
			E_SeqDoors.CLEANROOM_DOOR_LOCKED:
				s_eSeqDoors := E_SeqDoors.IDLE;
						
			E_SeqDoors.RELEASE_CLEANROOM_DOOR:
				IF s_fbSeqDoors.q_bStaEntry THEN
					s_cmCleanroomDoor.m_Release();
				END_IF
				
				IF s_cmCleanroomDoor.p_bStaLockIsReleased THEN
					s_eSeqDoors := E_SeqDoors.CLEANROOM_DOOR_RELEASED;
				ELSIF s_cmCleanroomDoor.p_bStaError THEN
					{warning '#TODO write add some info to error string'}
					s_eSeqDoors := E_SeqDoors.ERROR;
				ELSIF (s_fbSeqDoors.q_tmStepTime >= i_stSettings.tCleanroomDoorTimeout) THEN
					{warning '#TODO write add some info to error string'}
					s_eSeqDoors := E_SeqDoors.ERROR;	
				END_IF
			
			E_SeqDoors.CLEANROOM_DOOR_RELEASED:
				s_eSeqDoors := E_SeqDoors.IDLE;
			
			E_SeqDockingInterface.READY:
				;
			
			E_SeqDockingInterface.ERROR:
				s_cmOuterSpeedDoor.m_Stop();
				s_cmCleanroomDoor.m_Apply();
			
				IF i_bCmdReset THEN
					//Reset errors (probebly alredy done in the methode devices)
					//--cmValveDockingClampsUpper.i_bCmdReset := TRUE;
				
					s_eSeqDoors := E_SeqDockingInterface.IDLE;
				END_IF
				
		END_CASE		
	
		
	E_CtrlMode.MANUAL:
		;
		{warning '#TODO: Add manual control from hmi'}

		// Outer Door
		IF s_fbHmiBtnOpenOuterSpeedDoor.p_osrBtnPress THEN
			s_cmOuterSpeedDoor.m_Open();
		ELSIF s_fbHmiBtnCloseOuterSpeedDoor.p_osrBtnPress THEN
			s_cmOuterSpeedDoor.m_Close();
		END_IF
		
		// Door Lock
		IF s_fbHmiBtnReleaseLockCleanroomDoor.p_osrBtnPress THEN
			s_cmCleanroomDoor.m_Release();
		ELSIF s_fbHmiBtnApplyLockCleanroomDoor.p_osrBtnPress THEN
			s_cmCleanroomDoor.m_Apply();
		END_IF
		
END_CASE
*)

{warning '#TODO: Code below is axample from pallet conveyor'}
(*

//AUTOMATIC-mode //////////////////////////////////////////////////////////////////////////////////

//MANUAL-mode /////////////////////////////////////////////////////////////////////////////////////

//Buttons visibility
IF (i_eCtrlMode = E_CtrlMode.MANUAL) THEN
	s_fbHmiBtnTB_ToInfeed.p_bStaVisible := TRUE;
	s_fbHmiBtnTB_ToCentering.p_bStaVisible := TRUE;
	s_fbHmiBtnTB_ToDocking.p_bStaVisible := TRUE;
	s_fbHmiBtnTB_Centering.p_bStaVisible := TRUE;
ELSE
	s_fbHmiBtnTB_ToInfeed.p_bStaVisible := FALSE;
	s_fbHmiBtnTB_ToCentering.p_bStaVisible := FALSE;
	s_fbHmiBtnTB_ToDocking.p_bStaVisible := FALSE;
	s_fbHmiBtnTB_Centering.p_bStaVisible := FALSE;
END_IF

//Buttons enabling
IF i_bReqEnable AND (i_eCtrlMode = E_CtrlMode.MANUAL) AND (i_eCtrlState = E_CtrlState.RUNNING) THEN

	//Transport
	s_fbHmiBtnTB_ToInfeed.p_bStaEnabled :=
		NOT(s_bIlckConveyorBackward)
		AND NOT(s_bStaAtInfeedRearPosition) //Added extra condition here instead of interlock only 
		AND NOT(s_cmPalletConveyor.p_bStaError)
		AND (s_cmPalletConveyor.p_bStaMotorStopped) AND TRUE
		AND NOT(s_bReqCenteringTB);
	
	s_fbHmiBtnTB_ToCentering.p_bStaEnabled :=
		NOT(s_bIlckConveyorForward)
		AND NOT(s_bStaAtCenteringPosition) //Added extra condition here instead of interlock only
		AND NOT(s_cmPalletConveyor.p_bStaError)
		AND (s_cmPalletConveyor.p_bStaMotorStopped)
		AND NOT(s_bReqCenteringTB);
	
	s_fbHmiBtnTB_ToDocking.p_bStaEnabled :=
		NOT(s_bIlckConveyorForward)
		AND NOT(s_bStaAtDockingPosition) //Added extra condition here instead of interlock only
		AND NOT(s_cmPalletConveyor.p_bStaError)
		AND (s_cmPalletConveyor.p_bStaMotorStopped)
		AND NOT(s_bReqCenteringTB);
	
	//Centering
	s_fbHmiBtnTB_Centering.p_bStaEnabled :=
		NOT(s_bIlckCenteringToCenter)
		AND NOT(s_cmCenteringUnit.p_bStaError)
		AND (s_eSeqTransport = E_SeqTransport.READY); 
ELSE
	s_fbHmiBtnTB_ToInfeed.p_bStaEnabled := FALSE;
	s_fbHmiBtnTB_ToCentering.p_bStaEnabled := FALSE;
	s_fbHmiBtnTB_ToDocking.p_bStaEnabled := FALSE;
	s_fbHmiBtnTB_Centering.p_bStaEnabled := FALSE;
END_IF

//MAINTENANCE-mode ////////////////////////////////////////////////////////////////////////////////

//Stopping control modules
IF (i_eCtrlMode = E_CtrlMode.MAINTENANCE) AND (i_eCtrlState = E_CtrlState.STOPPING) THEN 
	s_cmPalletConveyor.m_Stop();
END_IF
*)
//IO-mode /////////////////////////////////////////////////////////////////////////////////////////
IF (i_eCtrlMode = E_CtrlMode.IO) AND (i_eCtrlState = E_CtrlState.RUNNING) THEN
	s_bHmiForceOutputEnabled := TRUE;
//--	s_bHmiForceOutputStartEnabled := s_cmPalletConveyor.p_bStaBrakeReleasedQ;
ELSE
	s_bHmiForceOutputEnabled := FALSE;
//--	s_bHmiForceOutputStartEnabled := FALSE;	
END_IF

m_Main := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_OpenInnerSpeedDoor" Id="{574f8d3a-fdc9-465e-913e-843f784f0e6e}">
      <Declaration><![CDATA[METHOD PUBLIC m_OpenInnerSpeedDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(s_bIlckInnerSpeedDoorToOpen) THEN
	s_bReqOpenOuterSpeedDoor := FALSE;
	s_bReqCloseOuterSpeedDoor := FALSE;
	s_bReqOpenInnerSpeedDoor := TRUE;
	s_bReqCloseInnerSpeedDoor := FALSE;
//++	s_bReqReleaseCleanroomDoor := FALSE;
//++	s_bReqLockCleanroomDoor := FALSE;
	
	m_OpenInnerSpeedDoor := TRUE;
ELSE
	
	s_bWrnInnerSpeedDoorNoAllowedToOpen := TRUE;
	
	m_OpenInnerSpeedDoor := FALSE;
END_IF	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_OpenOuterSpeedDoor" Id="{cacb32c9-2f39-45b3-a10f-fdd38f341162}">
      <Declaration><![CDATA[METHOD PUBLIC m_OpenOuterSpeedDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(s_bIlckOuterSpeedDoorToOpen) THEN
	s_bReqOpenOuterSpeedDoor := TRUE;
	s_bReqCloseOuterSpeedDoor := FALSE;
	s_bReqOpenInnerSpeedDoor := FALSE;
	s_bReqCloseInnerSpeedDoor := FALSE;
//++	s_bReqReleaseCleanroomDoor := FALSE;
//++	s_bReqLockCleanroomDoor := FALSE;
	
	m_OpenOuterSpeedDoor := TRUE;
ELSE
	
	s_bWrnOuterSpeedDoorNoAllowedToOpen := TRUE;
	
	m_OpenOuterSpeedDoor := FALSE;
END_IF	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReleaseLockCleanroomDoor" Id="{145de249-cc49-4a2e-a93a-16f786c2ecb4}">
      <Declaration><![CDATA[METHOD PUBLIC m_ReleaseLockCleanroomDoor : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(s_bIlckCleanroomDoorToLock) THEN
	s_bReqOpenOuterDoor := FALSE;
	s_bReqCloseOuterDoor := FALSE;
	s_bReqReleaseCleanroomDoor := TRUE;
	s_bReqLockCleanroomDoor := FALSE;
	
	m_ReleaseLockCleanroomDoor := TRUE;
ELSE
	
	s_bWrnCleanroomDoorNoAllowedToRelease := TRUE;
	
	m_ReleaseLockCleanroomDoor := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bStaCleanroomDoorClosed" Id="{3e867690-16e1-4e81-ad03-19ccedfb22c2}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaCleanroomDoorClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{9548d166-8d83-4477-b001-d95261ddbc06}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaCleanroomDoorClosed := s_bStaCleanroomDoorClosed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaCleanroomDoorOpened" Id="{bb117a50-1725-4cdb-9157-fc2597312e4e}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaCleanroomDoorOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{e91b025b-dae0-4ea7-97b1-57ee28a26a9b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaCleanroomDoorOpened := s_bStaCleanroomDoorOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaCleanroomLockApplied" Id="{e6feb3e3-3717-426d-b652-dbbaa9ba0f43}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaCleanroomLockApplied : BOOL]]></Declaration>
      <Get Name="Get" Id="{0d6adf81-f180-40fd-b901-f0c227800da7}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaCleanroomLockApplied := s_bStaCleanroomLockApplied;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaCleanroomLockReleased" Id="{a2b1d59d-5e34-4c2d-b724-72237d669c65}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaCleanroomLockReleased : BOOL]]></Declaration>
      <Get Name="Get" Id="{8ba433c5-2593-4dbc-a0e7-7b9acd8e39d7}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaCleanroomLockReleased := s_bStaCleanroomLockReleased;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaInnerSpeedDoorClosed" Id="{e820ef87-a935-4e5a-9f4e-74f710eeaa35}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaInnerSpeedDoorClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{723740c9-5feb-4d12-ae81-508dbaf06682}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaInnerSpeedDoorClosed := s_bStaInnerSpeedDoorClosed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaInnerSpeedDoorOpened" Id="{fd770672-09bf-4052-b33b-9e8aaacab69c}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaInnerSpeedDoorOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{cd7d4a09-3f8f-4815-907b-09d35b18097b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaInnerSpeedDoorOpened := s_bStaInnerSpeedDoorOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaOuterSpeedDoorClosed" Id="{e8474055-2ea6-4b59-a386-3fcee4ae9262}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaOuterSpeedDoorClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{38689063-15e9-462f-9650-3e7d7a523f33}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaOuterSpeedDoorClosed := s_bStaOuterSpeedDoorClosed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaOuterSpeedDoorOpened" Id="{bc66e39f-ee2c-4f79-9694-10ac484efe5a}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaOuterSpeedDoorOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{d7cea33e-5fa5-438f-8145-a6950abb53e6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaOuterSpeedDoorOpened := s_bStaOuterSpeedDoorOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaReady" Id="{6d80e77c-9c68-4a12-b235-99de416ee985}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaReady : BOOL]]></Declaration>
      <Get Name="Get" Id="{ce2aa158-fba6-44ce-a41e-0f93cd362f98}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaReady := (s_eSeqDoors = E_SeqDoors.READY);
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="EM_Doors">
      <LineId Id="221" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="222" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Alarms">
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="32" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="7" />
      <LineId Id="58" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="2" />
      <LineId Id="45" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="52" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="67" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Devices">
      <LineId Id="127" Count="0" />
      <LineId Id="96" Count="2" />
      <LineId Id="128" Count="0" />
      <LineId Id="130" Count="2" />
      <LineId Id="144" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="135" Count="2" />
      <LineId Id="145" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="100" Count="2" />
      <LineId Id="124" Count="0" />
      <LineId Id="111" Count="3" />
      <LineId Id="140" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="115" Count="3" />
      <LineId Id="142" Count="0" />
      <LineId Id="119" Count="2" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Hmi">
      <LineId Id="222" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="199" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="248" Count="3" />
      <LineId Id="265" Count="1" />
      <LineId Id="264" Count="0" />
      <LineId Id="252" Count="2" />
      <LineId Id="262" Count="0" />
      <LineId Id="255" Count="2" />
      <LineId Id="268" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="258" Count="3" />
      <LineId Id="247" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="224" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Init">
      <LineId Id="203" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="302" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="299" Count="1" />
      <LineId Id="318" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="209" Count="5" />
      <LineId Id="225" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="320" Count="6" />
      <LineId Id="319" Count="0" />
      <LineId Id="216" Count="7" />
      <LineId Id="208" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="35" Count="3" />
      <LineId Id="239" Count="2" />
      <LineId Id="238" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="243" Count="2" />
      <LineId Id="242" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="247" Count="2" />
      <LineId Id="246" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="329" Count="7" />
      <LineId Id="327" Count="1" />
      <LineId Id="251" Count="2" />
      <LineId Id="250" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="255" Count="2" />
      <LineId Id="254" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="273" Count="2" />
      <LineId Id="269" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="339" Count="3" />
      <LineId Id="338" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="278" Count="10" />
      <LineId Id="226" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Inputs">
      <LineId Id="46" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="50" Count="1" />
      <LineId Id="53" Count="1" />
      <LineId Id="60" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Outputs">
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors._m_Params">
      <LineId Id="291" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="292" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_ApplyLockCleanroomDoor">
      <LineId Id="182" Count="4" />
      <LineId Id="195" Count="0" />
      <LineId Id="212" Count="2" />
      <LineId Id="210" Count="0" />
      <LineId Id="217" Count="1" />
      <LineId Id="221" Count="0" />
      <LineId Id="215" Count="1" />
      <LineId Id="220" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_CloseInnerSpeedDoor">
      <LineId Id="182" Count="3" />
      <LineId Id="195" Count="1" />
      <LineId Id="217" Count="1" />
      <LineId Id="226" Count="1" />
      <LineId Id="219" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="203" Count="1" />
      <LineId Id="223" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_CloseOuterSpeedDoor">
      <LineId Id="182" Count="3" />
      <LineId Id="195" Count="1" />
      <LineId Id="217" Count="1" />
      <LineId Id="226" Count="1" />
      <LineId Id="219" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="203" Count="1" />
      <LineId Id="223" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_Main">
      <LineId Id="330" Count="0" />
      <LineId Id="186" Count="2" />
      <LineId Id="511" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="515" Count="24" />
      <LineId Id="544" Count="42" />
      <LineId Id="512" Count="1" />
      <LineId Id="189" Count="3" />
      <LineId Id="331" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="199" Count="10" />
      <LineId Id="410" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="414" Count="1" />
      <LineId Id="413" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="347" Count="1" />
      <LineId Id="386" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="425" Count="0" />
      <LineId Id="429" Count="1" />
      <LineId Id="432" Count="1" />
      <LineId Id="431" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="419" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="434" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="454" Count="11" />
      <LineId Id="397" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="450" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="467" Count="11" />
      <LineId Id="466" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="451" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="480" Count="11" />
      <LineId Id="406" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="310" Count="3" />
      <LineId Id="492" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="315" Count="12" />
      <LineId Id="503" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="501" Count="1" />
      <LineId Id="500" Count="0" />
      <LineId Id="504" Count="0" />
      <LineId Id="506" Count="4" />
      <LineId Id="505" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="594" Count="70" />
      <LineId Id="593" Count="0" />
      <LineId Id="592" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_OpenInnerSpeedDoor">
      <LineId Id="182" Count="0" />
      <LineId Id="237" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="245" Count="1" />
      <LineId Id="265" Count="1" />
      <LineId Id="270" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="250" Count="3" />
      <LineId Id="268" Count="0" />
      <LineId Id="254" Count="3" />
      <LineId Id="242" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_OpenOuterSpeedDoor">
      <LineId Id="182" Count="0" />
      <LineId Id="237" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="245" Count="1" />
      <LineId Id="265" Count="1" />
      <LineId Id="270" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="250" Count="3" />
      <LineId Id="268" Count="0" />
      <LineId Id="254" Count="3" />
      <LineId Id="242" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.m_ReleaseLockCleanroomDoor">
      <LineId Id="182" Count="3" />
      <LineId Id="195" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="209" Count="2" />
      <LineId Id="201" Count="7" />
      <LineId Id="196" Count="0" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaCleanroomDoorClosed.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaCleanroomDoorOpened.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaCleanroomLockApplied.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaCleanroomLockReleased.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaInnerSpeedDoorClosed.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaInnerSpeedDoorOpened.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaOuterSpeedDoorClosed.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaOuterSpeedDoorOpened.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Doors.p_bStaReady.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>