<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_AirTreatment" Id="{81e48a97-313d-405f-b257-49532a716bbe}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_AirTreatment EXTENDS EM_Base IMPLEMENTS I_EM_AirTreatment
VAR_INPUT
	//Inputs
	i_ref_stSettings : REFERENCE TO ST_SettingsAirTreatment;
	
	i_eCtrlState : E_CtrlState;
END_VAR

VAR_OUTPUT
	q_bStaWarning : BOOL;
END_VAR

VAR
	//Control Modules
	s_cmFanMotor : CM_DigOutput;
	
	s_fbPIDPressCtrl : FB_BasicPID;
	
	//Inputs
	s_fbFanThermal : FB_DigInput;
	s_fbDeltaP_CleanroomAmbient : FB_AnaInput;
	s_fbDeltaP_CabinAmbient : FB_AnaInput;
	
	//Outputs
	s_fbFanSpeed : FB_AnaOutput;
	
	//Requests
	s_bReqEqualize : BOOL := FALSE;
	s_bReqFlush : BOOL := FALSE;
	s_bReqPressureize : BOOL := FALSE;
	s_bReqStop : BOOL := FALSE;
	
	//Commands
	s_bCmdFanMotorOn : BOOL;
	
	//Setpoints
	s_fSetFanSpeed : LREAL; //[%]
	s_fSetPressure : LREAL; //[Pa]
	
	//States
	s_bStaFanThemalOk : BOOL;
	s_fActDeltaP_CleanroomAmbient : LREAL; //[Pa]
	s_fActDeltaP_CabinAmbient : LREAL; //[Pa]
	s_fCalcDeltaP_CleanroomCabin : LREAL; //[Pa]
	
	//Properties
	s_bStaPressurized : BOOL;
	s_bStaFlushed : BOOL;
	s_bStaEqualized : BOOL;
	s_bStaClean : BOOL;
	s_bStaStopped : BOOL;
	
	//Alarms
	s_sReason : STRING;
	s_sMessage : STRING;
	
	s_fbAlarmHandlerFanThermalError : FB_AlarmHandler;
	
	s_bErrFanThermalError : BOOL;
	
	//Warnings
	s_bStaWarning : BOOL;
	
	//Params
	s_fbParamPressurizingPress : FB_HmiParamHandler;
	s_fbParamDockingPress : FB_HmiParamHandler;
	s_fbParamFlushingPress : FB_HmiParamHandler;
	s_fbParamFlushingTime : FB_HmiParamHandler;
	s_fbParamEqualizingPress : FB_HmiParamHandler;
	s_fbParamPressureRange : FB_HmiParamHandler;
	
	//Sequencers
	s_eSequence : E_SeqAirTreatment;
	s_fbSeqControl : FB_SeqControl;
	
	s_ePreviousStep : E_SeqAirTreatment;
	s_eResumeStep : E_SeqAirTreatment;
	s_sResumeStep : STRING;
	
	s_tonTimer : TON;
	
	//Hmi
	//Buttons
	s_fbHmiBtnPressurize : FB_HmiBtn;
	s_fbHmiBtnFlushing : FB_HmiBtn;
	s_fbHmiBtnEqualizing : FB_HmiBtn;
	s_fbHmiBtnStop : FB_HmiBtn;
	
	//Leds
	s_fbHmiLedPressurized : FB_HmiLed;
	s_fbHmiLedFlushed : FB_HmiLed;
	s_fbHmiLedEqualized : FB_HmiLed;
	s_fbHmiLedStopped : FB_HmiLed;
	
	{warning '#IO-MODE: Het zou beter zijn om dit onder te brengen in de onderstaande control modules'}
	s_bHmiForceOutputEnabled : BOOL;
	s_bHmiForceOutputStartEnabled : BOOL;
	
	s_fTaskCycleTime : LREAL; //[s]
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Folder Name="Base" Id="{c546c945-02a6-4370-a3be-afd7770e241e}" />
    <Method Name="_m_Alarms" Id="{d480e30e-9986-4190-9df7-894996c4fa20}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

// Alarm Handlers ( config --> init() )
s_fbAlarmHandlerFanThermalError
	(i_bStaActive := s_bErrFanThermalError);
	
// Reset warnings
IF i_bCmdReset THEN
	s_bErrFanThermalError := FALSE;
END_IF

s_bStaError :=
	s_bErrFanThermalError 
	OR s_cmFanMotor.p_bStaError
	OR s_fbFanSpeed.p_bStaError
	OR s_fbDeltaP_CleanroomAmbient.p_bStaError
	OR s_fbDeltaP_CabinAmbient.p_bStaError;
	
s_bStaWarning :=
	s_fbFanSpeed.p_bStaOverRange
	OR s_fbFanSpeed.p_bStaUnderRange
	OR s_fbDeltaP_CleanroomAmbient.p_bStaOverRange
	OR s_fbDeltaP_CleanroomAmbient.p_bStaUnderRange
	OR s_fbDeltaP_CabinAmbient.p_bStaOverRange
	OR s_fbDeltaP_CabinAmbient.p_bStaUnderRange;
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{5634911e-9a37-47c7-962a-914403fd8d33}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

s_fbPIDPressCtrl(
	fSetpointValue := s_fSetPressure, //[Pa]
	fActualValue := s_fCalcDeltaP_CleanroomCabin, //[Pa]
	fKp := i_ref_stSettings.fKp, //P [factor]
	fTn := i_ref_stSettings.fTn, //I [s]
	fTv := i_ref_stSettings.fTv, //D [s]
	fTd := i_ref_stSettings.fTd); //t [[s]
	
s_cmFanMotor(
	i_bReqEnable:= i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_ref_eCtrlState := i_eCtrlState,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := FALSE,
	i_bIclkOff := FALSE);
	
_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{819ca231-c8a3-4c60-8f1b-89b0b42ba028}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnPressurize();
s_fbHmiBtnFlushing();
s_fbHmiBtnEqualizing();
s_fbHmiBtnStop();

//Leds
s_fbHmiLedPressurized(i_bStaLed := s_bStaPressurized);
s_fbHmiLedFlushed(i_bStaLed := s_bStaFlushed);
s_fbHmiLedEqualized(i_bStaLed := s_bStaEqualized);
s_fbHmiLedStopped(i_bStaLed := s_bStaStopped);

_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{d5bdcfa5-a106-4207-af78-e9a00adc354c}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
VAR
	s_fbGetCurTaskIdx : GETCURTASKINDEX;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

s_fbGetCurTaskIdx();
s_fTaskCycleTime := UDINT_TO_LREAL(TwinCAT_SystemInfoVarList._TaskInfo[s_fbGetCurTaskIdx.index].CycleTime) / 10_000_000;

//Control Modules
s_cmFanMotor.i_sCmName := 'Fan Drive';
s_cmFanMotor.i_stSettings.bCfgDelay := FALSE;
s_cmFanMotor.i_stSettings.tmOutputDelay := T#0S;

s_fbFanThermal.i_stSettings.tmInputDelay := T#0S;

s_fbFanSpeed.i_stSettings.fMaxScaledOutput := 100; //[%]
s_fbFanSpeed.i_stSettings.fMinScaledOutput := 0; //[%]
s_fbFanSpeed.i_stSettings.nMaxOutput := 32767; //[raw]
s_fbFanSpeed.i_stSettings.nMinOutput := 0; //[raw]

s_fbDeltaP_CleanroomAmbient.i_bReqEnable := FALSE;
s_fbDeltaP_CleanroomAmbient.i_sName := 'DeltaP Cleanroom-Ambient';
s_fbDeltaP_CleanroomAmbient.i_stSettings.bDisableOverRange := TRUE;
s_fbDeltaP_CleanroomAmbient.i_stSettings.bDisableUnderRange := TRUE;
s_fbDeltaP_CleanroomAmbient.i_stSettings.fMaxScaledInput := 100.0; //[Pa]
s_fbDeltaP_CleanroomAmbient.i_stSettings.fMinScaledInput := 0.0; //[Pa]
s_fbDeltaP_CleanroomAmbient.i_stSettings.nMaxInput := 32767; //[raw]
s_fbDeltaP_CleanroomAmbient.i_stSettings.nMinInput := 0; //[raw]
s_fbDeltaP_CleanroomAmbient.i_stSettings.tmFilterTime := T#3S;

s_fbDeltaP_CabinAmbient.i_bReqEnable := FALSE;
s_fbDeltaP_CabinAmbient.i_sName := 'DeltaP Cabin-Ambient';
s_fbDeltaP_CabinAmbient.i_stSettings.bDisableOverRange := TRUE;
s_fbDeltaP_CabinAmbient.i_stSettings.bDisableUnderRange := TRUE;
s_fbDeltaP_CabinAmbient.i_stSettings.fMaxScaledInput := 100.0; //[Pa]
s_fbDeltaP_CabinAmbient.i_stSettings.fMinScaledInput := 0.0; //[Pa]
s_fbDeltaP_CabinAmbient.i_stSettings.nMaxInput := 32767; //[raw]
s_fbDeltaP_CabinAmbient.i_stSettings.nMinInput := 0; //[raw]
s_fbDeltaP_CabinAmbient.i_stSettings.tmFilterTime := T#3S;

s_fbPIDPressCtrl.fCtrlCycleTime := s_fTaskCycleTime;

//Parameters (default values read from file)
s_fbParamPressurizingPress.i_sName := CONCAT(i_sEmName, ': Pressurizing Pressure');
s_fbParamPressurizingPress.i_nArrayFolderIndex := 1;
s_fbParamPressurizingPress.i_bIsNumber := TRUE;

s_fbParamDockingPress.i_sName := CONCAT(i_sEmName, ': Docking Pressure');
s_fbParamDockingPress.i_nArrayFolderIndex := 1;
s_fbParamDockingPress.i_bIsNumber := TRUE;

s_fbParamFlushingPress.i_sName := CONCAT(i_sEmName, ': Flushing Pressure');
s_fbParamFlushingPress.i_nArrayFolderIndex := 1;
s_fbParamFlushingPress.i_bIsNumber := TRUE;

s_fbParamFlushingTime.i_sName := CONCAT(i_sEmName, ': Flushing Time');
s_fbParamFlushingTime.i_nArrayFolderIndex := 1;
s_fbParamFlushingTime.i_bIsNumber := TRUE;

s_fbParamEqualizingPress.i_sName := CONCAT(i_sEmName, ': Equalizing Pressure');
s_fbParamEqualizingPress.i_nArrayFolderIndex := 1;
s_fbParamEqualizingPress.i_bIsNumber := TRUE;

s_fbParamPressureRange.i_sName := CONCAT(i_sEmName, ': Pressure Range');
s_fbParamPressureRange.i_nArrayFolderIndex := 1;
s_fbParamPressureRange.i_bIsNumber := TRUE;

//Alarms
s_fbAlarmHandlerFanThermalError.i_eAlarmLevel := E_AlarmLevel.Alarm;
s_fbAlarmHandlerFanThermalError.i_sAlarmText := CONCAT(i_sEmName, ': Fan Thermal  Error');

//Warnings

//Interlock strings
//<none>

//Hmi
	s_fbHmiBtnPressurize.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnPressurize.p_bStaVisible := FALSE;
	s_fbHmiBtnPressurize.p_bStaEnabled := FALSE;
	s_fbHmiBtnPressurize.p_sBtnText := 'Pressurize';
	
	s_fbHmiBtnFlushing.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnFlushing.p_bStaVisible := FALSE;
	s_fbHmiBtnFlushing.p_bStaEnabled := FALSE;
	s_fbHmiBtnFlushing.p_sBtnText := 'Flushing';
	
	s_fbHmiBtnEqualizing.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnEqualizing.p_bStaVisible := FALSE;
	s_fbHmiBtnEqualizing.p_bStaEnabled := FALSE;
	s_fbHmiBtnEqualizing.p_sBtnText := 'Equalizing';
	
	s_fbHmiBtnStop.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnStop.p_bStaVisible := FALSE;
	s_fbHmiBtnStop.p_bStaEnabled := FALSE;
	s_fbHmiBtnStop.p_sBtnText := 'Stop';
	
	s_fbHmiLedPressurized.p_bStaVisible := FALSE;
	s_fbHmiLedPressurized.p_sToHmiDescriptionLed := 'Cabin Pressurized';
	
	s_fbHmiLedFlushed.p_bStaVisible := FALSE;
	s_fbHmiLedFlushed.p_sToHmiDescriptionLed := 'Cabin Flushed';
	
	s_fbHmiLedEqualized.p_bStaVisible := FALSE;
	s_fbHmiLedEqualized.p_sToHmiDescriptionLed := 'Cabin Equalized';
	
	s_fbHmiLedStopped.p_bStaVisible := FALSE;
	s_fbHmiLedStopped.p_sToHmiDescriptionLed := 'Stopped';
	
_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{da3902bb-0026-444e-be35-f4675f790d4c}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

s_fbFanThermal();
s_fbDeltaP_CleanroomAmbient(
	i_bReqEnable := i_bReqEnable);
	
s_fbDeltaP_CabinAmbient(
	i_bReqEnable := i_bReqEnable);
	
s_bStaFanThemalOk := s_fbFanThermal.p_bStaInputDelayed;

s_fActDeltaP_CleanroomAmbient := s_fbDeltaP_CleanroomAmbient.p_fValue;
s_fActDeltaP_CabinAmbient := s_fbDeltaP_CleanroomAmbient.p_fValue;
s_fCalcDeltaP_CleanroomCabin := s_fActDeltaP_CleanroomAmbient - s_fActDeltaP_CabinAmbient; //[Pa]

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{2e98bea2-16f9-4f60-a7e0-9054c21cce9c}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

s_fbFanSpeed.i_fValue := LIMIT(0.0, s_fSetFanSpeed, 100.0);

s_fbFanSpeed();

q_bStaWarning := s_bStaWarning;

_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Params" Id="{7c1994a0-9677-4274-9a71-65be59d858a9}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Params : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Params() THEN
	RETURN;
END_IF

//Parameters
s_fbParamPressurizingPress();
s_fbParamDockingPress();
s_fbParamFlushingPress();
s_fbParamFlushingTime();
s_fbParamEqualizingPress();
s_fbParamPressureRange();

//Write to settings
i_ref_stSettings.fPressurizingPress := s_fbParamPressurizingPress.p_fValue;
i_ref_stSettings.fDockingPress := s_fbParamDockingPress.p_fValue;
i_ref_stSettings.fFlushingPress := s_fbParamFlushingPress.p_fValue;
i_ref_stSettings.tFlushingTime := LREAL_TO_TIME(s_fbParamFlushingTime.p_fValue);
i_ref_stSettings.fEqualizingPress := s_fbParamEqualizingPress.p_fValue;
i_ref_stSettings.fPressureRange := s_fbParamPressureRange.p_fValue;

_m_Params := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Sequence" Id="{30bdd7e8-cf50-43a5-ad3d-d9c666dc632a}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Sequence : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_fbSeqControl(
	i_nSeqStep := s_eSequence,
	i_sStepName := TO_STRING(s_eSequence),
	i_bCmdReset :=
		i_bCmdReset
		AND i_bReqEnable
		AND (s_eSequence = E_SeqAirTreatment.ERROR) // Only reset/resume sequencer from ERROR state
		AND NOT(s_bStaError),
	i_bStaError := s_bStaError OR NOT(i_bReqEnable));

s_sResumeStep := TO_STRING(s_eResumeStep);

//Force to stop
{warning '#TODO: Never stop air treatment'}
IF (i_eCtrlState = E_CtrlState.STOPPING) THEN
	s_eSequence := E_SeqAirTreatment.STOP;
END_IF

CASE s_eSequence OF
	E_SeqAirTreatment.IDLE:
		IF (i_eCtrlState = E_CtrlState.IDLE) THEN
			s_eSequence := E_SeqAirTreatment.START;
		END_IF
		
//START////////////////////////////////////////////////////////////////////////////////////////////
	E_SeqAirTreatment.START:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_fbPIDPressCtrl.bReset := TRUE;
			s_fSetFanSpeed := 0.0; //[%]
			
			s_sMessage := 'start';
		END_IF
		
		IF i_eCtrlState = E_CtrlState.RUNNING THEN
			s_eSequence := E_SeqAirTreatment.READY;
		END_IF
		
//READY////////////////////////////////////////////////////////////////////////////////////////////
	E_SeqAirTreatment.READY:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_eResumeStep := E_SeqAirTreatment.READY;
		END_IF
		
		//Return back to start
		IF i_eCtrlState <> E_CtrlState.RUNNING THEN
			s_eSequence := E_SeqAirTreatment.START;
		END_IF
		
		IF s_bReqPressureize THEN
			s_eSequence := E_SeqAirTreatment.PRESSURIZE;
		ELSIF s_bReqFlush THEN
			s_eSequence := E_SeqAirTreatment.FLUSHING;
		ELSIF s_bReqEqualize THEN
			s_eSequence := E_SeqAirTreatment.EQUALIZE;
		END_IF
		
//PRESSURIZE///////////////////////////////////////////////////////////////////////////////////////
	E_SeqAirTreatment.PRESSURIZE:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_bCmdFanMotorOn := TRUE;
			s_fSetPressure := i_ref_stSettings.fPressurizingPress; //[Pa]
			s_fbPIDPressCtrl.bReset := FALSE;
		END_IF
		
		s_fSetFanSpeed := LIMIT(0.0, s_fbPIDPressCtrl.fCtrlOutput, 100.0);
		
		s_bStaPressurized := F_InRange(s_fSetPressure, s_fActDeltaP_CleanroomAmbient, i_ref_stSettings.fPressureRange);
		
		IF s_bReqFlush THEN
			s_eSequence := E_SeqAirTreatment.FLUSHING;
		ELSIF s_bReqEqualize THEN
			s_eSequence := E_SeqAirTreatment.EQUALIZE;
		ELSIF s_bReqStop THEN	
			s_eSequence := E_SeqAirTreatment.STOP;
		END_IF
		
//FLUSING//////////////////////////////////////////////////////////////////////////////////////////
	E_SeqAirTreatment.FLUSHING:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_bCmdFanMotorOn := TRUE;
			s_fSetPressure := i_ref_stSettings.fFlushingPress; //[Pa]
			s_fbPIDPressCtrl.bReset := FALSE;
		END_IF
		
		s_fSetFanSpeed := LIMIT(0.0, s_fbPIDPressCtrl.fCtrlOutput, 100.0);
		
		s_bStaFlushed :=
			F_InRange(s_fSetPressure, s_fActDeltaP_CleanroomAmbient, i_ref_stSettings.fPressureRange)
			AND (s_fbSeqControl.q_tmStepTime > i_ref_stSettings.tFlushingTime);
			
		IF s_bReqPressureize THEN
			s_eSequence := E_SeqAirTreatment.PRESSURIZE;
		ELSIF s_bReqEqualize THEN
			s_eSequence := E_SeqAirTreatment.EQUALIZE;
		ELSIF s_bReqStop THEN	
			s_eSequence := E_SeqAirTreatment.STOP;
		END_IF
		
//EQUALIZING//////////////////////////////////////////////////////////////////////////////////////////
	E_SeqAirTreatment.EQUALIZE:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_bCmdFanMotorOn := TRUE;
			s_fSetPressure := i_ref_stSettings.fEqualizingPress; //[Pa]
			s_fbPIDPressCtrl.bReset := FALSE;
		END_IF
		
		s_fSetFanSpeed := LIMIT(0.0, s_fbPIDPressCtrl.fCtrlOutput, 100.0);
		
		s_bStaFlushed := F_InRange(s_fSetPressure, s_fActDeltaP_CleanroomAmbient, i_ref_stSettings.fPressureRange);
		
		IF s_bReqPressureize THEN
			s_eSequence := E_SeqAirTreatment.PRESSURIZE;
		ELSIF s_bReqFlush THEN
			s_eSequence := E_SeqAirTreatment.FLUSHING;
		ELSIF s_bReqStop THEN
			s_eSequence := E_SeqAirTreatment.STOP;
		END_IF
		
//STOP/////////////////////////////////////////////////////////////////////////////////////////////
	E_SeqAirTreatment.STOP:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_bCmdFanMotorOn := FALSE;
			s_fSetPressure := 0.0; //[Pa]
			s_fbPIDPressCtrl.bReset := TRUE;
		END_IF
		
	IF i_eCtrlState = E_CtrlState.IDLE THEN
		s_eSequence := E_SeqAirTreatment.START;
		
	ELSIF (i_eCtrlState = E_CtrlState.RUNNING) THEN
		s_eSequence := E_SeqAirTreatment.READY;
	END_IF
	
//ERROR////////////////////////////////////////////////////////////////////////////////////////////
	E_SeqAirTreatment.ERROR:
		IF s_fbSeqControl.q_bStaEntry THEN
			s_cmFanMotor.m_Off();
			s_fSetPressure := 0.0; //[Pa]
			s_fSetFanSpeed := 0.0; //[%]
		END_IF
		
END_CASE

//Reset all reqeusts
s_bReqEqualize := FALSE;
s_bReqFlush := FALSE;
s_bReqPressureize := FALSE;
s_bReqStop := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Equalize" Id="{3dbf5f0e-de32-4d1f-a1ee-f80454ebc838}">
      <Declaration><![CDATA[METHOD PUBLIC m_Equalize : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

s_bReqEqualize := TRUE;

m_Equalize := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Flush" Id="{91abc485-ede4-4dc8-9260-f53c4f914a84}">
      <Declaration><![CDATA[METHOD PUBLIC m_Flush : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

s_bReqFlush := TRUE;

m_Flush := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{c5e321ae-d9f4-4560-be7b-e65ffdd1bd10}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

CASE i_eCtrlMode OF
	E_CtrlMode.IDLE:
		s_eSequence := E_SeqAirTreatment.IDLE;
		
	E_CtrlMode.AUTOMATIC:
		//Automatic commands are controlled by higher-layer unit
		_m_Sequence();
		
	E_CtrlMode.MANUAL:
		//Execute manaual control (based on HMI buttons)
		
		//Manual commands (convert HMI buttons to requests), only in state running
		IF (i_eCtrlState = E_CtrlState.RUNNING) THEN
			s_bReqPressureize := s_fbHmiBtnPressurize.p_osrBtnPress;
			s_bReqFlush := s_fbHmiBtnFlushing.p_osrBtnPress;
			s_bReqEqualize := s_fbHmiBtnEqualizing.p_osrBtnPress;
			s_bReqStop := s_fbHmiBtnStop.p_osrBtnPress;
		END_IF
		
		_m_Sequence();
		
	E_CtrlMode.MAINTENANCE:
		//Execute maintenance control (HMI control module buttons)
		s_eSequence := E_SeqAirTreatment.IDLE;
		; 	//Maintenance control is implemented in lower-layer control modules
		
	E_CtrlMode.IO:
		//Execute IO-test control (HMI output force control)
		; 	//IO-Test control is implemented in lower-layer control modules
			//Enabling control is done direcly under this case instruction
			
	E_CtrlMode.CLEANING:
		//Execute cleaning control (cleaning  specific functionalities)
		;	//Cleaning control is not implemented, this could be a done in the future if neccesary
		
END_CASE

//AUTOMATIC-mode //////////////////////////////////////////////////////////////////////////////////

//MANUAL-mode /////////////////////////////////////////////////////////////////////////////////////

//Buttons visibility
IF (i_eCtrlMode = E_CtrlMode.MANUAL) THEN
	s_fbHmiBtnPressurize.p_bStaVisible := TRUE;
	s_fbHmiBtnFlushing.p_bStaVisible := TRUE;
	s_fbHmiBtnEqualizing.p_bStaVisible := TRUE;
	s_fbHmiBtnStop.p_bStaVisible := TRUE;
ELSE
	s_fbHmiBtnPressurize.p_bStaVisible := FALSE;
	s_fbHmiBtnFlushing.p_bStaVisible := FALSE;
	s_fbHmiBtnEqualizing.p_bStaVisible := FALSE;
	s_fbHmiBtnStop.p_bStaVisible := FALSE;
END_IF

//Buttons enabling
IF i_bReqEnable AND (i_eCtrlMode = E_CtrlMode.MANUAL) AND (i_eCtrlState = E_CtrlState.RUNNING) THEN
	
	//Air Treatment
	s_fbHmiBtnPressurize.p_bStaEnabled :=
		((s_eSequence = E_SeqAirTreatment.READY)
		OR (s_eSequence = E_SeqAirTreatment.FLUSHING)
		OR (s_eSequence = E_SeqAirTreatment.EQUALIZE))
		AND NOT(s_bStaError);
		
	s_fbHmiBtnFlushing.p_bStaEnabled :=
		((s_eSequence = E_SeqAirTreatment.READY)
		OR (s_eSequence = E_SeqAirTreatment.PRESSURIZE)
		OR (s_eSequence = E_SeqAirTreatment.EQUALIZE))
		AND NOT(s_bStaError);
		
	s_fbHmiBtnEqualizing.p_bStaEnabled :=
		((s_eSequence = E_SeqAirTreatment.READY)
		OR (s_eSequence = E_SeqAirTreatment.PRESSURIZE)
		OR (s_eSequence = E_SeqAirTreatment.FLUSHING))
		AND NOT(s_bStaError);
		
	s_fbHmiBtnStop.p_bStaEnabled :=
		NOT(s_eSequence = E_SeqAirTreatment.STOP);
		
ELSE
	s_fbHmiBtnPressurize.p_bStaEnabled := FALSE;
	s_fbHmiBtnFlushing.p_bStaEnabled := FALSE;
	s_fbHmiBtnEqualizing.p_bStaEnabled := FALSE;
	s_fbHmiBtnStop.p_bStaEnabled := FALSE;
END_IF

//MAINTENANCE-mode ////////////////////////////////////////////////////////////////////////////////

//Stopping control modules
IF (i_eCtrlMode = E_CtrlMode.MAINTENANCE) AND (i_eCtrlState = E_CtrlState.STOPPING) THEN
	s_cmFanMotor.m_Off();
	s_fSetFanSpeed := 0.0; //[%]
	s_fbSeqControl.i_bCmdReset := TRUE;
END_IF

//IO-mode /////////////////////////////////////////////////////////////////////////////////////////
IF (i_eCtrlMode = E_CtrlMode.IO) AND (i_eCtrlState = E_CtrlState.RUNNING) THEN
	s_bHmiForceOutputEnabled := TRUE;
	s_bHmiForceOutputStartEnabled := s_cmFanMotor.p_bStaOutput;
ELSE
	s_bHmiForceOutputEnabled := FALSE;
	s_bHmiForceOutputStartEnabled := FALSE;
END_IF

m_Main := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Pressurize" Id="{7248c420-f75f-49e3-bdd0-b32fa28f9dd2}">
      <Declaration><![CDATA[METHOD PUBLIC m_Pressurize : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN
	RETURN;
END_IF

s_bReqPressureize := TRUE;

m_Pressurize := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bStaClean" Id="{c64f561d-0884-42bd-857b-b397f22112d9}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaClean : BOOL]]></Declaration>
      <Get Name="Get" Id="{db5b9560-568a-4fb0-b83e-3f67a106ae96}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaClean := s_bStaClean;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaEqualized" Id="{70485294-9ae5-46f7-b455-a30567b2984d}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaEqualized : BOOL]]></Declaration>
      <Get Name="Get" Id="{512491e2-2c43-4c65-af17-560f948bfa0e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaEqualized := s_bStaEqualized;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaFlushed" Id="{e8505bce-20c5-4e11-a93c-d9c8bb05b3bb}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaFlushed : BOOL]]></Declaration>
      <Get Name="Get" Id="{56be4fba-47da-4dfb-819b-1e2798cd877e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaFlushed := s_bStaFlushed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaPressurized" Id="{7ff7c161-f01c-480d-8d30-a3ec8426337a}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaPressurized : BOOL]]></Declaration>
      <Get Name="Get" Id="{a6f3a68e-e97d-4c33-8765-cf3f9408337e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaPressurized := s_bStaPressurized;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaStopped" Id="{1b9417ea-2a30-4473-907e-a8c6943bb545}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaStopped : BOOL]]></Declaration>
      <Get Name="Get" Id="{ee712eba-a0f5-46e1-a8c8-95ee7254923f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaStopped := s_bStaStopped;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>