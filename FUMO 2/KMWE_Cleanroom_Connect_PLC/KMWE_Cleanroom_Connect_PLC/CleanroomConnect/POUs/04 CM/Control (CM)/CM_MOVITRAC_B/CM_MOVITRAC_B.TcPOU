<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CM_MOVITRAC_B" Id="{fa9a3c02-fb9e-4f0d-9f6f-ce091f3d4d49}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CM_MOVITRAC_B EXTENDS CM_Base //IMPLEMENTS I_Motor_base
VAR_INPUT
	i_stSettings : ST_SettingsMOVITRAC_B_WithBrake;
	i_bIclkForward : BOOL := TRUE; //TRUE = interlocked
	i_bIclkBackward : BOOL := TRUE; //TRUE = interlocked
	
	i_ref_eCtrlState : REFERENCE TO E_CtrlState;
END_VAR

VAR
	// Inputs
	I_bStaReadyForOperation AT %I* : BOOL; // Drive is ready operation (no error)
	I_bStaMotorIsRunning AT %I* : BOOL; // Drive/motor is running
	
	// Outputs
	Q_bCmdReset AT %Q* : BOOL; // Command to reset drive.
	Q_bCmdEnable AT %Q* : BOOL; // Command to enable drive.
	Q_bCmdStartCW AT %Q* : BOOL; // Command start in clock-wise direction.
	Q_bCmdStartCCW AT %Q* : BOOL; // Command start in counter-clock-wise direction.
	
	Q_bCmdReleaseBrake AT %Q* : BOOL; // Command to release brake
	Q_nSetTargetSpeed AT %Q* : INT; // Target speed
	
	// Force outputs (IO-test functions)
	s_fbForceCmdReset : FB_ForceOutput;
	s_fbForceCmdEnable : FB_ForceOutput;
	s_fbForceCmdStartCW : FB_ForceOutput;
	s_fbForceCmdStartCCW : FB_ForceOutput;
	s_fbForceCmdReleaseBrake : FB_ForceOutput;
	s_fForceValueTargetSpeed : LREAL; //[0..100%]
	
	// Interlocks
	s_bIclkForward : BOOL;
	s_bIclkBackward : BOOL;
	
	// Requests
	s_bReqStop : BOOL;
	s_bReqStartForward : BOOL;
	s_bReqStartBackward : BOOL;
	s_bReqReleaseBrake : BOOL;
	s_bReqApplyBrake : BOOL;
	s_bReqReset : BOOL;
	
	// Commands
	s_bCmdEnable : BOOL;
	s_bCmdReset : BOOL;
	s_bCmdForward : BOOL;
	s_bCmdBackward : BOOL;
	s_bCmdReleaseBrake : BOOL;
		
	// States
	s_bStaReadyForOperation: BOOL;
	s_bStaDriveError: BOOL;
	s_bStaBrakeReleased : BOOL;
	s_bStaMotorStopped : BOOL;
	s_bStaMotorRunningFwd : BOOL;
	s_bStaMotorRunningBwd : BOOL;
	s_bStaWarning : BOOL;
	
	s_sInterlockedReasonForward : STRING; //External interlocked reason for clarifying reason
	s_sInterlockedReasonBackward : STRING; //External interlocked reason for clarifying reason
	
	// Setpoints
	s_fTargetSpeed : LREAL; // Target speed [mm/s]
	
	// Timers
	s_tofResetPulse : TOF;
	s_tonMotorStoppedDelay : TON;
	
	// Alarms
	s_fbAlarmHandlerDriveError : FB_AlarmHandler;
	s_fbAlarmHandlerApplyingBrakeNotAllowed : FB_AlarmHandler;
	s_fbAlarmHandlerStartMotorNotAllowed : FB_AlarmHandler;
	s_fbAlarmHandlerMotorForwardInterlocked : FB_AlarmHandler;
	s_fbAlarmHandlerMotorBackwardInterlocked : FB_AlarmHandler;
	
	s_errDriveError : BOOL;
	s_wrnApplyingBrakeNotAllowed : BOOL;
	s_wrnStartMotorNotAllowed : BOOL;
	s_wrnMotorForwardInterlocked : BOOL;
	s_wrnMotorBackwardInterlocked : BOOL;
	
	//Hmi
	s_fbHmiBtnManualReleaseBrake : FB_HmiBtn;
	s_fbHmiBtnManualApplyBrake : FB_HmiBtn;
	s_fbHmiBtnManualForward : FB_HmiBtn;
	s_fbHmiBtnManualBackward : FB_HmiBtn;
	s_fbHmiBtnManualStop : FB_HmiBtn;
	s_fbHmiBtnManualReset : FB_HmiBtn;
	
	s_fbHmiLedBrakeReleased : FB_HmiLed;
	s_fbHmiLedMotorStopped : FB_HmiLed;
	s_fbHmiLedMotorRunningFwd : FB_HmiLed;
	s_fbHmiLedMotorRunningBwd : FB_HmiLed;
	s_fbHmiLedDriveError : FB_HmiLed;
	
	//Sequence
	eSeqMOVITRAC_B_WithBrake : E_SeqMOVITRAC_B_WithBrake;
	seqTimer : TON;
	seqPreStep : E_SeqMOVITRAC_B_WithBrake;
	s_sActStep : STRING;
	
END_VAR

VAR CONSTANT
	cMAX_INT_VALUE : INT := 32767;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{11b83f51-5f87-456d-a35a-77d461c1ecc9}">
      <Folder Name="Base" Id="{c371113a-7dbc-4a7b-af62-ea2326c80b07}" />
    </Folder>
    <Folder Name="Properties" Id="{da903959-0eba-44a7-a4b8-91c25055de14}" />
    <Method Name="_m_Alarms" Id="{7df04d62-5845-4a1e-8448-72d9b9d8341e}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

// Set error bits
s_errDriveError R= i_bCmdReset;
s_errDriveError S= i_bReqEnable AND s_bStaDriveError;

// Interlock warnings
IF s_bIclkForward AND NOT(s_bStaMotorStopped) THEN	
	s_wrnMotorForwardInterlocked := TRUE;
	m_Stop();
ELSIF NOT(s_bIclkForward) OR i_bCmdReset THEN
	s_wrnMotorForwardInterlocked := FALSE;
END_IF

IF s_bIclkBackward AND NOT(s_bStaMotorStopped) THEN
	s_wrnMotorBackwardInterlocked := TRUE;
	m_Stop();
ELSIF NOT(s_bIclkBackward) OR i_bCmdReset THEN
	s_wrnMotorBackwardInterlocked := FALSE;
END_IF

// Alarm Handlers ( config --> init() )
s_fbAlarmHandlerDriveError(i_bStaActive := s_errDriveError);

s_fbAlarmHandlerApplyingBrakeNotAllowed(i_bStaActive := s_wrnApplyingBrakeNotAllowed);
s_wrnApplyingBrakeNotAllowed R= s_bStaMotorStopped;
	
s_fbAlarmHandlerStartMotorNotAllowed(i_bStaActive := s_wrnStartMotorNotAllowed);
s_wrnStartMotorNotAllowed R= s_bStaBrakeReleased;
	
s_fbAlarmHandlerMotorForwardInterlocked(
	i_bStaActive := s_wrnMotorForwardInterlocked,
	i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Motor - interlocked to move forward, Reason: ',CONCAT(s_sInterlockedReasonForward, '.'))));
	
s_fbAlarmHandlerMotorBackwardInterlocked(
	i_bStaActive := s_wrnMotorBackwardInterlocked,
	i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Motor - interlocked to move backward, Reason: ',CONCAT(s_sInterlockedReasonBackward, '.'))));
	
// Alarm collector	
s_bStaError := 
	s_fbAlarmHandlerDriveError.q_bStaActive;

// Warning collector
s_bStaWarning := 
	s_fbAlarmHandlerApplyingBrakeNotAllowed.q_bStaActive
	OR s_fbAlarmHandlerStartMotorNotAllowed.q_bStaActive
	OR s_fbAlarmHandlerMotorForwardInterlocked.q_bStaActive
	OR s_fbAlarmHandlerMotorBackwardInterlocked.q_bStaActive;	
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{5370e1e6-83cf-430a-947c-f21bd2f1ec4b}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

//Exception error
IF (s_bStaError OR NOT(i_bReqEnable))
	AND (eSeqMOVITRAC_B_WithBrake < E_SeqMOVITRAC_B_WithBrake.STOPPING) THEN
		eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.STOPPING;
END_IF 

seqTimer(
	IN := (eSeqMOVITRAC_B_WithBrake = seqPreStep),
	PT := T#3600S);
	
s_tonMotorStoppedDelay(PT := i_stSettings.tBrakeReleasedDelay);	
	
seqPreStep := eSeqMOVITRAC_B_WithBrake;

s_sActStep := TO_STRING(eSeqMOVITRAC_B_WithBrake);
	
CASE eSeqMOVITRAC_B_WithBrake OF
	
	E_SeqMOVITRAC_B_WithBrake.INIT:
		_m_ResetAllRequests();
	
		//Reset commands
		s_bCmdForward := FALSE;
		s_bCmdBackward := FALSE;	
		s_bCmdReleaseBrake := FALSE;
		s_bCmdEnable := FALSE;
		s_fTargetSpeed := 0;
		
		//Reset states
		s_bStaBrakeReleased := FALSE;
		s_bStaDriveError := FALSE;
	
		eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.STOPPED; 
		
	E_SeqMOVITRAC_B_WithBrake.STOPPED:
		s_bStaBrakeReleased := FALSE;
		s_bReqStop := FALSE;
		s_bStaReadyForOperation := TRUE;
		
		IF (s_bReqReleaseBrake OR s_bReqStartForward OR s_bReqStartBackward) THEN
			eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.RELEASE_BRAKE;
		END_IF

		IF s_bReqApplyBrake THEN
			eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.APPLY_BRAKE;
		END_IF
		
		IF seqTimer.PT >= T#10S THEN
			s_bCmdEnable := FALSE;
		END_IF
			
	E_SeqMOVITRAC_B_WithBrake.RELEASE_BRAKE:
		s_bCmdReleaseBrake := TRUE;
		s_bReqReleaseBrake := FALSE;
		
		IF seqTimer.ET > i_stSettings.tBrakeReleasedDelay THEN
			s_bStaBrakeReleased := TRUE;
		END_IF
		
		IF s_bReqStop THEN
			eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.STOPPING;
		ELSIF s_bStaBrakeReleased AND s_bReqStartForward THEN
			s_bCmdEnable := TRUE;
			eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.MOVING_FORWARD;
		ELSIF s_bStaBrakeReleased AND s_bReqStartBackward THEN
			s_bCmdEnable := TRUE;
			eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.MOVING_BACKWARD;
		ELSIF s_bReqApplyBrake THEN
			eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.APPLY_BRAKE;
		END_IF
	
	E_SeqMOVITRAC_B_WithBrake.MOVING_FORWARD:
		s_bCmdForward := TRUE;
		s_bReqStartForward := FALSE;
		//s_fTargetSpeed is written by method 
	
		IF s_bReqStop THEN
			s_tonMotorStoppedDelay.IN := FALSE;
			eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.STOPPING;
		END_IF
		
	E_SeqMOVITRAC_B_WithBrake.MOVING_BACKWARD:
		s_bCmdBackward := TRUE;
		s_bReqStartBackward := FALSE;
		//s_fTargetSpeed is written by method 
	
		IF s_bReqStop THEN
			s_tonMotorStoppedDelay.IN := FALSE;
			eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.STOPPING;
		END_IF
	
	E_SeqMOVITRAC_B_WithBrake.STOPPING:
		s_bCmdForward := FALSE;
		s_bCmdBackward := FALSE;
		s_bReqStop := FALSE;
		
		s_tonMotorStoppedDelay.IN := s_bStaMotorStopped;
		
		IF s_tonMotorStoppedDelay.Q THEN	
			eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.APPLY_BRAKE;
		END_IF
	
	E_SeqMOVITRAC_B_WithBrake.APPLY_BRAKE:
		s_bCmdReleaseBrake := FALSE;
		s_bReqApplyBrake := FALSE;
		
		IF seqTimer.ET > i_stSettings.tBrakeReleasedDelay THEN
			s_bStaBrakeReleased := FALSE;
			
			IF (s_bStaError OR NOT(i_bReqEnable)) THEN
				eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.ERROR;
			ELSE
				_m_ResetAllRequests();
				eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.STOPPED;
			END_IF	
		END_IF
		
	E_SeqMOVITRAC_B_WithBrake.ERROR:
		IF (NOT(s_bStaError) AND i_bReqEnable) THEN
			eSeqMOVITRAC_B_WithBrake := E_SeqMOVITRAC_B_WithBrake.INIT;
		END_IF
		
END_CASE

_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{8b0bfc2b-cd59-45fd-861e-58a9388af400}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnManualReleaseBrake();
s_fbHmiBtnManualApplyBrake();
s_fbHmiBtnManualForward();
s_fbHmiBtnManualBackward();
s_fbHmiBtnManualStop();
s_fbHmiBtnManualReset();

//Led
s_fbHmiLedBrakeReleased(i_bStaLed := s_bStaBrakeReleased);
s_fbHmiLedMotorStopped(i_bStaLed := s_bStaMotorStopped);
s_fbHmiLedMotorRunningFwd(i_bStaLed := s_bStaMotorRunningFwd);
s_fbHmiLedMotorRunningBwd(i_bStaLed := s_bStaMotorRunningBwd);
s_fbHmiLedDriveError(i_bStaLed := s_bStaDriveError);

IF __ISVALIDREF(i_ref_eCtrlState) THEN
	//MAINTENANCE-mode is running
	IF (i_eCtrlMode = E_CtrlMode.MAINTENANCE) AND (i_ref_eCtrlState = E_CtrlState.RUNNING) THEN
		s_fbHmiBtnManualReleaseBrake.p_bStaVisible := TRUE;
		s_fbHmiBtnManualReleaseBrake.p_bStaEnabled := i_bReqEnable;
		
		s_fbHmiBtnManualApplyBrake.p_bStaVisible := TRUE;
		s_fbHmiBtnManualApplyBrake.p_bStaEnabled := i_bReqEnable AND s_bStaMotorStopped;
		
		s_fbHmiBtnManualForward.p_bStaVisible := TRUE;
		s_fbHmiBtnManualForward.p_bStaEnabled := i_bReqEnable AND s_bStaMotorStopped AND NOT(i_bIclkForward);
		
		s_fbHmiBtnManualBackward.p_bStaVisible := TRUE;
		s_fbHmiBtnManualBackward.p_bStaEnabled := i_bReqEnable AND s_bStaMotorStopped AND NOT(i_bIclkBackward);
		
		s_fbHmiBtnManualStop.p_bStaVisible := TRUE;
		s_fbHmiBtnManualStop.p_bStaEnabled := TRUE;
		
		s_fbHmiBtnManualReset.p_bStaVisible := TRUE;
		s_fbHmiBtnManualReset.p_bStaEnabled := TRUE;
		
		//Maintenance commands from hmi buttons
		IF s_fbHmiBtnManualReleaseBrake.p_osrBtnPress THEN
			m_ReleaseBrake();
		END_IF
	
		IF s_fbHmiBtnManualApplyBrake.p_osrBtnPress THEN
			m_ApplyBrake();
		END_IF
			
		IF s_fbHmiBtnManualStop.p_osrBtnPress THEN
			m_Stop();	
		ELSIF s_fbHmiBtnManualForward.p_osrBtnPress THEN
			m_StartForward(i_rTargetSpeed := s_fTargetSpeed);
		ELSIF s_fbHmiBtnManualBackward.p_osrBtnPress THEN
			m_StartBackward(i_rTargetSpeed := s_fTargetSpeed);
		END_IF

		IF s_fbHmiBtnManualReset.p_osrBtnPress THEN
			m_Reset();
		END_IF
		
	//other-mode	
	ELSE
		s_fbHmiBtnManualReleaseBrake.p_bStaVisible := FALSE;
		s_fbHmiBtnManualReleaseBrake.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnManualApplyBrake.p_bStaVisible := FALSE;
		s_fbHmiBtnManualApplyBrake.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnManualForward.p_bStaVisible := FALSE;
		s_fbHmiBtnManualForward.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnManualBackward.p_bStaVisible := FALSE;
		s_fbHmiBtnManualBackward.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnManualStop.p_bStaVisible := FALSE;
		s_fbHmiBtnManualStop.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnManualReset.p_bStaVisible := FALSE;
		s_fbHmiBtnManualReset.p_bStaEnabled := FALSE;
	END_IF
END_IF
	
_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{10fb3c9f-1aaa-45dc-b899-79bd4e709ce6}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Alarm config
s_fbAlarmHandlerDriveError.i_sAlarmText := CONCAT(i_sCmName, ': Drive - has error (check drive).');
s_fbAlarmHandlerDriveError.i_eAlarmLevel := E_AlarmLevel.Alarm;
	
s_fbAlarmHandlerApplyingBrakeNotAllowed.i_sAlarmText := CONCAT(i_sCmName, ': Brake - not allowed to be applied (motor not stopped).');
s_fbAlarmHandlerApplyingBrakeNotAllowed.i_eAlarmLevel := E_AlarmLevel.Warning;
	
s_fbAlarmHandlerStartMotorNotAllowed.i_sAlarmText := CONCAT(i_sCmName, ': Motor - not allowed to start (brake not released).');
s_fbAlarmHandlerStartMotorNotAllowed.i_eAlarmLevel := E_AlarmLevel.Warning;
	
s_fbAlarmHandlerMotorForwardInterlocked.i_eAlarmLevel := E_AlarmLevel.Warning;
	
s_fbAlarmHandlerMotorBackwardInterlocked.i_eAlarmLevel := E_AlarmLevel.Warning;

//Hmi 
	//Buttons
	s_fbHmiBtnManualReleaseBrake.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualReleaseBrake.p_bStaVisible := FALSE;
	s_fbHmiBtnManualReleaseBrake.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualReleaseBrake.p_sBtnText := 'Release Brake';
	
	s_fbHmiBtnManualApplyBrake.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualApplyBrake.p_bStaVisible := FALSE;
	s_fbHmiBtnManualApplyBrake.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualApplyBrake.p_sBtnText := 'Apply Brake';
	
	s_fbHmiBtnManualForward.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualForward.p_bStaVisible := FALSE;
	s_fbHmiBtnManualForward.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualForward.p_sBtnText := 'Move Forward';
	
	s_fbHmiBtnManualBackward.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualBackward.p_bStaVisible := FALSE;
	s_fbHmiBtnManualBackward.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualBackward.p_sBtnText := 'Move Backward';
	
	s_fbHmiBtnManualStop.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualStop.p_bStaVisible := FALSE;
	s_fbHmiBtnManualStop.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualStop.p_sBtnText := 'Stop';

	s_fbHmiBtnManualReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualReset.p_bStaVisible := FALSE;
	s_fbHmiBtnManualReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualReset.p_sBtnText := 'Reset';
	
	//Leds
	s_fbHmiLedBrakeReleased.p_bStaVisible := FALSE;
	s_fbHmiLedBrakeReleased.p_sToHmiDescriptionLed := 'Brake Released';
	
	s_fbHmiLedMotorStopped.p_bStaVisible := FALSE;
	s_fbHmiLedMotorStopped.p_sToHmiDescriptionLed := 'Motor Stopped';
	
	s_fbHmiLedMotorRunningFwd.p_bStaVisible := FALSE;
	s_fbHmiLedMotorRunningFwd.p_sToHmiDescriptionLed := 'Motor Running Fwd';
	
	s_fbHmiLedMotorRunningBwd.p_bStaVisible := FALSE;
	s_fbHmiLedMotorRunningBwd.p_sToHmiDescriptionLed := 'Motor Running Bwd';
	
	s_fbHmiLedDriveError.p_bStaVisible := FALSE;
	s_fbHmiLedDriveError.p_sToHmiDescriptionLed := 'Drive Error';
	
_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{e38cdb59-a84f-476e-9954-e5b28d6d08e3}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

s_bStaReadyForOperation := I_bStaReadyForOperation;
s_bStaDriveError := NOT(I_bStaReadyForOperation);
s_bStaMotorStopped := NOT(I_bStaMotorIsRunning);
s_bStaMotorRunningFwd := I_bStaMotorIsRunning AND Q_bCmdStartCW;
s_bStaMotorRunningBwd := I_bStaMotorIsRunning  AND Q_bCmdStartCCW;

s_bIclkForward := i_bIclkForward;
s_bIclkBackward := i_bIclkBackward;

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{ba15960a-e792-4086-9871-b1105c2a6ed2}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

{warning #TODO: Nog bepalen OF het beter is om onderstaande code te verwerken in FB_Force output}
IF __ISVALIDREF(i_ref_eCtrlState) THEN
	IF (i_eCtrlMode <> E_CtrlMode.IO) OR (i_ref_eCtrlState <> E_CtrlState.RUNNING) THEN
		s_fbForceCmdEnable.i_eForceValue := E_ForceValue.RELEASED;
		s_fbForceCmdReset.i_eForceValue := E_ForceValue.RELEASED;
		s_fbForceCmdStartCW.i_eForceValue := E_ForceValue.RELEASED;
		s_fbForceCmdStartCCW.i_eForceValue := E_ForceValue.RELEASED;
		s_fbForceCmdReleaseBrake.i_eForceValue := E_ForceValue.RELEASED;
		s_fForceValueTargetSpeed := 0.0;
	END_IF
END_IF 

//Force outputs false if brake output is nog true
IF NOT(Q_bCmdReleaseBrake) THEN
	s_fbForceCmdStartCW.i_eForceValue := E_ForceValue.RELEASED;
	s_fbForceCmdStartCCW.i_eForceValue := E_ForceValue.RELEASED;
END_IF
	
s_tofResetPulse(PT := T#1S, IN := i_bCmdReset OR s_bReqReset);
s_bCmdReset := s_tofResetPulse.Q;
s_bReqReset := FALSE;

s_fbForceCmdEnable(
	i_ref_bCmdInput := s_bCmdEnable,
	i_ref_bCmdOutput := Q_bCmdEnable);
	
s_fbForceCmdReset(
	i_ref_bCmdInput := s_bCmdReset,
	i_ref_bCmdOutput := Q_bCmdReset);
	
s_fbForceCmdStartCW(
	i_ref_bCmdInput := s_bCmdForward,
	i_ref_bCmdOutput := Q_bCmdStartCW);
	
s_fbForceCmdStartCCW(
	i_ref_bCmdInput := s_bCmdBackward,
	i_ref_bCmdOutput := Q_bCmdStartCCW);
	
s_fbForceCmdReleaseBrake(
	i_ref_bCmdInput := s_bCmdReleaseBrake,
	i_ref_bCmdOutput := Q_bCmdReleaseBrake);

IF s_fForceValueTargetSpeed = 0.0 THEN
	Q_nSetTargetSpeed := LREAL_TO_INT(s_fTargetSpeed / i_stSettings.rMaxTargetSpeed * cMAX_INT_VALUE); // [mm/s]
ELSE	
	Q_nSetTargetSpeed := LREAL_TO_INT(s_fForceValueTargetSpeed / 100.0  * cMAX_INT_VALUE); // [%]
END_IF 
	
_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_ResetAllRequests" Id="{a63c1714-18c0-4e0c-82e9-37ffe0e0464a}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PRIVATE _m_ResetAllRequests
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_bReqStop :=
s_bReqStartForward :=
s_bReqStartBackward :=
s_bReqReleaseBrake :=
s_bReqApplyBrake :=
s_bReqReset := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ApplyBrake" Id="{da833913-48c7-4bfc-979e-1bb75e0dd689}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_ApplyBrake : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqApplyBrake := TRUE;

m_ApplyBrake := NOT(s_bStaBrakeReleased);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_ReleaseBrake" Id="{e96b1d6a-c145-4ed0-b15b-db24c9d0f5cd}" FolderPath="Methods\">
      <Declaration><![CDATA[/// Release brake
METHOD PUBLIC m_ReleaseBrake : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqReleaseBrake := TRUE;

m_ReleaseBrake := s_bStaBrakeReleased;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Reset" Id="{c3f29afd-c735-464b-b9f7-dd53b191eb73}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqReset := TRUE;

m_Reset := s_bCmdReset;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_StartBackward" Id="{3070eb62-39b9-41c5-ab6f-4f29bd1c0220}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_StartBackward : BOOL
VAR_INPUT
	i_rTargetSpeed : LREAL; // Target speed [mm/s]
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

//--IF NOT(i_bIclkBackward) THEN
//--IF NOT(i_fbInterlockConvBwd.p_bInterlocked) THEN
IF NOT(s_bIclkBackward) THEN
	s_bReqStartBackward := TRUE;
	
	IF i_rTargetSpeed < 0 THEN
		s_fTargetSpeed := 0;
	ELSIF i_rTargetSpeed > cMAX_INT_VALUE THEN	
		i_rTargetSpeed := cMAX_INT_VALUE;
	ELSE 
		s_fTargetSpeed := i_rTargetSpeed;
	END_IF
	
ELSE
	s_wrnMotorBackwardInterlocked := TRUE;
END_IF

m_StartBackward := s_bCmdBackward;
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_StartForward" Id="{39ee694a-3d82-40c1-89dd-29f4a0ed3ffe}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_StartForward : BOOL
VAR_INPUT
	i_rTargetSpeed : LREAL; // Target speed [mm/s]
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

IF NOT(s_bIclkForward) THEN
	s_bReqStartForward := TRUE;
	
	IF i_rTargetSpeed < 0 THEN
		s_fTargetSpeed := 0;
	ELSIF i_rTargetSpeed > cMAX_INT_VALUE THEN	
		i_rTargetSpeed := cMAX_INT_VALUE;
	ELSE 
		s_fTargetSpeed := i_rTargetSpeed;
	END_IF
	
ELSE	
	s_wrnMotorForwardInterlocked := TRUE;
END_IF

m_StartForward := s_bCmdForward;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Stop" Id="{9f4f7520-546f-4d70-8901-b1fe2259dd85}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqStop := TRUE;

m_Stop := s_bStaMotorStopped;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bStaBrakeReleased" Id="{a5ae057d-10d6-4733-b5dd-5152d1849281}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaBrakeReleased : BOOL]]></Declaration>
      <Get Name="Get" Id="{807fee9a-9ade-4c40-8d61-217989029805}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaBrakeReleased := s_bStaBrakeReleased;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaBrakeReleasedQ" Id="{8687dc58-c312-40e6-828c-105d3b2ee9ac}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaBrakeReleasedQ : BOOL]]></Declaration>
      <Get Name="Get" Id="{768887b9-8f80-456b-9674-b6b3a4eac91e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaBrakeReleasedQ := Q_bCmdReleaseBrake;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaMotorRunning" Id="{63a7d5b0-0187-4f50-88ae-20969844be04}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaMotorRunning : BOOL]]></Declaration>
      <Get Name="Get" Id="{3540dc03-69f4-489e-a43f-e10f4335894d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaMotorRunning := s_bStaReadyForOperation AND NOT(s_bStaMotorStopped);
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaMotorStopped" Id="{b36f4974-cbc4-4429-a6eb-dc28eb73aab3}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaMotorStopped : BOOL]]></Declaration>
      <Get Name="Get" Id="{f5cfef73-d561-4b91-80a5-530b320cf15c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
//--p_bStaMotorStopped := s_bStaMotorStopped;

p_bStaMotorStopped :=
	(eSeqMOVITRAC_B_WithBrake = E_SeqMOVITRAC_B_WithBrake.STOPPED)
	OR (eSeqMOVITRAC_B_WithBrake = E_SeqMOVITRAC_B_WithBrake.ERROR);
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaWarning" Id="{5b5f03fd-2411-44c8-aae7-3196706a8139}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_bStaWarning : BOOL]]></Declaration>
      <Get Name="Get" Id="{cd7f0767-6cc8-4566-ac13-1325d1723ac3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaWarning := s_bStaWarning;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_sInterlockedReasonBackward" Id="{0c7533b0-6229-4bd7-a6ac-beef68a0441b}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_sInterlockedReasonBackward : STRING(GVL.g_MAX_LEN_INTERLOCK_REASON)]]></Declaration>
      <Get Name="Get" Id="{89d301ab-99e1-407a-8ad8-3decf2378b91}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_sInterlockedReasonBackward := s_sInterlockedReasonBackward;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f1403b8e-daa5-4ba7-a249-a1171f717224}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_sInterlockedReasonBackward := p_sInterlockedReasonBackward;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="p_sInterlockedReasonForward" Id="{ee05b23b-0c2f-4ed6-802a-db01c009192a}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_sInterlockedReasonForward : STRING(GVL.g_MAX_LEN_INTERLOCK_REASON)]]></Declaration>
      <Get Name="Get" Id="{d1567d66-dae7-4c45-a522-cf9b9ae0c9db}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_sInterlockedReasonForward := s_sInterlockedReasonForward;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{232bb7c9-7ead-42b4-a88b-2101a33b73a3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_sInterlockedReasonForward := p_sInterlockedReasonForward;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="CM_MOVITRAC_B">
      <LineId Id="410" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="411" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B._m_Alarms">
      <LineId Id="28" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="103" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="159" Count="2" />
      <LineId Id="158" Count="0" />
      <LineId Id="163" Count="5" />
      <LineId Id="162" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="143" Count="1" />
      <LineId Id="140" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="148" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="174" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B._m_Devices">
      <LineId Id="6" Count="3" />
      <LineId Id="294" Count="0" />
      <LineId Id="265" Count="3" />
      <LineId Id="155" Count="0" />
      <LineId Id="150" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="298" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="242" Count="1" />
      <LineId Id="73" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="270" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="134" Count="2" />
      <LineId Id="279" Count="0" />
      <LineId Id="138" Count="1" />
      <LineId Id="145" Count="0" />
      <LineId Id="140" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="275" Count="2" />
      <LineId Id="274" Count="0" />
      <LineId Id="280" Count="2" />
      <LineId Id="269" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="156" Count="3" />
      <LineId Id="177" Count="0" />
      <LineId Id="180" Count="1" />
      <LineId Id="186" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="183" Count="1" />
      <LineId Id="285" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="196" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="188" Count="2" />
      <LineId Id="302" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="211" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="300" Count="1" />
      <LineId Id="290" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="236" Count="3" />
      <LineId Id="272" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="229" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="234" Count="1" />
      <LineId Id="233" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B._m_Hmi">
      <LineId Id="17" Count="3" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="132" Count="3" />
      <LineId Id="128" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="137" Count="3" />
      <LineId Id="307" Count="1" />
      <LineId Id="141" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="224" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="269" Count="17" />
      <LineId Id="310" Count="0" />
      <LineId Id="287" Count="17" />
      <LineId Id="239" Count="3" />
      <LineId Id="252" Count="15" />
      <LineId Id="250" Count="1" />
      <LineId Id="223" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="87" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B._m_Init">
      <LineId Id="21" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="82" Count="2" />
      <LineId Id="87" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="102" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="34" Count="22" />
      <LineId Id="27" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="3" />
      <LineId Id="112" Count="5" />
      <LineId Id="72" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B._m_Inputs">
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="10" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B._m_Outputs">
      <LineId Id="29" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="181" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="154" Count="3" />
      <LineId Id="172" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="217" Count="1" />
      <LineId Id="159" Count="10" />
      <LineId Id="150" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="179" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="204" Count="2" />
      <LineId Id="203" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B._m_ResetAllRequests">
      <LineId Id="6" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.m_ApplyBrake">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.m_ReleaseBrake">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="61" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.m_Reset">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="38" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.m_StartBackward">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="52" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.m_StartForward">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="73" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="5" />
      <LineId Id="49" Count="0" />
      <LineId Id="74" Count="2" />
      <LineId Id="78" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.m_Stop">
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.p_bStaBrakeReleased.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.p_bStaBrakeReleasedQ.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.p_bStaMotorRunning.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.p_bStaMotorStopped.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="13" Count="3" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.p_bStaWarning.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.p_sInterlockedReasonBackward.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.p_sInterlockedReasonBackward.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.p_sInterlockedReasonForward.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_MOVITRAC_B.p_sInterlockedReasonForward.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>