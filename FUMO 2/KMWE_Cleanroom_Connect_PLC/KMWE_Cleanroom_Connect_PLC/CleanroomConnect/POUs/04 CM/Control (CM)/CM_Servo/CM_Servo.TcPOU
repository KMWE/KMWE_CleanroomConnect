<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CM_Servo" Id="{29dfdbae-f16d-497a-b262-2baea4701d77}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CM_Servo EXTENDS CM_Base //IMPLEMENTS I_Servo

VAR CONSTANT
	c_MAX_FB_NAME_LENGTH : USINT := 8; //Maximum feedback-name length
END_VAR

VAR_INPUT
	i_refAxis : REFERENCE TO Tc2_MC2.AXIS_REF;
	
	i_ref_setting : REFERENCE TO ST_SettingsServo;	
	i_bIclkPos : BOOL := TRUE; //TRUE = interlocked
	i_bIclkNeg : BOOL := TRUE; //TRUE = interlocked
	
	i_ref_eCtrlState : REFERENCE TO E_CtrlState;
	
	i_mcHomingMode : Tc2_MC2.MC_HomingMode := Tc2_MC2.MC_HomingMode.MC_Direct;
	i_mcBufferMode : Tc2_MC2.MC_BufferMode := Tc2_MC2.MC_BufferMode.MC_Aborting;
END_VAR

VAR
	// Inputs
	I_bEnable AT %I* : BOOL; //Enable from safety controller
	I_bDetReferenceSwitch AT %I* : BOOL; //Reference-/home switch
	I_bDetLimitSwitchPos AT %I* : BOOL; //Limit switch positive-/CW- direction
	I_bDetLimitSwitchNeg AT %I* : BOOL; //Limit switch negative-/CCW- direction
	
	// Outputs
		
	//Interlocks
	s_bIclkPos : BOOL;
	s_bIclkNeg : BOOL;
	s_sInterlockedReasonPos : STRING; //External interlocked reason for clarifying reason
	s_sInterlockedReasonNeg : STRING; //External interlocked reason for clarifying reason
	
	//Requests
	s_bReqNcStop : BOOL;
	s_bReqNcReset : BOOL;
	s_bReqNcHome : BOOL;
	s_bReqNcJog : BOOL;
	s_bReqNcMoveAbs : BOOL;	

	// States
	s_bStaEnabled : BOOL;
	s_bStaReferenceSwitch : BOOL;
	s_bStaLimitSwitchPos : BOOL;
	s_bStaLimitSwitchNeg : BOOL;
	
	s_bStaEnabledControl : BOOL;
	s_bStaEnabledPos : BOOL;
	s_bStaEnabledNeg : BOOL;
	s_bStaReady : BOOL;
	s_bStaHomed : BOOL;
	s_bStaStandstill : BOOL;
	s_bStaMoving : BOOL;
	s_bStaAtPosition : BOOL;
	s_bStaDriveError : BOOL;
	s_bStaWarning : BOOL;
	
	s_fActPosition : LREAL;
	s_fActVelocity : LREAL;
	s_fActTorque : LREAL;
	
	//Properties
	s_bStatus : BOOL;
	s_bDone : BOOL; 
	s_bBusy : BOOL; 
	s_bActive : BOOL; 
	s_bCommandAborted : BOOL;
	s_bError : BOOL; 
	s_nErrorID : UDINT;
	
	// Setpoints
	s_fSetTargetPosition : LREAL;
	
	s_sCfgNegName : STRING(c_MAX_FB_NAME_LENGTH) := 'Neg.';	
	s_sCfgPosName : STRING(c_MAX_FB_NAME_LENGTH) := 'Pos.';
	
	// Alarms
	s_fbAlarmHandlerDriveError : FB_AlarmHandler;
	s_fbAlarmHandlerStartMotorNotAllowed : FB_AlarmHandler;
	
	s_fbAlarmHandlerMotorPosInterlocked : FB_AlarmHandler;
	s_fbAlarmHandlerMotorNegInterlocked : FB_AlarmHandler;
	s_fbAlarmHandlerNotEnabled : FB_AlarmHandler;
	s_fbAlarmHandlerLimitPositiveReached : FB_AlarmHandler;
	s_fbAlarmHandlerLimitNegativeReached : FB_AlarmHandler;
	
	s_errDriveError : BOOL;
	s_wrnMotorPosInterlocked : BOOL;
	s_wrnMotorNegInterlocked : BOOL;

	// NC-task function blocks
	s_fbMcPower : Tc2_MC2.MC_Power;
	s_fbMcReset : Tc2_MC2.MC_Reset;
	s_fbMcHome : Tc2_MC2.MC_Home;
	s_fbMcJog : Tc2_MC2.MC_Jog;
	s_fbMcMoveAbs : Tc2_MC2.MC_MoveAbsolute;
	s_fbMcStop : Tc2_MC2.MC_Stop;
	s_fOverride : LREAL := 100.0;
	
	//Hmi
	s_stHmiData : ST_Servo_HMI;
	s_bHmiInit : BOOL := FALSE;
	
	s_fbHmiBtnHome : FB_HmiBtn;
	s_fbHmiBtnJogPos : FB_HmiBtn;
	s_fbHmiBtnJogNeg : FB_HmiBtn;
	s_fbHmiBtnMoveAbs : FB_HmiBtn;
	s_fbHmiBtnReset	: FB_HmiBtn;
	s_fbHmiBtnStop: FB_HmiBtn;
	
	s_fbHmiLedEnabledControl : FB_HmiLed;
	s_fbHmiLedEnabledPos : FB_HmiLed;
	s_fbHmiLedEnabledNeg : FB_HmiLed;
	s_fbHmiLedReady : FB_HmiLed;
	s_fbHmiLedHomed : FB_HmiLed;
	s_fbHmiLedStandstill : FB_HmiLed;
	s_fbHmiLedMoving : FB_HmiLed;
	s_fbHmiLedAtPosition : FB_HmiLed;
	s_fbHmiLedDriveError : FB_HmiLed;
	
	//Sequence
	s_eSeqNcTask : E_SeqServo;
	s_fbSeqNcTaskControl : FB_SeqControl;
	s_mcDirection : Tc2_MC2.MC_Direction;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//--CASE LREAL_TO_USINT(s_fOverride) OF
//--	0..12 : s_fOverride := 0.0;
//--	13..37 : s_fOverride := 25.0;
//--	38..62 : s_fOverride := 50.0;
//--	63..87 : s_fOverride := 75.0;
//--	88..100 : s_fOverride := 100.0;
//--END_CASE

s_fbMcPower(
	Axis := i_refAxis,
	Enable := I_bEnable,
	Enable_Positive := I_bDetLimitSwitchPos,
	Enable_Negative := I_bDetLimitSwitchNeg,
	Override := s_fOverride,
	BufferMode := TC2_MC2.MC_BufferMode.MC_Aborting,
	Options := ,
	Status => s_bStatus,
	Busy => s_bBusy,
	Active => s_bActive,
	Error => s_bError,
	ErrorID => s_nErrorID);


	
SUPER^();
]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{c7dc02dc-f2cb-44e5-89eb-2e4085b6a909}">
      <Folder Name="Base" Id="{1f8bf144-7c2c-4c0f-9741-6defd5a25c8d}" />
    </Folder>
    <Folder Name="Properties" Id="{c3e008a7-9dfe-49e0-9cc5-18c79327535a}" />
    <Method Name="_m_Alarms" Id="{c522f959-6f84-4a96-b11e-07b34d6dcd1a}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
VAR
	s_bPositiveDirection : BOOL; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

// Set error bits
s_errDriveError := (i_bReqEnable AND s_bStaDriveError) AND NOT(i_bCmdReset);

// Interlock warnings
s_bPositiveDirection := (i_refAxis.NcToPlc.ActVelo > 0);

IF s_bIclkPos AND NOT(s_bStaStandstill) AND s_bPositiveDirection THEN	
	s_wrnMotorPosInterlocked := TRUE;
	
	m_Stop(
		i_fDec := i_ref_setting.fStopDec,
		i_fJrk := i_ref_setting.fStopJrk);
	
ELSIF NOT(s_bIclkPos) OR i_bCmdReset THEN
	s_wrnMotorPosInterlocked := FALSE;
END_IF

IF s_bIclkNeg AND NOT(s_bStaStandstill) AND NOT(s_bPositiveDirection) THEN
	s_wrnMotorNegInterlocked := TRUE;
	
	m_Stop(
		i_fDec := i_ref_setting.fStopDec,
		i_fJrk := i_ref_setting.fJogJrk);
		
ELSIF NOT(s_bIclkNeg) OR i_bCmdReset THEN
	s_wrnMotorNegInterlocked := FALSE;
END_IF

// Alarm Handlers
s_fbAlarmHandlerDriveError(
	i_bStaActive := s_errDriveError,
	i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Drive - has error: ', UDINT_TO_STRING(i_refAxis.NcToPlc.ErrorCode))));
	
s_fbAlarmHandlerMotorPosInterlocked(
	i_bStaActive := s_wrnMotorPosInterlocked,
	i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Motor - interlocked to move forward, Reason: ',CONCAT(s_sInterlockedReasonPos, '.'))));
	
s_fbAlarmHandlerMotorNegInterlocked(
	i_bStaActive := s_wrnMotorNegInterlocked,
	i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Motor - interlocked to move backward, Reason: ',CONCAT(s_sInterlockedReasonNeg, '.'))));

s_fbAlarmHandlerNotEnabled(
	i_bStaActive := NOT(s_bStaEnabled));
	
s_fbAlarmHandlerLimitPositiveReached(
	i_bStaActive := NOT(s_bStaLimitSwitchPos));
	
s_fbAlarmHandlerLimitNegativeReached(
	i_bStaActive := NOT(s_bStaLimitSwitchNeg));	
	
// Alarm collector	
s_bStaError := 
	s_fbAlarmHandlerDriveError.q_bStaActive;

// Warning collector
s_bStaWarning := 
	s_fbAlarmHandlerMotorPosInterlocked.q_bStaActive
	OR s_fbAlarmHandlerMotorNegInterlocked.q_bStaActive
	OR s_fbAlarmHandlerNotEnabled.q_bStaActive
	OR s_fbAlarmHandlerLimitPositiveReached.q_bStaActive
	OR s_fbAlarmHandlerLimitNegativeReached.q_bStaActive;
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{9e243b00-6ff1-489e-8f7b-4b8502bb7008}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

s_fbSeqNcTaskControl(
	i_nSeqStep := s_eSeqNcTask, 
	i_sStepName := TO_STRING(s_eSeqNcTask), 
	i_bCmdReset := FALSE, 
	i_bStaError := FALSE);

//Exception stop
IF (s_eSeqNcTask <> E_SeqServo.STOP) AND s_bReqNcStop THEN 
	s_eSeqNcTask := E_SeqServo.STOP;
END_IF		

//Exception error
IF ((s_eSeqNcTask <> E_SeqServo.ERROR) OR (s_eSeqNcTask <> E_SeqServo.RESET)) AND s_bStaError THEN  
	s_eSeqNcTask := E_SeqServo.ERROR;
END_IF

CASE s_eSeqNcTask OF

	E_SeqServo.IDLE:
		
		IF s_bReqNcStop THEN 
			s_eSeqNcTask := E_SeqServo.STOP;
		ELSIF s_bReqNcHome THEN
			s_eSeqNcTask := E_SeqServo.HOME;
		ELSIF s_bReqNcJog THEN
			s_eSeqNcTask := E_SeqServo.JOG;
		ELSIF s_bReqNcMoveAbs THEN
			s_eSeqNcTask := E_SeqServo.MOVE_ABS;	
		END_IF
		
	E_SeqServo.STOP:
(*	s_fbMcStop(
		Axis := i_refAxis,
		Execute := s_bReqNcStop,
		Deceleration := i_ref_setting.fStopDec,
		Jerk := i_ref_setting.fStopJrk,
		Options := ,
		Done => s_bDone,
		Busy => s_bBusy,
		Active => s_bActive,
		CommandAborted => s_bCommandAborted,
		Error => s_bError,
		ErrorID => s_nErrorID);
*)
		IF s_fbMcStop.Done THEN
			s_bReqNcStop := FALSE;
			s_eSeqNcTask := E_SeqServo.IDLE;
		ELSIF s_fbMcStop.Error THEN
			s_bReqNcStop := FALSE;
			s_eSeqNcTask := E_SeqServo.ERROR;
		END_IF
			
	E_SeqServo.RESET:
		IF s_fbMcReset.Done THEN
			s_bReqNcReset := FALSE;
			s_eSeqNcTask := E_SeqServo.IDLE;
		ELSIF s_fbMcReset.Error THEN
			s_bReqNcReset := FALSE;
			s_eSeqNcTask := E_SeqServo.ERROR;	
		END_IF

	E_SeqServo.HOME:
(*		s_fbMcHome(
			Axis := i_refAxis,
			Execute := s_bReqNcHome,
			Position := i_ref_setting.fHomeOffset,
			HomingMode := i_mcHomingMode,
			BufferMode := i_mcBufferMode,
			Options := ,
			bCalibrationCam := I_bDetReferenceSwitch,
			Done => s_bDone,
			Busy => s_bBusy,
			Active => s_bActive,
			CommandAborted => s_bCommandAborted,
			Error => s_bError,
			ErrorID => s_nErrorID);	
*)	
		IF s_fbMcHome.Done THEN
			s_bReqNcHome := FALSE;
			s_eSeqNcTask := E_SeqServo.IDLE;
		ELSIF s_fbMcHome.ERROR THEN
			s_bReqNcHome := FALSE;
			s_eSeqNcTask := E_SeqServo.ERROR;
		END_IF
	
	E_SeqServo.JOG:
(*		s_fbMcJog(
			Axis := i_refAxis,
			JogForward := s_fbHmiBtnJogPos.p_bStaBtn,
			JogBackwards := s_fbHmiBtnJogNeg.p_bStaBtn,
			Mode := MC_JOGMODE_STANDARD_SLOW,
			Position := ,
			Velocity := i_ref_setting.fJogVel,
			Acceleration := i_ref_setting.fJogAcc,
			Deceleration := i_ref_setting.fJogDec,
			Jerk := i_ref_setting.fJogJrk,
			Done => s_bDone,
			Busy => s_bBusy,
			Active => s_bActive,
			CommandAborted => s_bCommandAborted,
			Error => s_bError,
			ErrorID => s_nErrorID);
*)	
		IF (NOT(s_fbHmiBtnJogPos.p_bStaBtn OR s_fbHmiBtnJogNeg.p_bStaBtn) AND NOT(s_fbMcJog.Busy)) OR s_fbMcJog.CommandAborted THEN
			s_bReqNcJog := FALSE;
			s_eSeqNcTask := E_SeqServo.IDLE;
		ELSIF s_fbMcJog.Error THEN
			s_bReqNcJog := FALSE;
			s_eSeqNcTask := E_SeqServo.ERROR;	
		END_IF
			
	E_SeqServo.MOVE_ABS:
(*		IF (i_eCtrlMode <> E_CtrlMode.AUTOMATIC) AND (i_eCtrlMode <> E_CtrlMode.MANUAL) THEN
			s_fbMcMoveAbs.Position := s_fSetTargetPosition;
			s_fbMcMoveAbs.Velocity := i_ref_setting.fAbsPosVel;
			s_fbMcMoveAbs.Acceleration := i_ref_setting.fAbsPosAcc;
			s_fbMcMoveAbs.Deceleration := i_ref_setting.fAbsPosDec;
			s_fbMcMoveAbs.Jerk := i_ref_setting.fAbsPosJrk;
		ELSE
			; //positining settings are written from the sequence (this could be different in each case)
		END_IF
			
		s_fbMcMoveAbs(
			Axis := i_refAxis,
			Execute := s_bReqNcMoveAbs, 
			Position := ,
			Velocity := ,
			Acceleration := ,
			Deceleration := ,
			Jerk := ,
			BufferMode := i_mcBufferMode,
			Options := ,
			Done => s_bDone,
			Busy => s_bBusy,
			Active => s_bActive,
			CommandAborted => s_bCommandAborted,
			Error => s_bError,
			ErrorID => s_nErrorID);
*)	
		IF s_fbMcMoveAbs.Done OR s_fbMcMoveAbs.CommandAborted THEN
			s_bReqNcMoveAbs := FALSE;
			s_eSeqNcTask := E_SeqServo.IDLE;
		ELSIF s_fbMcMoveAbs.Error THEN
			s_bReqNcMoveAbs := FALSE;
			s_eSeqNcTask := E_SeqServo.ERROR;
		END_IF
		
	E_SeqServo.ERROR:
(*		s_fbMcReset(
			Axis := i_refAxis,
			Execute := s_bReqNcReset,
			Done => s_bDone,
			Busy => s_bBusy,
			Error => s_bError,
			ErrorID => s_nErrorID);
*)	
		IF s_bReqNcReset THEN
			s_eSeqNcTask := E_SeqServo.RESET;
		END_IF
		
END_CASE


s_fbMcStop(
	Axis := i_refAxis,
	Execute := s_bReqNcStop,
	Deceleration := i_ref_setting.fStopDec,
	Jerk := i_ref_setting.fStopJrk,
	Options := ,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);

s_fbMcHome(
	Axis := i_refAxis,
	Execute := s_bReqNcHome,
	Position := i_ref_setting.fHomeOffset,
	HomingMode := i_mcHomingMode,
	BufferMode := i_mcBufferMode,
	Options := ,
	bCalibrationCam := I_bDetReferenceSwitch,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);	
	
s_fbMcJog(
	Axis := i_refAxis,
	JogForward := s_fbHmiBtnJogPos.p_bStaBtn,
	JogBackwards := s_fbHmiBtnJogNeg.p_bStaBtn,
	Mode := MC_JOGMODE_STANDARD_SLOW,
	Position := ,
	Velocity := i_ref_setting.fJogVel,
	Acceleration := i_ref_setting.fJogAcc,
	Deceleration := i_ref_setting.fJogDec,
	Jerk := i_ref_setting.fJogJrk,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);
	
IF (i_eCtrlMode <> E_CtrlMode.AUTOMATIC) AND (i_eCtrlMode <> E_CtrlMode.MANUAL) THEN
	s_fbMcMoveAbs.Position := s_fSetTargetPosition;
	s_fbMcMoveAbs.Velocity := i_ref_setting.fAbsPosVel;
	s_fbMcMoveAbs.Acceleration := i_ref_setting.fAbsPosAcc;
	s_fbMcMoveAbs.Deceleration := i_ref_setting.fAbsPosDec;
	s_fbMcMoveAbs.Jerk := i_ref_setting.fAbsPosJrk;
ELSE
	; //positining settings are written from the sequence (this could be different in each case)
END_IF
	
s_fbMcMoveAbs(
	Axis := i_refAxis,
	Execute := s_bReqNcMoveAbs, 
	Position := ,
	Velocity := ,
	Acceleration := ,
	Deceleration := ,
	Jerk := ,
	BufferMode := i_mcBufferMode,
	Options := ,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);

s_fbMcReset(
	Axis := i_refAxis,
	Execute := s_bReqNcReset,
	Done => s_bDone,
	Busy => s_bBusy,
	Error => s_bError,
	ErrorID => s_nErrorID);	

_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{d347e6d1-38a6-4faa-8926-d4b86b27fe7e}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//To Hmi
IF NOT(s_bHmiInit) THEN
	//General names
	s_stHmiData.sDescription := i_sCmName;
	s_stHmiData.sNamePos := s_sCfgPosName;
	s_stHmiData.sNameNeg := s_sCfgNegName;

	//Button names
	s_stHmiData.sNameHome := s_fbHmiBtnHome.p_sBtnText;
	s_stHmiData.sNameJogPos := s_fbHmiBtnJogPos.p_sBtnText;
	s_stHmiData.sNameJogNeg := s_fbHmiBtnJogNeg.p_sBtnText;
	s_stHmiData.sNameMoveAbs := s_fbHmiBtnMoveAbs.p_sBtnText;
	s_stHmiData.sNameReset := s_fbHmiBtnReset.p_sBtnText;
	s_stHmiData.sNameStop := s_fbHmiBtnStop.p_sBtnText;
	
	s_bHmiInit := TRUE;
END_IF

//Servo State
s_stHmiData.sState := TO_STRING(s_eSeqNcTask);

//Button enabled
s_stHmiData.bBtnHomeEnabled := s_fbHmiBtnHome.p_bStaEnabled;
s_stHmiData.bBtnJogPosEnabled := s_fbHmiBtnJogPos.p_bStaEnabled;
s_stHmiData.bBtnJogNegEnabled := s_fbHmiBtnJogNeg.p_bStaEnabled;
s_stHmiData.bBtnMoveAbsEnabled := s_fbHmiBtnMoveAbs.p_bStaEnabled;
s_stHmiData.bBtnResetEnabled := s_fbHmiBtnReset.p_bStaEnabled;
s_stHmiData.bBtnStopEnabled := s_fbHmiBtnStop.p_bStaEnabled;

s_stHmiData.bStaEnabledControl := s_bStaEnabledControl;
s_stHmiData.bStaEnabledPositive := s_bStaEnabledPos;
s_stHmiData.bStaEnabledNegative := s_bStaEnabledNeg;
s_stHmiData.bStaReady := s_bStaReady;
s_stHmiData.bStaHomed := s_bStaHomed;
s_stHmiData.bStaStandStill := s_bStaStandstill;
s_stHmiData.bStaMoving := s_bStaMoving;
s_stHmiData.bStaAtPosition := s_bStaAtPosition;
s_stHmiData.bStaDriveError := s_bStaDriveError;

s_stHmiData.fActPosition := s_fActPosition;
s_stHmiData.fActVelocity := s_fActVelocity;
s_stHmiData.fActTorque := s_fActTorque;

s_stHmiData.s_sInterlockedReasonPos := s_sInterlockedReasonPos;
s_stHmiData.s_sInterlockedReasonNeg := s_sInterlockedReasonNeg;

//From Hmi
//Button commands
IF s_stHmiData.bCmdHomePressed THEN
	s_fbHmiBtnHome.m_On();
ELSE
	s_fbHmiBtnHome.m_Off();	
END_IF

IF s_stHmiData.bCmdJogPosPressed THEN
	s_fbHmiBtnJogPos.m_On();
ELSE
	s_fbHmiBtnJogPos.m_Off();	
END_IF

IF s_stHmiData.bCmdJogNegPressed THEN
	s_fbHmiBtnJogNeg.m_On();
ELSE
	s_fbHmiBtnJogNeg.m_Off();	
END_IF

IF s_stHmiData.bCmdMoveAbsPressed THEN
	s_fbHmiBtnMoveAbs.m_On();
ELSE
	s_fbHmiBtnMoveAbs.m_Off();	
END_IF

IF s_stHmiData.bCmdResetPressed THEN
	s_fbHmiBtnReset.m_On();
ELSE
	s_fbHmiBtnReset.m_Off();	
END_IF

IF s_stHmiData.bCmdStopPressed THEN
	s_fbHmiBtnStop.m_On();
ELSE
	s_fbHmiBtnStop.m_Off();	
END_IF 

//Buttons
s_fbHmiBtnHome();
s_fbHmiBtnJogPos();
s_fbHmiBtnJogNeg();
s_fbHmiBtnMoveAbs();
s_fbHmiBtnReset();
s_fbHmiBtnStop();

//Leds
s_fbHmiLedEnabledControl(i_bStaLed := s_bStaEnabledControl);
s_fbHmiLedEnabledPos(i_bStaLed := s_bStaEnabledPos);
s_fbHmiLedEnabledNeg(i_bStaLed := s_bStaEnabledNeg);
s_fbHmiLedReady(i_bStaLed := s_bStaReady);
s_fbHmiLedHomed(i_bStaLed := s_bStaHomed);
s_fbHmiLedStandstill(i_bStaLed := s_bStaStandstill);
s_fbHmiLedMoving(i_bStaLed := s_bStaMoving);
s_fbHmiLedAtPosition(i_bStaLed := s_bStaAtPosition);
s_fbHmiLedDriveError(i_bStaLed := s_bStaDriveError);

IF __ISVALIDREF(i_ref_eCtrlState) THEN
	//MAINTENANCE-mode is running
	IF (i_eCtrlMode = E_CtrlMode.MAINTENANCE) AND (i_ref_eCtrlState = E_CtrlState.RUNNING) THEN
		s_fbHmiBtnHome.p_bStaVisible := TRUE;
		s_fbHmiBtnHome.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaStandstill;	

		s_fbHmiBtnJogPos.p_bStaVisible := TRUE;
		s_fbHmiBtnJogPos.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaEnabledPos AND NOT(i_bIclkPos) AND NOT(s_fbMcMoveAbs.Busy);
		
		s_fbHmiBtnJogNeg.p_bStaVisible := TRUE;
		s_fbHmiBtnJogNeg.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaEnabledNeg AND NOT(i_bIclkNeg) AND NOT(s_fbMcMoveAbs.Busy);
	
		s_fbHmiBtnMoveAbs.p_bStaVisible := TRUE;
		s_fbHmiBtnMoveAbs.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaEnabledPos AND s_bStaEnabledNeg AND s_bStaStandstill AND s_bStaHomed AND NOT(i_bIclkPos) AND NOT(i_bIclkNeg);
		
		s_fbHmiBtnReset.p_bStaVisible := TRUE;
		s_fbHmiBtnReset.p_bStaEnabled := TRUE;
		
		s_fbHmiBtnStop.p_bStaVisible := TRUE;
		s_fbHmiBtnStop.p_bStaEnabled := TRUE;
		
		//Maintenance commands from hmi buttons
		IF s_fbHmiBtnStop.p_osrBtnPress THEN
			s_bReqNcStop := TRUE;
		END_IF
		
		IF s_fbHmiBtnReset.p_osrBtnPress THEN
			s_bReqNcReset := TRUE;
		END_IF
		
		IF s_fbHmiBtnHome.p_osrBtnPress THEN
			s_bReqNcHome := TRUE;
		END_IF
		
		IF s_fbHmiBtnJogNeg.p_osrBtnPress THEN
			s_mcDirection := Tc2_MC2.MC_Direction.MC_Negative_Direction;
			s_bReqNcJog := TRUE;
		END_IF
		
		IF s_fbHmiBtnJogPos.p_osrBtnPress THEN
			s_mcDirection := Tc2_MC2.MC_Direction.MC_Positive_Direction;
			s_bReqNcJog := TRUE;
		END_IF
		
		IF s_fbHmiBtnMoveAbs.p_osrBtnPress THEN
			s_bReqNcMoveAbs := TRUE;
		END_IF
		
	//other-mode	
	ELSE
		s_fbHmiBtnHome.p_bStaVisible := FALSE;
		s_fbHmiBtnHome.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnJogPos.p_bStaVisible := FALSE;
		s_fbHmiBtnJogPos.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnJogNeg.p_bStaVisible := FALSE;
		s_fbHmiBtnJogNeg.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnMoveAbs.p_bStaVisible := FALSE;
		s_fbHmiBtnMoveAbs.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnReset.p_bStaVisible := FALSE;
		s_fbHmiBtnReset.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnStop.p_bStaVisible := FALSE;
		s_fbHmiBtnStop.p_bStaEnabled := FALSE;
	END_IF
END_IF
	
_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{04dfb054-6b11-4b5e-a48d-10fd0c5ab89c}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Alarm Config
// Alarm Handlers
s_fbAlarmHandlerDriveError.i_eAlarmLevel := E_AlarmLevel.Alarm;

s_fbAlarmHandlerMotorPosInterlocked.i_eAlarmLevel := E_AlarmLevel.Warning;

s_fbAlarmHandlerMotorNegInterlocked.i_eAlarmLevel := E_AlarmLevel.Warning;

s_fbAlarmHandlerNotEnabled.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerNotEnabled.i_sAlarmText := CONCAT(i_sCmName, ' - Not enabled');

s_fbAlarmHandlerLimitPositiveReached.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerLimitPositiveReached.i_sAlarmText := CONCAT(i_sCmName, CONCAT(' - Limit switch reached: ', s_sCfgPosName));

s_fbAlarmHandlerLimitNegativeReached.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerLimitNegativeReached.i_sAlarmText := CONCAT(i_sCmName, CONCAT(' - Limit switch reached: ', s_sCfgNegName));

//Hmi 
	//Buttons
	s_fbHmiBtnHome.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnHome.p_bStaVisible := FALSE;
	s_fbHmiBtnHome.p_bStaEnabled := FALSE;		
	s_fbHmiBtnHome.p_sBtnText := 'Home';
	
	s_fbHmiBtnJogPos.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnJogPos.p_bStaVisible := FALSE;
	s_fbHmiBtnJogPos.p_bStaEnabled := FALSE;		
	s_fbHmiBtnJogPos.p_sBtnText := CONCAT('Jog ', s_sCfgPosName);
	
	s_fbHmiBtnJogNeg.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnJogNeg.p_bStaVisible := FALSE;
	s_fbHmiBtnJogNeg.p_bStaEnabled := FALSE;		
	s_fbHmiBtnJogNeg.p_sBtnText := CONCAT('Jog ', s_sCfgNegName);
	
	s_fbHmiBtnMoveAbs.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnMoveAbs.p_bStaVisible := FALSE;
	s_fbHmiBtnMoveAbs.p_bStaEnabled := FALSE;		
	s_fbHmiBtnMoveAbs.p_sBtnText := 'Move Absolute';
	
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	s_fbHmiBtnStop.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnStop.p_bStaVisible := FALSE;
	s_fbHmiBtnStop.p_bStaEnabled := FALSE;		
	s_fbHmiBtnStop.p_sBtnText := 'Stop';
	
	//Leds
	s_fbHmiLedEnabledControl.p_bStaVisible := FALSE;
	s_fbHmiLedEnabledControl.p_sToHmiDescriptionLed := 'Enabled Control';
	
	s_fbHmiLedEnabledPos.p_bStaVisible := FALSE;
	s_fbHmiLedEnabledPos.p_sToHmiDescriptionLed := CONCAT('Enabled ', s_sCfgPosName);
	
	s_fbHmiLedEnabledNeg.p_bStaVisible := FALSE;
	s_fbHmiLedEnabledNeg.p_sToHmiDescriptionLed := CONCAT('Enabled ', s_sCfgNegName);
	
	s_fbHmiLedReady.p_bStaVisible := FALSE;
	s_fbHmiLedReady.p_sToHmiDescriptionLed := 'Ready';
	
	s_fbHmiLedHomed.p_bStaVisible := FALSE;
	s_fbHmiLedHomed.p_sToHmiDescriptionLed := 'Homed';
	
	s_fbHmiLedStandstill.p_bStaVisible := FALSE;
	s_fbHmiLedStandstill.p_sToHmiDescriptionLed := 'Standstill';
	
	s_fbHmiLedMoving.p_bStaVisible := FALSE;
	s_fbHmiLedMoving.p_sToHmiDescriptionLed := 'Moving';

	s_fbHmiLedAtPosition.p_bStaVisible := FALSE;
	s_fbHmiLedAtPosition.p_sToHmiDescriptionLed := 'At Position';
	
	s_fbHmiLedDriveError.p_bStaVisible := FALSE;
	s_fbHmiLedDriveError.p_sToHmiDescriptionLed := 'Drive Error';
	
_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{6f1bac9d-85af-4aa0-99cc-0441d85b988e}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

s_bReqNcReset := i_bCmdReset; 

s_bStaEnabled := I_bEnable;
s_bStaReferenceSwitch := I_bDetReferenceSwitch;
s_bStaLimitSwitchPos := I_bDetLimitSwitchPos;
s_bStaLimitSwitchNeg := I_bDetLimitSwitchNeg;

//Drive/NC-task status
s_bStaEnabledControl := s_bStaEnabled; //-- AND s_fbMcPower.Status;
s_bStaEnabledPos := s_bStaLimitSwitchPos;
s_bStaEnabledNeg := s_bStaLimitSwitchNeg;

s_bStaReady := i_refAxis.NcToPlc.StateDWord.0;
s_bStaHomed := i_refAxis.NcToPlc.StateDWord.1;
s_bStaStandstill := i_refAxis.NcToPlc.StateDWord.2;
s_bStaMoving := NOT(s_bStaStandstill);
s_bStaAtPosition := i_refAxis.NcToPlc.StateDWord.4;
s_bStaDriveError := i_refAxis.NcToPlc.StateDWord.31;

s_fActPosition := i_refAxis.NcToPlc.ActPos;
s_fActVelocity := i_refAxis.NcToPlc.ActVelo;
s_fActTorque := i_refAxis.NcToPlc.ActTorque;

//Interlocks
s_bIclkPos := i_bIclkPos;
s_bIclkNeg := i_bIclkNeg;

{warning '#TODO: Not clear why this interlocks are configured here?'}
//Local reasons, first
IF NOT(s_bStaEnabled) AND (i_eCtrlMode = E_CtrlMode.MAINTENANCE) THEN  
	s_sInterlockedReasonPos := 'Not enabled';
ELSIF NOT(s_bStaLimitSwitchPos) THEN  
	s_sInterlockedReasonPos := CONCAT('Limit-switch ', s_sCfgPosName);
ELSE
	;// Else, allow external to write
END_IF

//Local reasons, first
IF NOT(s_bStaEnabled) AND (i_eCtrlMode = E_CtrlMode.MAINTENANCE) THEN  
	s_sInterlockedReasonNeg := 'Not enabled';
ELSIF NOT(s_bStaLimitSwitchNeg) THEN  
	s_sInterlockedReasonNeg := CONCAT('Limit-switch ', s_sCfgNegName);
ELSE
	;// Else, allow external to write
END_IF

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{705beffa-2023-4b46-ae05-94ae1d9439ab}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MoveAbsolute" Id="{33b1db53-3e9c-45b9-acb8-f86fe15b34c1}" FolderPath="Methods\">
      <Declaration><![CDATA[//Returms TRUE if move absolute is done
METHOD PUBLIC m_MoveAbsolute : BOOL
VAR_INPUT
	i_stPositioningProfile : ST_PositioningProfile;
END_VAR
VAR_OUTPUT
	o_Busy : BOOL;
	o_bDone : BOOL;
	o_bError : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_bReqNcMoveAbs := TRUE;

//Inputs
s_fbMcMoveAbs.Position := i_stPositioningProfile.fPos;
s_fbMcMoveAbs.Velocity := i_stPositioningProfile.fVel;
s_fbMcMoveAbs.Acceleration := i_stPositioningProfile.fAcc;
s_fbMcMoveAbs.Deceleration := i_stPositioningProfile.fDec;
s_fbMcMoveAbs.Jerk := i_stPositioningProfile.fJrk;

//Outputs
o_Busy := s_fbMcMoveAbs.Busy;
o_bDone := s_fbMcMoveAbs.Done;
o_bError := s_fbMcMoveAbs.Error;
	
m_MoveAbsolute := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Reset" Id="{3c0e8a28-dc02-4569-b874-5e16ba6f1cc1}" FolderPath="Methods\">
      <Declaration><![CDATA[//Returms TRUE if reset is done
METHOD PUBLIC m_Reset : BOOL
VAR_OUTPUT
	o_Busy : BOOL;
	o_bDone : BOOL;
	o_bError : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_bReqNcReset := TRUE;

//Outputs
o_Busy := s_fbMcReset.Busy;
o_bDone := s_fbMcReset.Done;
o_bError := s_fbMcReset.Error;
	
m_Reset := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Stop" Id="{8221ae9d-4a4c-432f-85a4-2df50a225ff5}" FolderPath="Methods\">
      <Declaration><![CDATA[//Returms TRUE if stop is done
METHOD PUBLIC m_Stop : BOOL
VAR_INPUT
	i_fDec : LREAL; 
	i_fJrk : LREAL;
END_VAR
VAR_OUTPUT
	o_Busy : BOOL;
	o_bDone : BOOL;
	o_bError : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_bReqNcStop := TRUE;

//Inputs
s_fbMcStop.Deceleration := i_fDec;
s_fbMcStop.Jerk := i_fJrk;

//Outputs
o_Busy := s_fbMcStop.Busy;
o_bDone := s_fbMcStop.Done;
o_bError := s_fbMcStop.Error;
	
m_Stop := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bActive" Id="{fdebd466-4355-4961-86f7-17cb1e74e332}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bActive : BOOL
]]></Declaration>
      <Get Name="Get" Id="{12554b68-dea8-473b-b98f-bf82edb9ad16}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bActive := s_bActive;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bAtPosition" Id="{1427e9eb-62b0-446d-9229-ecc0728aa739}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bAtPosition : BOOL
]]></Declaration>
      <Get Name="Get" Id="{f7ed9d8f-2a48-406a-a4f6-3a1e43916f46}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bAtPosition := s_bStaAtPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bBusy" Id="{a6bb4214-9e42-46dd-a8f3-995e364772d0}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bBusy : BOOL]]></Declaration>
      <Get Name="Get" Id="{7080bc48-c94e-419b-9e7d-df95694c753e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bBusy := s_bBusy;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bCommandAborted" Id="{32bd9d7d-f5a3-4f89-9a59-0294a826c560}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bCommandAborted : BOOL]]></Declaration>
      <Get Name="Get" Id="{a39acfdd-fde9-4118-9e65-bd86ad5a94af}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bCommandAborted := s_bCommandAborted;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bDone" Id="{09a3960b-0e70-4e33-a3d6-ff5a57122d42}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{e656286c-fa2b-43ef-a794-1f2819d97be9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bDone := s_bDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bError" Id="{7759aec3-bd8b-4f0c-9913-656b2c70cf6a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bError : BOOL
]]></Declaration>
      <Get Name="Get" Id="{67b5f8fe-c6e4-4145-9f0e-f9d36c480d63}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bError := s_bStaError;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bHomed" Id="{29d86fc1-be45-4333-91ce-9bdc79739fba}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bHomed : BOOL
]]></Declaration>
      <Get Name="Get" Id="{3bff5f71-c84f-4863-9be2-8ae02d95a4db}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
//--p_bHomed := i_refAxis.Status.Homed;
p_bHomed := s_bStaHomed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bMoveAbsDone" Id="{9cfca811-7151-430f-ac3e-1c46456a86e7}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bMoveAbsDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{b02bb444-9b0b-4a10-842d-3e30df9c3985}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bMoveAbsDone := s_fbMcMoveAbs.Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStandstill" Id="{06fe4adf-3a6b-49c2-a8e8-c5de29d0c1af}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStandstill : BOOL
]]></Declaration>
      <Get Name="Get" Id="{e4db3dbb-9fbf-4ca7-ba91-332924a328ae}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStandstill := s_bStaStandstill;
//--p_bStandstill := i_refAxis.Status.StandStill;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bWarning" Id="{b8faca11-510c-4a1a-b235-b64a1404f723}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bWarning : BOOL
]]></Declaration>
      <Get Name="Get" Id="{209789e2-4f7f-40c8-b8a3-6199664c8d00}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bWarning := s_bStaWarning;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_fPosition" Id="{e5ef2cba-1955-4270-98db-4d1260096b27}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_fPosition : LREAL
]]></Declaration>
      <Get Name="Get" Id="{440682b1-07c0-42c1-8793-ae28db2834f6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_fPosition := s_fActPosition;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_fSetOverride" Id="{2c1113f4-70d6-43fb-9e1d-1abae03c2ea4}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_fSetOverride : LREAL
]]></Declaration>
      <Set Name="Set" Id="{4da4c151-59cb-4e7c-9480-b284833f79b5}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_fOverride := p_fSetOverride;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="p_fSetTargetPosition" Id="{d8bd5c56-1afd-4449-9ff5-408d5b4dc1a6}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_fSetTargetPosition : LREAL
]]></Declaration>
      <Get Name="Get" Id="{2f75fc55-e4e2-4d1a-9e2e-5f2488ab159d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_fSetTargetPosition := s_fSetTargetPosition;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{8e420d50-b498-4fbd-a8d3-bcf62048045f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_fSetTargetPosition := p_fSetTargetPosition;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="p_fTorque" Id="{2e597f44-e7ba-443f-a9ae-a8e9002f8c58}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_fTorque : LREAL
]]></Declaration>
      <Get Name="Get" Id="{dc274fc2-32f0-4ebc-8eec-0b00c873a0ba}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_fTorque := s_fActTorque;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_fVelocity" Id="{e4d08808-aacd-469e-bccf-b788a2ac516e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_fVelocity : LREAL
]]></Declaration>
      <Get Name="Get" Id="{a4e61425-56d9-43cd-b7a5-921c2a97d144}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_fVelocity := s_fActVelocity;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_nErrorID" Id="{063f18f8-6320-4761-b8fc-9920f5ec0c3a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_nErrorID : UDINT
]]></Declaration>
      <Get Name="Get" Id="{fa545b5b-0766-4028-bde3-78e42d22c7e0}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_nErrorID := s_nErrorID;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_sCfgNegName" Id="{aa36f5b3-fa04-4b6b-b87e-efe9098fc635}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_sCfgNegName : STRING(c_MAX_FB_NAME_LENGTH)]]></Declaration>
      <Get Name="Get" Id="{84146f27-461f-4593-9e06-9197e9531159}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_sCfgNegName := s_sCfgNegName;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{98bdb8b3-f0c2-4b0a-8a6c-54320428315e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_sCfgNegName := p_sCfgNegName;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="p_sCfgPosName" Id="{8b63f952-8768-4156-b96b-7566ac473745}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_sCfgPosName : STRING(c_MAX_FB_NAME_LENGTH)]]></Declaration>
      <Get Name="Get" Id="{5c00dee9-b5e4-49d8-9f02-588f77b0776c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_sCfgPosName := s_sCfgPosName;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{cf9d99e9-cba3-43f8-b9d5-3f32ebcb94a3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_sCfgPosName := p_sCfgPosName;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="p_sInterlockedReasonNeg" Id="{2cbc61be-2980-49ea-9737-516b9cc082cc}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_sInterlockedReasonNeg : STRING(GVL.g_MAX_LEN_INTERLOCK_REASON)]]></Declaration>
      <Get Name="Get" Id="{6302c11b-5d35-483e-93f6-02d7e278d314}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_sInterlockedReasonNeg := s_sInterlockedReasonNeg;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{736eeda3-1c6b-466b-a8c9-83add0319e61}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_sInterlockedReasonNeg := p_sInterlockedReasonNeg;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="p_sInterlockedReasonPos" Id="{54c2d2dd-7915-4fa3-818c-250a80b85813}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_sInterlockedReasonPos : STRING(GVL.g_MAX_LEN_INTERLOCK_REASON)]]></Declaration>
      <Get Name="Get" Id="{c021f6d7-6c1d-45d2-8cf8-029294050c22}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_sInterlockedReasonPos := s_sInterlockedReasonPos;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ae73b161-60cd-49c4-958c-4f84879e0c7c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_sInterlockedReasonPos := p_sInterlockedReasonPos;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="CM_Servo">
      <LineId Id="2015" Count="24" />
      <LineId Id="633" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Alarms">
      <LineId Id="28" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="103" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="158" Count="0" />
      <LineId Id="163" Count="2" />
      <LineId Id="200" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="162" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="143" Count="1" />
      <LineId Id="140" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="148" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="218" Count="2" />
      <LineId Id="173" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Devices">
      <LineId Id="962" Count="0" />
      <LineId Id="732" Count="2" />
      <LineId Id="746" Count="5" />
      <LineId Id="964" Count="0" />
      <LineId Id="752" Count="1" />
      <LineId Id="946" Count="0" />
      <LineId Id="755" Count="0" />
      <LineId Id="965" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="937" Count="1" />
      <LineId Id="945" Count="0" />
      <LineId Id="939" Count="0" />
      <LineId Id="757" Count="5" />
      <LineId Id="767" Count="6" />
      <LineId Id="1067" Count="0" />
      <LineId Id="775" Count="0" />
      <LineId Id="1054" Count="11" />
      <LineId Id="1089" Count="0" />
      <LineId Id="776" Count="2" />
      <LineId Id="947" Count="2" />
      <LineId Id="779" Count="5" />
      <LineId Id="951" Count="0" />
      <LineId Id="954" Count="0" />
      <LineId Id="950" Count="0" />
      <LineId Id="785" Count="0" />
      <LineId Id="1090" Count="0" />
      <LineId Id="790" Count="0" />
      <LineId Id="987" Count="12" />
      <LineId Id="985" Count="1" />
      <LineId Id="791" Count="2" />
      <LineId Id="952" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="953" Count="0" />
      <LineId Id="794" Count="2" />
      <LineId Id="1002" Count="14" />
      <LineId Id="1000" Count="1" />
      <LineId Id="797" Count="2" />
      <LineId Id="957" Count="1" />
      <LineId Id="956" Count="0" />
      <LineId Id="800" Count="2" />
      <LineId Id="1019" Count="24" />
      <LineId Id="1017" Count="1" />
      <LineId Id="803" Count="2" />
      <LineId Id="959" Count="2" />
      <LineId Id="806" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="925" Count="0" />
      <LineId Id="1046" Count="5" />
      <LineId Id="1044" Count="1" />
      <LineId Id="926" Count="0" />
      <LineId Id="928" Count="0" />
      <LineId Id="924" Count="0" />
      <LineId Id="807" Count="1" />
      <LineId Id="1052" Count="0" />
      <LineId Id="887" Count="0" />
      <LineId Id="889" Count="10" />
      <LineId Id="888" Count="0" />
      <LineId Id="817" Count="15" />
      <LineId Id="846" Count="0" />
      <LineId Id="1074" Count="14" />
      <LineId Id="1073" Count="0" />
      <LineId Id="863" Count="0" />
      <LineId Id="922" Count="0" />
      <LineId Id="916" Count="5" />
      <LineId Id="867" Count="17" />
      <LineId Id="929" Count="0" />
      <LineId Id="931" Count="5" />
      <LineId Id="930" Count="0" />
      <LineId Id="1053" Count="0" />
      <LineId Id="886" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Hmi">
      <LineId Id="17" Count="3" />
      <LineId Id="509" Count="0" />
      <LineId Id="511" Count="0" />
      <LineId Id="606" Count="0" />
      <LineId Id="616" Count="0" />
      <LineId Id="612" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="613" Count="0" />
      <LineId Id="618" Count="6" />
      <LineId Id="617" Count="0" />
      <LineId Id="615" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="625" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="602" Count="0" />
      <LineId Id="599" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="593" Count="4" />
      <LineId Id="592" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="515" Count="1" />
      <LineId Id="543" Count="0" />
      <LineId Id="542" Count="0" />
      <LineId Id="546" Count="2" />
      <LineId Id="545" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="552" Count="0" />
      <LineId Id="551" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="553" Count="1" />
      <LineId Id="521" Count="3" />
      <LineId Id="600" Count="0" />
      <LineId Id="525" Count="9" />
      <LineId Id="510" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="587" Count="3" />
      <LineId Id="563" Count="0" />
      <LineId Id="570" Count="16" />
      <LineId Id="569" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="310" Count="3" />
      <LineId Id="315" Count="1" />
      <LineId Id="137" Count="1" />
      <LineId Id="320" Count="7" />
      <LineId Id="319" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="224" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="341" Count="3" />
      <LineId Id="330" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="280" Count="2" />
      <LineId Id="469" Count="1" />
      <LineId Id="489" Count="1" />
      <LineId Id="477" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="484" Count="1" />
      <LineId Id="483" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="492" Count="1" />
      <LineId Id="491" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="501" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="504" Count="1" />
      <LineId Id="503" Count="0" />
      <LineId Id="240" Count="2" />
      <LineId Id="252" Count="11" />
      <LineId Id="267" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="423" Count="2" />
      <LineId Id="251" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="87" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Init">
      <LineId Id="21" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="128" Count="1" />
      <LineId Id="131" Count="1" />
      <LineId Id="182" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="186" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="34" Count="19" />
      <LineId Id="63" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="91" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="6" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="4" />
      <LineId Id="115" Count="0" />
      <LineId Id="117" Count="6" />
      <LineId Id="116" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="124" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Inputs">
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="97" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="104" Count="12" />
      <LineId Id="102" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="100" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="56" Count="2" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="86" Count="7" />
      <LineId Id="40" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Outputs">
      <LineId Id="29" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="212" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.m_MoveAbsolute">
      <LineId Id="314" Count="1" />
      <LineId Id="294" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="289" Count="3" />
      <LineId Id="288" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.m_Reset">
      <LineId Id="294" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.m_Stop">
      <LineId Id="315" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bActive.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bAtPosition.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bBusy.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bCommandAborted.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bDone.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bError.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bHomed.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bMoveAbsDone.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bStandstill.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bWarning.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_fPosition.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_fSetOverride.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_fSetTargetPosition.Get">
      <LineId Id="3" Count="2" />
    </LineIds>
    <LineIds Name="CM_Servo.p_fSetTargetPosition.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_fTorque.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_fVelocity.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_nErrorID.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sCfgNegName.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sCfgNegName.Set">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sCfgPosName.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sCfgPosName.Set">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sInterlockedReasonNeg.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sInterlockedReasonNeg.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sInterlockedReasonPos.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sInterlockedReasonPos.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>