<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CM_Servo" Id="{29dfdbae-f16d-497a-b262-2baea4701d77}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CM_Servo EXTENDS CM_Base //IMPLEMENTS I_Servo
VAR_INPUT
	i_refAxis : REFERENCE TO Tc2_MC2.AXIS_REF;
	i_mcHomingMode : Tc2_MC2.MC_HomingMode := Tc2_MC2.MC_HomingMode.MC_Direct;
	i_mcBufferMode : Tc2_MC2.MC_BufferMode := Tc2_MC2.MC_BufferMode.MC_Aborting;
	i_bIclkForward : BOOL := TRUE; //TRUE = interlocked
	i_bIclkBackward : BOOL := TRUE; //TRUE = interlocked
	
	i_ref_setting : REFERENCE TO ST_PositioningProfile;
	
	i_ref_eCtrlState : REFERENCE TO E_CtrlState;
END_VAR

VAR
	fbPower : Tc2_MC2.MC_Power;
	fbReset : Tc2_MC2.MC_Reset;
	fbHome : Tc2_MC2.MC_Home;
	fbJog : Tc2_MC2.MC_Jog;
	fbMoveAbsolute : Tc2_MC2.MC_MoveAbsolute;
	fbStop : Tc2_MC2.MC_Stop;

	s_bStaAbsPosBusy : BOOL;
	s_fSetTargetPosition : LREAL;
	
	// Inputs
	I_bEnable AT %I* : BOOL; //Enable from safety controller
	I_bDetReferenceSwitch AT %I* : BOOL; //Reference-/home switch
	I_bDetLimitSwitchPositive AT %I* : BOOL; //Limit switch positive-/CW- direction
	I_bDetLimitSwitchNegative AT %I* : BOOL; //Limit switch negative-/CCW- direction
	
	//Properties
	s_bStatus : BOOL;
	s_bDone : BOOL; 
	s_bBusy : BOOL; 
	s_bActive : BOOL; 
	s_bCommandAborted : BOOL;
	s_bError : BOOL; 
	s_nErrorID : UDINT;
	
	//Requests
	s_bReqNcStop : BOOL;
	s_bReqNcReset : BOOL;
	s_bReqNcHome : BOOL;
	s_bReqNcJog : BOOL;
	s_bReqNcMoveAbs : BOOL;	
	
	// States
	s_bStaEnabled : BOOL;
	s_bStaReferenceSwitch : BOOL;
	s_bStaLimitSwitchPositive : BOOL;
	s_bStaLimitSwitchNegative : BOOL;
	
	s_bStaEnabledControl : BOOL;
	s_bStaEnabledForward : BOOL;
	s_bStaEnabledBackward : BOOL;
	s_bStaReady : BOOL;
	s_bStaHomed : BOOL;
	s_bStaStandstill : BOOL;
	s_bStaMoving : BOOL;
	s_bStaAtPosition : BOOL;
	s_bStaDriveError : BOOL;
	s_bStaWarning : BOOL;
	
	s_bIclkForward : BOOL;
	s_bIclkBackward : BOOL;
	s_sInterlockedReasonForward : STRING; //External interlocked reason for clarifying reason
	s_sInterlockedReasonBackward : STRING; //External interlocked reason for clarifying reason
	
	// Setpoints
	s_fTargetSpeed : LREAL; // Target speed [mm/s]
	
	
	// Alarms
	s_fbAlarmHandlerDriveError : FB_AlarmHandler;
	s_fbAlarmHandlerStartMotorNotAllowed : FB_AlarmHandler;
	s_fbAlarmHandlerMotorForwardInterlocked : FB_AlarmHandler;
	s_fbAlarmHandlerMotorBackwardInterlocked : FB_AlarmHandler;
	
	s_fbAlarmHandlerNotEnabled : FB_AlarmHandler;
	s_fbAlarmHandlerLimitPositiveReached : FB_AlarmHandler;
	s_fbAlarmHandlerLimitNegativeReached : FB_AlarmHandler;
	
	s_errDriveError : BOOL;
	s_wrnMotorForwardInterlocked : BOOL;
	s_wrnMotorBackwardInterlocked : BOOL;
	
	//Hmi
	s_fbHmiBtnHome : FB_HmiBtn;
	s_fbHmiBtnJogPos : FB_HmiBtn;
	s_fbHmiBtnJogNeg : FB_HmiBtn;
	s_fbHmiBtnMoveAbs : FB_HmiBtn;
	//--s_fbHmiBtnPower	: FB_HmiBtn;
	s_fbHmiBtnReset	: FB_HmiBtn;
	s_fbHmiBtnStop: FB_HmiBtn;
	
	s_fbHmiLedEnabledControl : FB_HmiLed;
	s_fbHmiLedEnabledForward : FB_HmiLed;
	s_fbHmiLedEnabledBackward : FB_HmiLed;
	s_fbHmiLedReady : FB_HmiLed;
	s_fbHmiLedHomed : FB_HmiLed;
	s_fbHmiLedStandstill : FB_HmiLed;
	s_fbHmiLedMoving : FB_HmiLed;
	s_fbHmiLedAtPosition : FB_HmiLed;
	s_fbHmiLedDriveError : FB_HmiLed;
	
	//Sequence
	s_eSeqNcTask : E_SeqServo;
	s_fbSeqNcTaskControl : FB_SeqControl;
	s_mcDirection : Tc2_MC2.MC_Direction;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
fbPower(
	Axis := i_refAxis,
	Enable := I_bEnable,
	Enable_Positive := I_bDetLimitSwitchPositive,
	Enable_Negative := I_bDetLimitSwitchNegative,
	Override := 100.0,
	BufferMode := TC2_MC2.MC_BufferMode.MC_Aborting,
	Options := ,
	Status => s_bStatus,
	Busy => s_bBusy,
	Active => s_bActive,
	Error => s_bError,
	ErrorID => s_nErrorID);

SUPER^();
]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{c7dc02dc-f2cb-44e5-89eb-2e4085b6a909}">
      <Folder Name="Base" Id="{1f8bf144-7c2c-4c0f-9741-6defd5a25c8d}" />
    </Folder>
    <Folder Name="Properties" Id="{c3e008a7-9dfe-49e0-9cc5-18c79327535a}" />
    <Method Name="_m_Alarms" Id="{c522f959-6f84-4a96-b11e-07b34d6dcd1a}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
VAR
	s_bPositiveDirection : BOOL; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

// Set error bits
s_errDriveError := (i_bReqEnable AND s_bStaDriveError) AND NOT(i_bCmdReset);

// Interlock warnings
s_bPositiveDirection := (i_refAxis.NcToPlc.ActVelo > 0);

IF s_bIclkForward AND NOT(s_bStaStandstill) AND s_bPositiveDirection THEN	
	s_wrnMotorForwardInterlocked := TRUE;
	
	m_Stop(
		i_fDeceleration := i_ref_setting. fDeceleration,
		i_fJerk := i_ref_setting.fJerk);
	
ELSIF NOT(s_bIclkForward) OR i_bCmdReset THEN
	s_wrnMotorForwardInterlocked := FALSE;
END_IF

IF s_bIclkBackward AND NOT(s_bStaStandstill) AND NOT(s_bPositiveDirection) THEN
	s_wrnMotorBackwardInterlocked := TRUE;
	
	m_Stop(
		i_fDeceleration := i_ref_setting. fDeceleration,
		i_fJerk := i_ref_setting.fJerk);
		
ELSIF NOT(s_bIclkBackward) OR i_bCmdReset THEN
	s_wrnMotorBackwardInterlocked := FALSE;
END_IF

// Alarm Handlers
s_fbAlarmHandlerDriveError(
	i_bStaActive := s_errDriveError,
	i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Drive - has error: ', UDINT_TO_STRING(i_refAxis.NcToPlc.ErrorCode))));
	
s_fbAlarmHandlerMotorForwardInterlocked(
	i_bStaActive := s_wrnMotorForwardInterlocked,
	i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Motor - interlocked to move forward, Reason: ',CONCAT(s_sInterlockedReasonForward, '.'))));
	
s_fbAlarmHandlerMotorBackwardInterlocked(
	i_bStaActive := s_wrnMotorBackwardInterlocked,
	i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Motor - interlocked to move backward, Reason: ',CONCAT(s_sInterlockedReasonBackward, '.'))));

s_fbAlarmHandlerNotEnabled(
	i_bStaActive := NOT(s_bStaEnabled));
	
s_fbAlarmHandlerLimitPositiveReached(
	i_bStaActive := NOT(s_bStaLimitSwitchPositive));
	
s_fbAlarmHandlerLimitNegativeReached(
	i_bStaActive := NOT(s_bStaLimitSwitchNegative));	
	
// Alarm collector	
s_bStaError := 
	s_fbAlarmHandlerDriveError.q_bStaActive;

// Warning collector
s_bStaWarning := 
	s_fbAlarmHandlerMotorForwardInterlocked.q_bStaActive
	OR s_fbAlarmHandlerMotorBackwardInterlocked.q_bStaActive
	OR s_fbAlarmHandlerNotEnabled.q_bStaActive
	OR s_fbAlarmHandlerLimitPositiveReached.q_bStaActive
	OR s_fbAlarmHandlerLimitNegativeReached.q_bStaActive;
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{9e243b00-6ff1-489e-8f7b-4b8502bb7008}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
VAR
	sTcDirection : Tc2_MC2.MC_Direction;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

s_bStaEnabledControl := s_bStaEnabled AND fbPower.Status;
s_bStaEnabledForward := s_bStaLimitSwitchPositive;
s_bStaEnabledBackward := s_bStaLimitSwitchNegative;

s_bStaReady := i_refAxis.NcToPlc.StateDWord.0;
s_bStaHomed := i_refAxis.NcToPlc.StateDWord.1;
s_bStaStandstill := i_refAxis.NcToPlc.StateDWord.2;
s_bStaMoving := NOT(i_refAxis.NcToPlc.StateDWord.2);
s_bStaAtPosition := i_refAxis.NcToPlc.StateDWord.4;
s_bStaDriveError := i_refAxis.NcToPlc.StateDWord.31;

s_fbSeqNcTaskControl(
	i_nSeqStep := s_eSeqNcTask, 
	i_sStepName := TO_STRING(s_eSeqNcTask), 
	i_bCmdReset := FALSE, 
	i_bStaError := FALSE);

	IF s_bReqNcStop THEN 
		s_eSeqNcTask := E_SeqServo.STOP;
	END_IF		
	
CASE s_eSeqNcTask OF

	E_SeqServo.IDLE:
		
		IF s_bReqNcStop THEN 
			s_eSeqNcTask := E_SeqServo.STOP;
		ELSIF s_bReqNcReset THEN
			s_eSeqNcTask := E_SeqServo.RESET;
		ELSIF s_bReqNcHome THEN
			s_eSeqNcTask := E_SeqServo.HOME;
		ELSIF s_bReqNcJog THEN
			s_eSeqNcTask := E_SeqServo.JOG;
		ELSIF s_bReqNcMoveAbs THEN
			s_eSeqNcTask := E_SeqServo.MOVE_ABS;	
		END_IF
		
	E_SeqServo.STOP:
		IF fbStop.Done THEN
			s_bReqNcStop := FALSE;
			s_eSeqNcTask := E_SeqServo.IDLE;
		END_IF
			
	E_SeqServo.RESET:
		IF fbReset.Done THEN
			s_bReqNcReset := FALSE;
			s_eSeqNcTask := E_SeqServo.IDLE;
		END_IF
			
	E_SeqServo.HOME:
		IF fbHome.Done THEN
			s_bReqNcHome := FALSE;
			s_eSeqNcTask := E_SeqServo.IDLE;
		END_IF
	
	E_SeqServo.JOG:
			IF NOT(s_fbHmiBtnJogPos.p_bStaBtn OR s_fbHmiBtnJogNeg.p_bStaBtn) OR fbJog.Error OR fbJog.CommandAborted THEN
				s_bReqNcJog := FALSE;
				s_eSeqNcTask := E_SeqServo.IDLE;
			END_IF
			
	E_SeqServo.MOVE_ABS:
		IF fbMoveAbsolute.Done OR fbMoveAbsolute.Error OR fbMoveAbsolute.CommandAborted THEN
			s_bReqNcMoveAbs := FALSE;
			s_eSeqNcTask := E_SeqServo.IDLE;
		END_IF
		
END_CASE

fbStop(
	Axis := i_refAxis,
	Execute := s_bReqNcStop,
	Deceleration := i_ref_setting.fDeceleration,
	Jerk := i_ref_setting.fJerk,
	Options := ,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);

fbReset(
	Axis := i_refAxis,
	Execute := s_bReqNcReset,
	Done => s_bDone,
	Busy => s_bBusy,
	Error => s_bError,
	ErrorID => s_nErrorID);

fbHome(
	Axis := i_refAxis,
	Execute := s_bReqNcHome,
	Position := i_ref_setting.fPosition,
	HomingMode := i_mcHomingMode,
	BufferMode := i_mcBufferMode,
	Options := ,
	bCalibrationCam := I_bDetReferenceSwitch,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);	
	
fbJog(
	Axis := i_refAxis,
	JogForward := s_fbHmiBtnJogPos.p_bStaBtn,
	JogBackwards := s_fbHmiBtnJogNeg.p_bStaBtn,
	Mode := MC_JOGMODE_STANDARD_SLOW,
	Position := i_ref_setting.fPosition,
	Velocity := i_ref_setting.fVelocity,
	Acceleration := i_ref_setting.fAcceleration,
	Deceleration := i_ref_setting.fDeceleration,
	Jerk := i_ref_setting.fJerk,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);
	
IF i_eCtrlMode = E_CtrlMode.MAINTENANCE THEN
	fbMoveAbsolute.Position := s_fSetTargetPosition;
ELSE 
	i_ref_setting.fPosition := i_ref_setting.fPosition;
END_IF
	
fbMoveAbsolute(
	Axis := i_refAxis,
	Execute := s_bReqNcMoveAbs, 
	Position := ,
	Velocity := i_ref_setting.fVelocity,
	Acceleration := i_ref_setting.fAcceleration,
	Deceleration := i_ref_setting.fDeceleration,
	Jerk := i_ref_setting.fJerk,
	BufferMode := i_mcBufferMode,
	Options := ,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);
	
_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{d347e6d1-38a6-4faa-8926-d4b86b27fe7e}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnHome();
s_fbHmiBtnJogPos();
s_fbHmiBtnJogNeg();
s_fbHmiBtnMoveAbs();
//--s_fbHmiBtnPower();
s_fbHmiBtnReset();
s_fbHmiBtnStop();

//Leds
s_fbHmiLedEnabledControl(i_bStaLed := s_bStaEnabledControl);
s_fbHmiLedEnabledForward(i_bStaLed := s_bStaEnabledForward);
s_fbHmiLedEnabledBackward(i_bStaLed := s_bStaEnabledBackward);
s_fbHmiLedReady(i_bStaLed := s_bStaReady);
s_fbHmiLedHomed(i_bStaLed := s_bStaHomed);
s_fbHmiLedStandstill(i_bStaLed := s_bStaStandstill);
s_fbHmiLedMoving(i_bStaLed := s_bStaMoving);
s_fbHmiLedAtPosition(i_bStaLed := s_bStaAtPosition);
s_fbHmiLedDriveError(i_bStaLed := s_bStaDriveError);

IF __ISVALIDREF(i_ref_eCtrlState) THEN
	//MAINTENANCE-mode is running
	IF (i_eCtrlMode = E_CtrlMode.MAINTENANCE) AND (i_ref_eCtrlState = E_CtrlState.RUNNING) THEN
		s_fbHmiBtnHome.p_bStaVisible := TRUE;
		s_fbHmiBtnHome.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaStandstill;	

		s_fbHmiBtnJogPos.p_bStaVisible := TRUE;
		s_fbHmiBtnJogPos.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaEnabledForward AND NOT(i_bIclkForward) AND NOT(s_bStaAbsPosBusy);
		
		s_fbHmiBtnJogNeg.p_bStaVisible := TRUE;
		s_fbHmiBtnJogNeg.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaEnabledBackward AND NOT(i_bIclkBackward) AND NOT(s_bStaAbsPosBusy);
	
		s_fbHmiBtnMoveAbs.p_bStaVisible := TRUE;
		s_fbHmiBtnMoveAbs.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaEnabledForward AND s_bStaEnabledBackward AND s_bStaStandstill AND s_bStaHomed AND NOT(i_bIclkForward) AND NOT(i_bIclkBackward);
		
		//--s_fbHmiBtnPower.p_bStaVisible := TRUE;
		//--s_fbHmiBtnPower.p_bStaEnabled := TRUE;
		
		s_fbHmiBtnReset.p_bStaVisible := TRUE;
		s_fbHmiBtnReset.p_bStaEnabled := TRUE;
		
		s_fbHmiBtnStop.p_bStaVisible := TRUE;
		s_fbHmiBtnStop.p_bStaEnabled := TRUE;
		
		//Maintenance commands from buttons
		IF s_fbHmiBtnStop.p_osrBtnPress THEN
			s_bReqNcStop := TRUE;
		END_IF
		
		IF s_fbHmiBtnReset.p_osrBtnPress THEN
			s_bReqNcReset := TRUE;
		END_IF
		
		IF s_fbHmiBtnHome.p_osrBtnPress THEN
			s_bReqNcHome := TRUE;
		END_IF
		
		IF s_fbHmiBtnJogNeg.p_osrBtnPress THEN
			s_mcDirection := Tc2_MC2.MC_Direction.MC_Negative_Direction;
			s_bReqNcJog := TRUE;
		END_IF
		
		IF s_fbHmiBtnJogPos.p_osrBtnPress THEN
			s_mcDirection := Tc2_MC2.MC_Direction.MC_Positive_Direction;
			s_bReqNcJog := TRUE;
		END_IF
		
		IF s_fbHmiBtnMoveAbs.p_osrBtnPress THEN
			s_bReqNcMoveAbs := TRUE;
		END_IF
		
	//other-mode	
	ELSE
		s_fbHmiBtnHome.p_bStaVisible := FALSE;
		s_fbHmiBtnHome.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnJogPos.p_bStaVisible := FALSE;
		s_fbHmiBtnJogPos.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnJogNeg.p_bStaVisible := FALSE;
		s_fbHmiBtnJogNeg.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnMoveAbs.p_bStaVisible := FALSE;
		s_fbHmiBtnMoveAbs.p_bStaEnabled := FALSE;
		
		//--s_fbHmiBtnPower.p_bStaVisible := FALSE;
		//--s_fbHmiBtnPower.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnReset.p_bStaVisible := FALSE;
		s_fbHmiBtnReset.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnStop.p_bStaVisible := FALSE;
		s_fbHmiBtnStop.p_bStaEnabled := FALSE;
	END_IF
END_IF
	
_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{04dfb054-6b11-4b5e-a48d-10fd0c5ab89c}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Alarm Config
// Alarm Handlers
s_fbAlarmHandlerDriveError.i_eAlarmLevel := E_AlarmLevel.Alarm;
s_fbAlarmHandlerMotorForwardInterlocked.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerMotorBackwardInterlocked.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerNotEnabled.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerNotEnabled.i_sAlarmText := CONCAT(i_sCmName, ' - Not enabled');
s_fbAlarmHandlerLimitPositiveReached.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerLimitPositiveReached.i_sAlarmText := CONCAT(i_sCmName, ' - Limits witch positvie reached');
s_fbAlarmHandlerLimitNegativeReached.i_eAlarmLevel := E_AlarmLevel.Warning;
s_fbAlarmHandlerLimitNegativeReached.i_sAlarmText := CONCAT(i_sCmName, ' - Limits witch negative reached');

//Hmi 
	//Buttons
	s_fbHmiBtnHome.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnHome.p_bStaVisible := FALSE;
	s_fbHmiBtnHome.p_bStaEnabled := FALSE;		
	s_fbHmiBtnHome.p_sBtnText := 'Home';
	
	s_fbHmiBtnJogPos.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnJogPos.p_bStaVisible := FALSE;
	s_fbHmiBtnJogPos.p_bStaEnabled := FALSE;		
	s_fbHmiBtnJogPos.p_sBtnText := 'Jog Positive';
	
	s_fbHmiBtnJogNeg.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnJogNeg.p_bStaVisible := FALSE;
	s_fbHmiBtnJogNeg.p_bStaEnabled := FALSE;		
	s_fbHmiBtnJogNeg.p_sBtnText := 'Jog Negative';
	
	s_fbHmiBtnMoveAbs.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnMoveAbs.p_bStaVisible := FALSE;
	s_fbHmiBtnMoveAbs.p_bStaEnabled := FALSE;		
	s_fbHmiBtnMoveAbs.p_sBtnText := 'Move Absolute';
	
	//--s_fbHmiBtnPower.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	//--s_fbHmiBtnPower.p_bStaVisible := FALSE;
	//--s_fbHmiBtnPower.p_bStaEnabled := FALSE;		
	//--s_fbHmiBtnPower.p_sBtnText := 'Enable';

	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	s_fbHmiBtnStop.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnStop.p_bStaVisible := FALSE;
	s_fbHmiBtnStop.p_bStaEnabled := FALSE;		
	s_fbHmiBtnStop.p_sBtnText := 'Stop';
	
	//Leds
	s_fbHmiLedEnabledControl.p_bStaVisible := FALSE;
	s_fbHmiLedEnabledControl.p_sToHmiDescriptionLed := 'Enabled Control';
	
	s_fbHmiLedEnabledForward.p_bStaVisible := FALSE;
	s_fbHmiLedEnabledForward.p_sToHmiDescriptionLed := 'Enabled Forward';
	
	s_fbHmiLedEnabledBackward.p_bStaVisible := FALSE;
	s_fbHmiLedEnabledBackward.p_sToHmiDescriptionLed := 'Enabled Backward';
	
	s_fbHmiLedReady.p_bStaVisible := FALSE;
	s_fbHmiLedReady.p_sToHmiDescriptionLed := 'Ready';
	
	s_fbHmiLedHomed.p_bStaVisible := FALSE;
	s_fbHmiLedHomed.p_sToHmiDescriptionLed := 'Homed';
	
	s_fbHmiLedStandstill.p_bStaVisible := FALSE;
	s_fbHmiLedStandstill.p_sToHmiDescriptionLed := 'Standstill';
	
	s_fbHmiLedMoving.p_bStaVisible := FALSE;
	s_fbHmiLedMoving.p_sToHmiDescriptionLed := 'Moving';

	s_fbHmiLedAtPosition.p_bStaVisible := FALSE;
	s_fbHmiLedAtPosition.p_sToHmiDescriptionLed := 'At Position';
	
	s_fbHmiLedDriveError.p_bStaVisible := FALSE;
	s_fbHmiLedDriveError.p_sToHmiDescriptionLed := 'Drive Error';
	
_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{6f1bac9d-85af-4aa0-99cc-0441d85b988e}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

s_bReqNcReset := i_bCmdReset; 

s_bStaEnabled := I_bEnable;
s_bStaReferenceSwitch := I_bDetReferenceSwitch;
s_bStaLimitSwitchPositive := I_bDetLimitSwitchPositive;
s_bStaLimitSwitchNegative := I_bDetLimitSwitchNegative;

s_bIclkForward := i_bIclkForward;
s_bIclkBackward := i_bIclkBackward;

//Local reasons, first
IF NOT(s_bStaEnabled) AND (i_eCtrlMode = E_CtrlMode.MAINTENANCE) THEN  
	s_sInterlockedReasonForward := 'Not enabled';
ELSIF NOT(s_bStaLimitSwitchPositive) THEN  
	s_sInterlockedReasonForward := 'Limit-switch forward';
ELSE
	;// Else, allow external to write
END_IF

//Local reasons, first
IF NOT(s_bStaEnabled) AND (i_eCtrlMode = E_CtrlMode.MAINTENANCE) THEN  
	s_sInterlockedReasonBackward := 'Not enabled';
ELSIF NOT(s_bStaLimitSwitchNegative) THEN  
	s_sInterlockedReasonBackward := 'Limit-switch backward';
ELSE
	;// Else, allow external to write
END_IF

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{705beffa-2023-4b46-ae05-94ae1d9439ab}" FolderPath="Methods\Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MoveAbsolute" Id="{33b1db53-3e9c-45b9-acb8-f86fe15b34c1}" FolderPath="Methods\">
      <Declaration><![CDATA[//Returms TRUE if move absolute is done
METHOD PUBLIC m_MoveAbsolute : BOOL
VAR_INPUT
	i_stPositioningProfile : ST_PositioningProfile;
END_VAR
VAR_OUTPUT
	o_Busy : BOOL;
	o_bDone : BOOL;
	o_bError : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_bReqNcMoveAbs := TRUE;

//Inputs
fbMoveAbsolute.Position := i_stPositioningProfile.fPosition;
fbMoveAbsolute.Velocity := i_stPositioningProfile.fVelocity;
fbMoveAbsolute.Acceleration := i_stPositioningProfile.fAcceleration;
fbMoveAbsolute.Deceleration := i_stPositioningProfile.fDeceleration;
fbMoveAbsolute.Jerk := i_stPositioningProfile.fJerk;

//Outputs
o_Busy := fbMoveAbsolute.Busy;
o_bDone := fbMoveAbsolute.Done;
o_bError := fbMoveAbsolute.Error;
	
m_MoveAbsolute := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Reset" Id="{3c0e8a28-dc02-4569-b874-5e16ba6f1cc1}" FolderPath="Methods\">
      <Declaration><![CDATA[//Returms TRUE if reset is done
METHOD PUBLIC m_Reset : BOOL
VAR_OUTPUT
	o_Busy : BOOL;
	o_bDone : BOOL;
	o_bError : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_bReqNcReset := TRUE;

//Outputs
o_Busy := fbReset.Busy;
o_bDone := fbReset.Done;
o_bError := fbReset.Error;
	
m_Reset := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Stop" Id="{8221ae9d-4a4c-432f-85a4-2df50a225ff5}" FolderPath="Methods\">
      <Declaration><![CDATA[//Returms TRUE if stop is done
METHOD PUBLIC m_Stop : BOOL
VAR_INPUT
	i_fDeceleration : LREAL; 
	i_fJerk : LREAL;
END_VAR
VAR_OUTPUT
	o_Busy : BOOL;
	o_bDone : BOOL;
	o_bError : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_bReqNcStop := TRUE;

//Inputs
fbStop.Deceleration := i_fDeceleration;
fbStop.Jerk := i_fJerk;

//Outputs
o_Busy := fbStop.Busy;
o_bDone := fbStop.Done;
o_bError := fbStop.Error;
	
m_Stop := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bActive" Id="{fdebd466-4355-4961-86f7-17cb1e74e332}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bActive : BOOL
]]></Declaration>
      <Get Name="Get" Id="{12554b68-dea8-473b-b98f-bf82edb9ad16}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bActive := s_bActive;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bAtPosition" Id="{1427e9eb-62b0-446d-9229-ecc0728aa739}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bAtPosition : BOOL
]]></Declaration>
      <Get Name="Get" Id="{f7ed9d8f-2a48-406a-a4f6-3a1e43916f46}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bAtPosition := s_bStaAtPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bBusy" Id="{a6bb4214-9e42-46dd-a8f3-995e364772d0}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bBusy : BOOL]]></Declaration>
      <Get Name="Get" Id="{7080bc48-c94e-419b-9e7d-df95694c753e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bBusy := s_bBusy;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bCommandAborted" Id="{32bd9d7d-f5a3-4f89-9a59-0294a826c560}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bCommandAborted : BOOL]]></Declaration>
      <Get Name="Get" Id="{a39acfdd-fde9-4118-9e65-bd86ad5a94af}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bCommandAborted := s_bCommandAborted;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bDone" Id="{09a3960b-0e70-4e33-a3d6-ff5a57122d42}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{e656286c-fa2b-43ef-a794-1f2819d97be9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bDone := s_bDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bError" Id="{7759aec3-bd8b-4f0c-9913-656b2c70cf6a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bError : BOOL
]]></Declaration>
      <Get Name="Get" Id="{67b5f8fe-c6e4-4145-9f0e-f9d36c480d63}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bError := s_bStaError;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bHomed" Id="{29d86fc1-be45-4333-91ce-9bdc79739fba}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bHomed : BOOL
]]></Declaration>
      <Get Name="Get" Id="{3bff5f71-c84f-4863-9be2-8ae02d95a4db}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bHomed := i_refAxis.Status.Homed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStandstill" Id="{06fe4adf-3a6b-49c2-a8e8-c5de29d0c1af}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStandstill : BOOL
]]></Declaration>
      <Get Name="Get" Id="{e4db3dbb-9fbf-4ca7-ba91-332924a328ae}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStandstill := i_refAxis.Status.StandStill;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bWarning" Id="{b8faca11-510c-4a1a-b235-b64a1404f723}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bWarning : BOOL
]]></Declaration>
      <Get Name="Get" Id="{209789e2-4f7f-40c8-b8a3-6199664c8d00}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bWarning := s_bStaWarning;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_fPosition" Id="{e5ef2cba-1955-4270-98db-4d1260096b27}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_fPosition : LREAL
]]></Declaration>
      <Get Name="Get" Id="{440682b1-07c0-42c1-8793-ae28db2834f6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_fPosition := i_refAxis.NcToPlc.ActPos;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_fSetTargetPosition" Id="{d8bd5c56-1afd-4449-9ff5-408d5b4dc1a6}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_fSetTargetPosition : LREAL
]]></Declaration>
      <Get Name="Get" Id="{2f75fc55-e4e2-4d1a-9e2e-5f2488ab159d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_fSetTargetPosition := s_fSetTargetPosition;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{8e420d50-b498-4fbd-a8d3-bcf62048045f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_fSetTargetPosition := p_fSetTargetPosition;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="p_fVelocity" Id="{e4d08808-aacd-469e-bccf-b788a2ac516e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_fVelocity : LREAL
]]></Declaration>
      <Get Name="Get" Id="{a4e61425-56d9-43cd-b7a5-921c2a97d144}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_fVelocity := i_refAxis.NcToPlc.ActVelo;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_nErrorID" Id="{063f18f8-6320-4761-b8fc-9920f5ec0c3a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_nErrorID : UDINT
]]></Declaration>
      <Get Name="Get" Id="{fa545b5b-0766-4028-bde3-78e42d22c7e0}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_nErrorID := s_nErrorID;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_sInterlockedReasonBackward" Id="{2cbc61be-2980-49ea-9737-516b9cc082cc}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_sInterlockedReasonBackward : STRING(GVL.g_MAX_LEN_INTERLOCK_REASON)]]></Declaration>
      <Get Name="Get" Id="{6302c11b-5d35-483e-93f6-02d7e278d314}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_sInterlockedReasonBackward := s_sInterlockedReasonBackward;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{736eeda3-1c6b-466b-a8c9-83add0319e61}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_sInterlockedReasonBackward := p_sInterlockedReasonBackward;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="p_sInterlockedReasonForward" Id="{54c2d2dd-7915-4fa3-818c-250a80b85813}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_sInterlockedReasonForward : STRING(GVL.g_MAX_LEN_INTERLOCK_REASON)]]></Declaration>
      <Get Name="Get" Id="{c021f6d7-6c1d-45d2-8cf8-029294050c22}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_sInterlockedReasonForward := s_sInterlockedReasonForward;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ae73b161-60cd-49c4-958c-4f84879e0c7c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_sInterlockedReasonForward := p_sInterlockedReasonForward;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="CM_Servo">
      <LineId Id="907" Count="0" />
      <LineId Id="909" Count="12" />
      <LineId Id="1036" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="633" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Alarms">
      <LineId Id="28" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="103" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="158" Count="0" />
      <LineId Id="163" Count="2" />
      <LineId Id="200" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="162" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="143" Count="1" />
      <LineId Id="140" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="148" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="218" Count="2" />
      <LineId Id="173" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Devices">
      <LineId Id="732" Count="32" />
      <LineId Id="767" Count="19" />
      <LineId Id="790" Count="18" />
      <LineId Id="887" Count="0" />
      <LineId Id="889" Count="10" />
      <LineId Id="888" Count="0" />
      <LineId Id="809" Count="23" />
      <LineId Id="846" Count="38" />
      <LineId Id="901" Count="0" />
      <LineId Id="886" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Hmi">
      <LineId Id="17" Count="3" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="310" Count="6" />
      <LineId Id="137" Count="1" />
      <LineId Id="320" Count="7" />
      <LineId Id="319" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="224" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="341" Count="3" />
      <LineId Id="330" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="280" Count="2" />
      <LineId Id="469" Count="1" />
      <LineId Id="489" Count="1" />
      <LineId Id="477" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="484" Count="1" />
      <LineId Id="483" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="492" Count="1" />
      <LineId Id="491" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="501" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="504" Count="1" />
      <LineId Id="503" Count="0" />
      <LineId Id="240" Count="2" />
      <LineId Id="252" Count="15" />
      <LineId Id="250" Count="0" />
      <LineId Id="423" Count="2" />
      <LineId Id="251" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="87" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Init">
      <LineId Id="21" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="128" Count="1" />
      <LineId Id="131" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="34" Count="22" />
      <LineId Id="27" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="85" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="91" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="6" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="4" />
      <LineId Id="115" Count="0" />
      <LineId Id="117" Count="6" />
      <LineId Id="116" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="124" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Inputs">
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="97" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="85" Count="0" />
      <LineId Id="56" Count="2" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="86" Count="7" />
      <LineId Id="40" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo._m_Outputs">
      <LineId Id="29" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="212" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.m_MoveAbsolute">
      <LineId Id="314" Count="1" />
      <LineId Id="294" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="289" Count="3" />
      <LineId Id="288" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.m_Reset">
      <LineId Id="294" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.m_Stop">
      <LineId Id="315" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bActive.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bAtPosition.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bBusy.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bCommandAborted.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bDone.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bError.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bHomed.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bStandstill.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_bWarning.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_fPosition.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_fSetTargetPosition.Get">
      <LineId Id="3" Count="2" />
    </LineIds>
    <LineIds Name="CM_Servo.p_fSetTargetPosition.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_fVelocity.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_nErrorID.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sInterlockedReasonBackward.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sInterlockedReasonBackward.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sInterlockedReasonForward.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_Servo.p_sInterlockedReasonForward.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>