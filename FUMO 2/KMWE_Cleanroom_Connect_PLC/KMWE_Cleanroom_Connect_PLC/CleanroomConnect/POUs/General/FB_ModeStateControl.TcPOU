<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ModeStateControl" Id="{e7765408-b769-4eed-9a68-858e05e5d218}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModeStateControl
VAR_INPUT
	i_bReqStopAlarm	: BOOL;
	i_bStaAllStopped : BOOL;
END_VAR
VAR
	s_bInitDone : BOOL := FALSE;
	
	s_eCtrlMode : E_CtrlMode := E_CtrlMode.IDLE;
	s_eCtrlState : E_CtrlState := E_CtrlState.STOPPED;
	
	s_fbHmiBtnModeAutomatic : FB_HmiBtn;
	s_fbHmiBtnModeManual : FB_HmiBtn;
	s_fbHmiBtnModeMaintenance : FB_HmiBtn;
	s_fbHmiBtnModeIO : FB_HmiBtn;
	s_fbHmiBtnModeCleaning : FB_HmiBtn;
	
	s_fbHmiBtnStateStart : FB_HmiBtn;
	s_fbHmiBtnStateStop : FB_HmiBtn;
	s_fbHmiBtnStateReset : FB_HmiBtn;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
m_Main();
]]></ST>
    </Implementation>
    <Method Name="_m_Devices" Id="{3599078c-5754-42cd-9cf9-50037344806e}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Mode buttons
s_fbHmiBtnModeAutomatic();
s_fbHmiBtnModeManual();
s_fbHmiBtnModeMaintenance();
s_fbHmiBtnModeIO();
s_fbHmiBtnModeCleaning();

//State buttons
s_fbHmiBtnStateStart();
s_fbHmiBtnStateStop();
s_fbHmiBtnStateReset();

CASE s_eCtrlMode OF
	E_CtrlMode.IDLE:
		s_fbHmiBtnModeAutomatic.p_bStaVisible := TRUE;
		s_fbHmiBtnModeManual.p_bStaVisible := TRUE;
		s_fbHmiBtnModeMaintenance.p_bStaVisible := TRUE;
		s_fbHmiBtnModeIO.p_bStaVisible := TRUE;
		s_fbHmiBtnModeCleaning.p_bStaVisible := TRUE;
		
		s_fbHmiBtnStateStart.p_bStaVisible := TRUE;
		s_fbHmiBtnStateStop.p_bStaVisible := TRUE;
		s_fbHmiBtnStateReset.p_bStaVisible := TRUE;
		
	E_CtrlMode.AUTOMATIC:
		;
		
	E_CtrlMode.MANUAL:
		;
		
	E_CtrlMode.MAINTENANCE:
		;
		
	E_CtrlMode.IO:
		;
		
	E_CtrlMode.CLEANING:
		;
	ELSE
		s_eCtrlMode := E_CtrlMode.IDLE;
END_CASE

IF (s_eCtrlState = E_CtrlState.STOPPED) THEN
		IF s_fbHmiBtnModeAutomatic.p_osrBtnPress THEN
			s_eCtrlMode := E_CtrlMode.AUTOMATIC;
			
		ELSIF s_fbHmiBtnModeManual.p_osrBtnPress THEN
			s_eCtrlMode := E_CtrlMode.MANUAL;
			
		ELSIF s_fbHmiBtnModeMaintenance.p_osrBtnPress THEN
			s_eCtrlMode := E_CtrlMode.MAINTENANCE;
			
		ELSIF s_fbHmiBtnModeIO.p_osrBtnPress THEN
			s_eCtrlMode := E_CtrlMode.IO;
			
		ELSIF s_fbHmiBtnModeCleaning.p_osrBtnPress THEN
			s_eCtrlMode := E_CtrlMode.CLEANING;
			
		END_IF
	END_IF

CASE s_eCtrlState OF
	E_CtrlState.STOPPED:
		
		IF s_fbHmiBtnStateReset.p_osrBtnPress THEN
			s_eCtrlState := E_CtrlState.IDLE;
		END_IF 
		
	E_CtrlState.IDLE:
		
		IF s_fbHmiBtnStateStop.p_osrBtnPress THEN
			s_eCtrlState := E_CtrlState.STOPPING;
		ELSIF s_fbHmiBtnStateStart.p_osrBtnPress THEN
			s_eCtrlState := E_CtrlState.RUNNING;
		END_IF
		
	E_CtrlState.RUNNING:
		
		IF s_fbHmiBtnStateStop.p_osrBtnPress OR i_bReqStopAlarm THEN
			s_eCtrlState := E_CtrlState.STOPPING;
		END_IF
		
	E_CtrlState.STOPPING:
		
		IF i_bStaAllStopped THEN
			s_eCtrlState := E_CtrlState.STOPPED;
		END_IF
		
ELSE
	s_eCtrlState := E_CtrlState.STOPPED;
END_CASE

IF (s_eCtrlState = E_CtrlState.STOPPED) THEN
	s_fbHmiBtnModeAutomatic.p_bStaEnabled := s_eCtrlMode <> E_CtrlMode.AUTOMATIC;
	s_fbHmiBtnModeManual.p_bStaEnabled := s_eCtrlMode <> E_CtrlMode.MANUAL;
	s_fbHmiBtnModeMaintenance.p_bStaEnabled := s_eCtrlMode <> E_CtrlMode.MAINTENANCE;
	s_fbHmiBtnModeIO.p_bStaEnabled := s_eCtrlMode <> E_CtrlMode.IO;
	s_fbHmiBtnModeCleaning.p_bStaEnabled := s_eCtrlMode <> E_CtrlMode.CLEANING;
ELSE
	s_fbHmiBtnModeAutomatic.p_bStaEnabled := FALSE;
	s_fbHmiBtnModeManual.p_bStaEnabled := FALSE;
	s_fbHmiBtnModeMaintenance.p_bStaEnabled := FALSE;
	s_fbHmiBtnModeIO.p_bStaEnabled := FALSE;
	s_fbHmiBtnModeCleaning.p_bStaEnabled := FALSE;
END_IF

IF (s_eCtrlMode <> E_CtrlMode.IDLE) THEN
	s_fbHmiBtnStateStart.p_bStaEnabled := s_eCtrlState = E_CtrlState.IDLE;
	s_fbHmiBtnStateStop.p_bStaEnabled := s_eCtrlState = E_CtrlState.RUNNING OR s_eCtrlState = E_CtrlState.IDLE;
	s_fbHmiBtnStateReset.p_bStaEnabled := s_eCtrlState = E_CtrlState.STOPPED;
ELSE
	s_fbHmiBtnStateStart.p_bStaEnabled := FALSE;
	s_fbHmiBtnStateStop.p_bStaEnabled := FALSE;
	s_fbHmiBtnStateReset.p_bStaEnabled := FALSE;
END_IF

_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{a1fc126f-d49b-4a46-ba19-1bb236760050}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Mode buttons
s_fbHmiBtnModeAutomatic.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnModeAutomatic.p_bStaVisible := FALSE;
s_fbHmiBtnModeAutomatic.p_bStaEnabled := FALSE;
s_fbHmiBtnModeAutomatic.p_sBtnText := 'Automatic';

s_fbHmiBtnModeManual.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnModeManual.p_bStaVisible := FALSE;
s_fbHmiBtnModeManual.p_bStaEnabled := FALSE;
s_fbHmiBtnModeManual.p_sBtnText := 'Manual';

s_fbHmiBtnModeMaintenance.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnModeMaintenance.p_bStaVisible := FALSE;
s_fbHmiBtnModeMaintenance.p_bStaEnabled := FALSE;
s_fbHmiBtnModeMaintenance.p_sBtnText := 'Maintenance';

s_fbHmiBtnModeIO.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnModeIO.p_bStaVisible := FALSE;
s_fbHmiBtnModeIO.p_bStaEnabled := FALSE;
s_fbHmiBtnModeIO.p_sBtnText := 'IO';

s_fbHmiBtnModeCleaning.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnModeCleaning.p_bStaVisible := FALSE;
s_fbHmiBtnModeCleaning.p_bStaEnabled := FALSE;
s_fbHmiBtnModeCleaning.p_sBtnText := 'Cleaning';

//State buttons
s_fbHmiBtnStateStart.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnStateStart.p_bStaVisible := FALSE;
s_fbHmiBtnStateStart.p_bStaEnabled := FALSE;
s_fbHmiBtnStateStart.p_sBtnText := 'Start';

s_fbHmiBtnStateStop.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnStateStop.p_bStaVisible := FALSE;
s_fbHmiBtnStateStop.p_bStaEnabled := FALSE;
s_fbHmiBtnStateStop.p_sBtnText := 'Stop';

s_fbHmiBtnStateReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
s_fbHmiBtnStateReset.p_bStaVisible := FALSE;
s_fbHmiBtnStateReset.p_bStaEnabled := FALSE;
s_fbHmiBtnStateReset.p_sBtnText := 'Reset';

_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{c6911376-dd10-4516-ac22-b723cd116f6a}">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT s_bInitDone THEN
	IF _m_Init() THEN 
		s_bInitDone := TRUE;
	END_IF
END_IF

_m_Devices();

m_Main := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_eCtrlMode" Id="{d43c325f-d6ae-4847-b472-d48b2167bf38}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_eCtrlMode : E_CtrlMode]]></Declaration>
      <Get Name="Get" Id="{688a72bc-5f64-4b43-997f-b5567a4de79d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_eCtrlMode := s_eCtrlMode;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_eCtrlState" Id="{d5d22fac-fb6e-44b3-b9a6-27a652b66a61}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_eCtrlState : E_CtrlState]]></Declaration>
      <Get Name="Get" Id="{23abc99e-61e4-4700-ae7a-8bc295621026}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_eCtrlState := s_eCtrlState;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>