<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="UN_CleanroomConnect" Id="{8b93890b-f796-4713-9491-f75e01fbeba7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK UN_CleanroomConnect EXTENDS Un_Base
VAR
	s_stSettings : ST_UN_CleanroomConnectSettings;	

	dtTimestamp : DATE_AND_TIME := DT#2017-04-04-12:42:42;
  	fbJson      : FB_JsonSaxWriter;
  	sJsonDoc    : STRING(255);
	hResult		: HRESULT;
	test : BOOL;
	
//------------------------------------------//
//Function Blocks

//------------------------------------------//

//------------------------------------------//
//Control Modules (Devices)4
	s_CmKmweLeds 				: CM_KmweLeds;
//------------------------------------------//

//------------------------------------------//
//Inputs
	s_diEmergencyBtn			: FB_DigInput;
//------------------------------------------//

//------------------------------------------//
//Alarms
	s_errEmergencyBtn			: FB_AlarmHandler;
//------------------------------------------//
	
//------------------------------------------//
//Params

//------------------------------------------//

//------------------------------------------//
//Variables
	s_stSqldbSettings			: ST_SqLdbConfiguration;
	s_bStaWarning : BOOL;
	s_bStaRunning : BOOL;
//------------------------------------------//

//------------------------------------------//
//Properties

//------------------------------------------//

//------------------------------------------//
//Hmi
	s_fbHmiBtnAutomatic			: FB_HmiBtn;
	s_fbHmiBtnManual			: FB_HmiBtn;
	s_fbHmiBtnAlarms			: FB_HmiBtn;
	
	s_fbHmiBtnReset				: FB_HmiBtn;
//------------------------------------------//

s_bCreate : BOOL;
s_bDestroy : BOOL;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();

//fbJson(initStatus => hResult);

IF test THEN

fbJson.StartObject();
	fbJson.AddKey('Setting 1:');
	fbJson.AddReal(12.3);
	fbJson.AddKey('Setting 2:');
	fbJson.AddReal(45.6);
	fbJson.AddKey('Setting 3:');
	fbJson.AddReal(78.9);
fbJson.EndObject();

sJsonDoc := fbJson.GetDocument();
fbJson.ResetDocument();

test := FALSE;

END_IF
]]></ST>
    </Implementation>
    <Method Name="_m_Alarms" Id="{c0f56159-8f50-4d36-acac-c259038873b1}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

//overbruggen in automode tot en met place table blablabla
s_errEmergencyBtn(i_bStaActive 			:= NOT s_DiEmergencyBtn.p_bStaInput AND NOT GVL.g_fbHmiBtnSimulation.p_bStaBtn AND GVL.g_bConnectTestEquipment ,
				  i_eAlarmLevel 		:= E_AlarmLevel.Alarm,
				  i_sAlarmText 			:= 'Emergency button pressed');

IF GVL_KMWEGenericLib.g_fbAlarmManager.p_bAlarmActive THEN 
	GVL.g_eStaLedColor := E_KmweLedColors.Red;
END_IF

s_bStaError := s_errEmergencyBtn.q_bStaActive;

_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{68eeb98b-de01-4c23-9e4b-e0a75e4ed7ba}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

//------------------------------------------//
//CM
	s_CmKmweLeds(i_bReqEnable := TRUE,
			 i_bCmdReset  := s_bCmdReset,
			 i_eCtrlMode  := s_eCtrlMode,
			 i_eColor 	  := GVL.g_eStaLedColor);
			 
	s_CmKmweLeds.p_bFlashFast := GVL.g_bLedFlashFast;
	s_CmKmweLeds.p_bFlashSlow := GVL.g_bLedFlashSlow;

//------------------------------------------//

//------------------------------------------//
//Outputs
//------------------------------------------//

//------------------------------------------//
//Inputs
	s_diEmergencyBtn();	
//------------------------------------------//




_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{6e489294-edbd-4c11-9b41-7f97eb3787da}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
VAR_INST
	s_sPrevPageAlarms 		: STRING;
	s_sPrevBottom1Alarms	: STRING;
	
	s_sCompanySelectionVisible	: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//------------------------------------------//
//Mode management
IF GVL_KMWEGenericLib.g_fbHmiBtnReturnToStart.p_osfBtnPress THEN
	s_eCtrlMode := E_CtrlMode.IDLE;

	GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= TRUE;
	GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= TRUE;	
END_IF

IF s_fbHmiBtnAutomatic.p_osfBtnPress THEN
	s_eCtrlMode := E_CtrlMode.AUTOMATIC;
END_IF

IF s_fbHmiBtnManual.p_osfBtnPress THEN
	s_eCtrlMode := E_CtrlMode.MANUAL;
END_IF

//------------------------------------------//

//------------------------------------------//
//Alarm Button can always be pressed
IF s_fbHmiBtnAlarms.p_osrBtnPress AND GVL.g_sToHmiMiddleContent <> GVL.g_stHmiMiddle.AlarmManager THEN
	s_sPrevPageAlarms			:= GVL.g_sToHmiMiddleContent;
	s_sPrevBottom1Alarms		:= GvL.g_sToHmiBottomContent;
	GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.AlarmManager;
	GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Alarm;
	
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible 			:= TRUE;
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled 			:= TRUE;
END_IF

IF GVL.g_sToHmiMiddleContent = GVL.g_stHmiMiddle.AlarmManager AND GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_osfBtnPress THEN
	GVL.g_sToHmiMiddleContent 	:=	s_sPrevPageAlarms;
	GVL.g_sToHmiBottomContent	:=	s_sPrevBottom1Alarms;
	
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible 			:= FALSE;
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled 			:= FALSE;
END_IF
//------------------------------------------//

//------------------------------------------//
//Hmi view management (General, Em can set module specific pages)
CASE s_eCtrlMode OF
	E_CtrlMode.IDLE:
(*		GVL.g_bConnectTestEquipment		:= TRUE;

		IF NOT GVL_KMWEGenericLib.g_fbAlarmManager.p_bAlarmActive THEN
			GVL.g_bLedFlashFast	:= FALSE;
			GVL.g_bLedFlashSlow	:= FALSE;
			GVL.g_eStaLedColor := E_KmweLedColors.Idle;
		END_IF
	
		s_fbHmiBtnTesterConfig.p_sBtnText		:= 'Tester Configuration';	
	
		IF GVL_KMWEGenericLib.g_fbHmiBtnReturnToStart.p_osfBtnPress THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := FALSE;

			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.Start;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Start;
		END_IF
		
		IF s_fbHmiBtnTesterConfig.p_osrBtnPress THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_nFolderIndex 	:= 1;
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := TRUE;

			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.TesterConfig;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.General_ReturnToStart;
		END_IF
		
		IF s_fbHmiBtnAutomatic.p_osrBtnPress THEN
			s_eCtrlMode 					:= E_CtrlMode.AUTOMATIC;
			GVL.g_bConnectTestEquipment		:= FALSE;
			
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_sBtnText		:= 'Acknowledge';
			
			GVL_KMWEGenericLib.g_fbParamManager.p_nFolderIndex 		:= 2;
			
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= FALSE;
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= FALSE;
	
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible		:= TRUE;
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled		:= TRUE;
			
			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.OperatorInputData;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Procedure;
		END_IF
		
		IF s_fbHmiBtnManual.p_osrBtnPress THEN
			s_eCtrlMode := E_CtrlMode.MANUAL;
			
			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.Manual;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.General_ReturnToStart;
		END_IF
*)
	E_CtrlMode.AUTOMATIC:
(*		s_fbHmiBtnTesterConfig.p_sBtnText		:= 'Procedure Configuration';
		
		IF GVL.g_sToHmiMiddleContent = GVL.g_stHmiMiddle.OperatorInputData 
			AND GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_osrBtnPress 
		THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := FALSE;

			GVL.g_sToHmiMiddleContent 							:= GVL.g_stHmiMiddle.Start;
			GVL.g_sToHmiBottomContent							:= GVL.g_stHmiBottomBar.Start;
			
			s_eCtrlMode 										:= E_CtrlMode.IDLE;	
		END_IF
		
		IF s_fbHmiBtnTesterConfig.p_osrBtnPress THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_nFolderIndex 	:= 2;
			GVL_KMWEGenericLib.g_fbParamManager.p_bShowHmiParam := TRUE;

			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= FALSE;
			GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= FALSE;
			
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible		:= TRUE;
			GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled		:= TRUE;

			GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.TesterConfig;
			GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.General_Return;
		END_IF
		
		IF GVL.g_sToHmiMiddleContent = GVL.g_stHmiMiddle.TesterConfig THEN
			IF GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_osrBtnPress THEN
				GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.OperatorInputData;
				GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Procedure;
				
				GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible		:= FALSE;
				GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled		:= FALSE;
			END_IF
		END_IF
*)		
	E_CtrlMode.MANUAL:
		IF GVL_KMWEGenericLib.g_fbAlarmManager.p_osrAlarmsResolved THEN
			GVL.g_eStaLedColor := E_KmweLedColors.Green;
		END_IF
	
		GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaVisible	:= FALSE;
		GVL_KMWEGenericLib.g_fbHmiBtnAcknowledge.p_bStaEnabled	:= FALSE;
		
//		IF GVL_KMWEGenericLib.g_fbHmiBtnReturnToStart.p_osrBtnPress THEN
//			GVL.g_sToHmiMiddleContent 	:= ST_HmiMiddle.Start;
//			GVL.g_sToHmiBottomContect	:= ST_HmiBottomBar.Start;
//		END_IF
		;
END_CASE
//------------------------------------------//

//------------------------------------------//
//Hmi Buttons
s_fbHmiBtnAutomatic();
s_fbHmiBtnManual();
//??s_fbHmiBtnTesterConfig();
s_fbHmiBtnAlarms();

s_fbHmiBtnReset();

GVL.g_fbHmiBtnSimulation();
//------------------------------------------//
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{71192b96-a840-4eae-8166-473534974241}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//EM Utilities
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emUtilities);

GVL_Modules.g_emUtilities.i_bReqEnable := FALSE;
GVL_Modules.g_emUtilities.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emUtilities.i_bCmdReset := FALSE;
GVL_Modules.g_emUtilities.i_sEmName  := 'EM Utilities';

//Settings Doors
//<none>

//EM Pallet Conveyor
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emPalletConveyor);

GVL_Modules.g_emPalletConveyor.i_bReqEnable := FALSE;
GVL_Modules.g_emPalletConveyor.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emPalletConveyor.i_bCmdReset := FALSE;
GVL_Modules.g_emPalletConveyor.i_sEmName  := 'EM Pallet Conveyor';

//Settings CM Pallet Conveyor
s_stSettings.stSettingsPalletConveyor.fSpeedManual := 50.0; //mm/s
s_stSettings.stSettingsPalletConveyor.fSpeedGoToInfeed := 100.0; //mm/s
s_stSettings.stSettingsPalletConveyor.fSpeedGoToCentering := 100.0; //mm/s
s_stSettings.stSettingsPalletConveyor.fSpeedGoToDocking := 50.0; //mm/s

//Settings CM Centering
s_stSettings.stSettingsPalletConveyor.tTimeoutCenteringToCenter := T#3S;
s_stSettings.stSettingsPalletConveyor.tTimeoutCenteringToIdle := T#3S;

//EM Docking Interface
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emDockingInterface);
GVL_Modules.g_emDockingInterface.i_bReqEnable := FALSE;
GVL_Modules.g_emDockingInterface.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emDockingInterface.i_bCmdReset := FALSE;
GVL_Modules.g_emDockingInterface.i_sEmName  := 'EM Docking Interface';

s_stSettings.stSettingsDockingInterface.tTimeoutDockingClamps := T#5S;
s_stSettings.stSettingsDockingInterface.tTimeoutUnlockingPins := T#5S;
s_stSettings.stSettingsDockingInterface.tTimeoutDoorOpener := T#5S;
s_stSettings.stSettingsDockingInterface.tTimeoutDoorShutter := T#5S;

s_stSettings.stSettingsDockingInterface.tCompressSealDuration := T#3S;
s_stSettings.stSettingsDockingInterface.tDelayCloseDoorShutterReleasingPins := T#3S;
s_stSettings.stSettingsDockingInterface.tDelayReleaseUnlockingPins := T#3S;
s_stSettings.stSettingsDockingInterface.tDelayOpenDoorShutter := T#3S;
s_stSettings.stSettingsDockingInterface.tDelayOpenDoorOpener := T#3S;
s_stSettings.stSettingsDockingInterface.tDelayCloseDoorShutter := T#3S;
s_stSettings.stSettingsDockingInterface.tDelayLockUnlockingPins := T#3S;

s_stSettings.stSettingsDockingInterface.bOpenClampsAfterClosingTimeout := FALSE; 

//EM Lifting Transport
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emLiftingTransport);

GVL_Modules.g_emLiftingTransport.i_bReqEnable := FALSE;
GVL_Modules.g_emLiftingTransport.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emLiftingTransport.i_bCmdReset := FALSE;
GVL_Modules.g_emLiftingTransport.i_sEmName := 'EM Lifting Transport';

//Manual-Jogging
s_stSettings.stSettingsLiftingTransport.stLiftSpeedProfileJogging.fVelocity := 25.0; //mm/s
s_stSettings.stSettingsLiftingTransport.stLiftSpeedProfileJogging.fAcceleration := 25.0; //mm/s^2
s_stSettings.stSettingsLiftingTransport.stLiftSpeedProfileJogging.fDeceleration	:= 25.0; //mm/s^2
s_stSettings.stSettingsLiftingTransport.stLiftSpeedProfileJogging.fJerk	:= 250.0; //mm/s^3

//Manual-Positioning
s_stSettings.stSettingsLiftingTransport.stLiftSpeedProfilePositioning.fVelocity	:= 25.0; //mm/s
s_stSettings.stSettingsLiftingTransport.stLiftSpeedProfilePositioning.fAcceleration	:= 25.0; //mm/s^2
s_stSettings.stSettingsLiftingTransport.stLiftSpeedProfilePositioning.fDeceleration	:= 25.0; //mm/s^2
s_stSettings.stSettingsLiftingTransport.stLiftSpeedProfilePositioning.fJerk	:= 250.0; //mm/s^3

//Automatic-Positioning Lift
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[0].sName	:= 'Idle';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[0].fPosition := 50.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[0].fVelocity := 100.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[0].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[0].fDeceleration	:= 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[0].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[1].sName	:= 'PrePickTrolleyInTB';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[1].fPosition := 300.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[1].fVelocity := 100.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[1].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[1].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[1].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[2].sName	:= 'PickTrolleyInTB';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[2].fPosition := 325.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[2].fVelocity := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[2].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[2].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[2].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[3].sName	:= 'RaiseTrolleyInTB';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[3].fPosition := 350.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[3].fVelocity := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[3].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[3].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[3].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[4].sName	:= 'PrePlaceTrolleyInCabin';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[4].fPosition := 125.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[4].fVelocity := 100.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[4].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[4].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[4].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[5].sName	:= 'PlaceTrolleyInCabin';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[5].fPosition := 100.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[5].fVelocity := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[5].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[5].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[5].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[6].sName	:= 'PrePickTrolleyInCabin';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[6].fPosition := 100.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[6].fVelocity := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[6].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[6].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[6].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[7].sName	:= 'PickTrolleyInCabin';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[7].fPosition := 125.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[7].fVelocity := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[7].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[7].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[7].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[8].sName	:= 'RaiseTrolleyInCabin';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[8].fPosition := 350.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[8].fVelocity := 100.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[8].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[8].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[8].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[9].sName	:= 'PrePlaceTrolleyInTB';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[9].fPosition := 325.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[9].fVelocity := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[9].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[9].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[9].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[10].sName := 'PlaceTrolleyInTB';
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[10].fPosition := 300.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[10].fVelocity := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[10].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[10].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_LiftPositioningProfile[10].fJerk := 100.0; //[mm/s^3]

//Automatic-Positioning Transport
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[0].sName := 'Idle';
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[0].fPosition := 50.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[0].fVelocity := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[0].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[0].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[0].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[1].sName := 'PrePickTrolleyInTB';
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[1].fPosition := 400.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[1].fVelocity := 100.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[1].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[1].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[1].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[2].sName := 'PickTrolleyInTB';
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[2].fPosition := 425.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[2].fVelocity := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[2].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[2].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[2].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[3].sName := 'PlaceTrolleyInCabin';
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[3].fPosition := 50.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[3].fVelocity := 100.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[3].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[3].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[3].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[4].sName := 'PrePlaceTrolleyInTB';
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[4].fPosition := 400.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[4].fVelocity := 100.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[4].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[4].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[4].fJerk := 100.0; //[mm/s^3]

s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[5].sName := 'PlaceTrolleyInTB';
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[5].fPosition := 425.0; //[mm]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[5].fVelocity := 10.0; //[mm/s] 
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[5].fAcceleration := 10.0;  //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[5].fDeceleration := 10.0; //[mm/s^2]
s_stSettings.stSettingsLiftingTransport.arr_TransportUnitPositioningProfile[5].fJerk := 100.0; //[mm/s^3]

GVL_Modules.g_emLiftingTransport.i_ref_stSettings REF= s_stSettings.stSettingsLiftingTransport;

/////
(*
_m_AddModule(i_itfModuleBase := GVL_Modules.g_emDockingCabin);

GVL_Modules.g_emDockingCabin.i_bReqEnable := FALSE;
GVL_Modules.g_emDockingCabin.i_eCtrlMode := E_CtrlMode.IDLE;
GVL_Modules.g_emDockingCabin.i_bCmdReset := FALSE;
GVL_Modules.g_emDockingCabin.i_sEmName  := 'EM State Machine';

//Settings Doors
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDoors.tOuterDoorTimeout := T#15S;
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDoors.tCleanroomDoorTimeout := T#3S;
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDoors.tResetPulseDuration := T#1S;

//Settings Docking Interface
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDockingInterface.tClampsTimeout := T#5S;
GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsDockingInterface.tReleasePinsTimeout := T#5S;
*)
//Settings AirTreatment
//..GVL_Modules.g_emDockingCabin.i_stSettings.stSettingsAirTrearment.. := TODO;

//------------------------------------------//
//Hmi Startup
GVL.g_sToHmiTopContent 		:= GVL.g_stHmiTopBar.GeneralTopbar;
GVL.g_sToHmiMiddleContent 	:= GVL.g_stHmiMiddle.Start;
GVL.g_sToHmiBottomContent	:= GVL.g_stHmiBottomBar.Start;
//------------------------------------------//

//------------------------------------------//
//Buttons
	s_fbHmiBtnAutomatic.p_bStaEnabled 		:= TRUE;
	s_fbHmiBtnAutomatic.p_bStaVisible 		:= TRUE;
	s_fbHmiBtnAutomatic.p_eButtontype		:= E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnAutomatic.p_sBtnText			:= 'Auto';

	s_fbHmiBtnManual.p_bStaEnabled 			:= TRUE;
	s_fbHmiBtnManual.p_bStaVisible 			:= TRUE;
	s_fbHmiBtnManual.p_eButtontype			:= E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManual.p_sBtnText				:= 'Manual';
	
	s_fbHmiBtnAlarms.p_bStaVisible 			:= TRUE;
	s_fbHmiBtnAlarms.p_bStaEnabled			:= TRUE;
	s_fbHmiBtnAlarms.p_eButtontype 			:= E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnAlarms.p_sBtnText				:= 'Alarms';
	
	s_fbHmiBtnReset.p_bStaVisible 			:= TRUE;
	s_fbHmiBtnReset.p_bStaEnabled			:= TRUE;
	s_fbHmiBtnReset.p_eButtontype 			:= E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_sBtnText				:= 'Reset';

	GVL.g_fbHmiBtnSimulation.p_bStaVisible 	:= TRUE;
	GVL.g_fbHmiBtnSimulation.p_bStaEnabled	:= TRUE;
	GVL.g_fbHmiBtnSimulation.p_eButtontype 	:= E_HmiButtonType.TOGGLEBUTTON;
	GVL.g_fbHmiBtnSimulation.p_sBtnText		:= 'Simulation';
	
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaVisible 	:= FALSE;
	GVL_KMWEGenericLib.g_fbHmiBtnReturn.p_bStaEnabled 	:= FALSE;
//------------------------------------------//


//------------------------------------------//
//Database information
s_stSqldbSettings.sServer				:= 'plc-db\sqlexpress';
s_stSqldbSettings.sProvider				:= 'SQLOLEDB';
s_stSqldbSettings.sDatabase				:= 'RMMT_Tester';
s_stSqldbSettings.sUserID				:= 'RMMT_Tester';
s_stSqldbSettings.sPassword				:= 'dCH9FTVALtsukUQMv5yjWr';
s_stSqldbSettings.bAuthentification		:= TRUE;
//------------------------------------------//

_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Modules" Id="{2372c80a-8810-4c92-8500-979916e08046}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Modules : BOOL
VAR
	bReqEnable : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GVL_Modules.g_objCarrier();

IF s_bCreate THEN GVL_Modules.g_objCarrier.m_Create(i_eDestination := E_Location.CLEAN_ROOM); s_bCreate := FALSE; END_IF; 
IF s_bDestroy THEN GVL_Modules.g_objCarrier.m_Destroy(); s_bDestroy := FALSE; END_IF;

GVL_Modules.g_emUtilities.m_GetGeneralState(
	i_bError := s_bStaError,
	i_bWarning := s_bStaWarning,
	i_bRunning := s_bStaRunning);

GVL_Modules.g_emUtilities(
	i_bReqEnable := TRUE,
	i_eCtrlMode := s_eCtrlMode,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_sEmName := 'EM Utilities');
	
bReqEnable :=
	GVL_Modules.g_emUtilities.p_bStaSafetyOk
	AND GVL_Modules.g_emUtilities.p_bStsPowerOk
	AND GVL_Modules.g_emUtilities.p_bStaAirPressureOk;
	
GVL_Modules.g_emPalletConveyor(
	i_bReqEnable := bReqEnable,
	i_eCtrlMode := s_eCtrlMode,
	i_bIlckConveyorForward := NOT(GVL_Modules.g_emDockingInterface.p_bStaUndocked),
	i_bIlckConveyorBackward := NOT(GVL_Modules.g_emDockingInterface.p_bStaUndocked),
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_sEmName := 'EM Pallet Conveyor',
	i_refTB := GVL_Modules.g_objCarrier);

GVL_Modules.g_emDockingInterface(
	i_bReqEnable := bReqEnable,
	i_eCtrlMode := s_eCtrlMode,
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button
	i_sEmName := 'EM Docking Interface',
	i_refTB := GVL_Modules.g_objCarrier);	

GVL_Modules.g_emLiftingTransport(
	i_bReqEnable := bReqEnable,
	i_eCtrlMode := s_eCtrlMode,
	i_bIlckLiftUp := FALSE, //TODO
	i_bIlckLiftDown := FALSE, //TODO
	i_bIlckTransportExtract := FALSE, //TODO
	i_bIlckTransportRetract := FALSE, //TODO
	i_bCmdReset := p_bCmdReset OR s_fbHmiBtnReset.p_bStaBtn, //Add temp reset button,
	i_sEmName := 'EM Lifting Tranport',
	i_refTB := GVL_Modules.g_objCarrier);
	
	
//??GVL_Modules.g_emDockingCabin(
//??	i_bReqEnable := TRUE,
//??	i_eCtrlMode := s_eCtrlMode,
//??	i_bCmdReset := p_bCmdReset,
//??	i_sEmName := 'EM State Machine',
//??	i_ref_objCarrier := GVL_Modules.g_objCarrier);

s_bStaError :=
	GVL_Modules.g_emUtilities.q_bStaError 
	OR GVL_Modules.g_emPalletConveyor.q_bStaError
	OR GVL_Modules.g_emDockingInterface.q_bStaError;
	
s_bStaWarning := 
	GVL_Modules.g_emUtilities.q_bStaWarning 
	OR GVL_Modules.g_emPalletConveyor.q_bStaWarning
	OR GVL_Modules.g_emDockingInterface.q_bStaWarning;
	
_m_Modules := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_SelectConfigFile" Id="{7c7e81b7-08ef-4473-8a6d-b20d88aaf565}">
      <Declaration><![CDATA[METHOD PRIVATE _m_SelectConfigFile : BOOL
VAR_INPUT
	i_bCmdReset 			: BOOL;
END_VAR
VAR_INST	
	i, x					: UDINT;
		
	s_aPossibleRevs			: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;
	
	s_aConfigFileNames 		: ARRAY[0..Param_Project.n_MaxParamFiles] OF T_MAXSTRING;
	s_aConfigFileDUTs		: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;	
	s_aConfigFileRev		: ARRAY[0..Param_Project.n_MaxParamFiles] OF T_MAXSTRING;
	
	s_aSingleDUTs			: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;
	s_aSingleREVs			: ARRAY[0..TO_DINT(Param_Project.n_MaxParamFiles)] OF T_MAXSTRING;
		
	s_nIndexDut				: INT;
//	s_nIndexSR				: INT;
	s_nIndexRev				: INT;
	
	s_nIndexDutPrev			: INT;
	s_nIndexRevPrev			: INT;
	
	s_sChosenFile			: T_MAXSTRING;
	s_sToHmiChosenFile		: T_MAXSTRING;
	
	s_bCmdResetInternal	 	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//1413824/E test bestand met deze naam.

IF i_bCmdReset OR s_bCmdResetInternal THEN	
	MEMSET(ADR(s_aConfigFileNames), 0, SIZEOF(s_aConfigFileNames));
	MEMSET(ADR(s_aConfigFileDUTs), 0, SIZEOF(s_aConfigFileDUTs));
	MEMSET(ADR(s_aSingleDUTs), 0, SIZEOF(s_aSingleDUTs));
	
	MEMCPY(ADR(s_aConfigFileNames), ADR(GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi), SIZEOF(GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi));
	
	s_nIndexDut		:= -1;
//	s_nIndexSR		:= -1;
	s_nIndexRev		:= -1;
	
	FOR i := 0 TO Param_Project.n_MaxParamFiles DO 
		FindAndSplit(pSeparator:= ADR('^'),
							 pSrcString:= ADR(s_aConfigFileNames[i]),
							 pLeftString:= ADR(s_aConfigFileDUTs[i]),
							 nLeftSize:= SIZEOF(s_aConfigFileDUTs[i]),
							 pRightString:= ADR(s_aConfigFileRev[i]),
							 nRightSize:= SIZEOF(s_aConfigFileRev[i]),
							 bSearchFromRight:= FALSE);	

		s_aConfigFileRev[i] := 	DELETE(s_aConfigFileRev[i], 6, 2);			
	END_FOR
	
	F_CheckDuplicatesInArray(iq_aOriginalArray := s_aConfigFileDUTs, iq_aUniqueArray := s_aSingleDUTs);

	IF s_aConfigFileNames[0] = '' THEN
		s_bCmdResetInternal := TRUE;	
	ELSE
		s_bCmdResetInternal := FALSE;	
	END_IF
END_IF

IF s_nIndexDutPrev <> s_nIndexDut AND s_nIndexDutPrev <> -1 THEN
	s_nIndexRev := -1;
	
	MEMSET(ADR(s_aSingleREVs), 0, SIZEOF(s_aSingleREVs));
END_IF

IF s_nIndexDut <> -1 AND s_nIndexRev = -1 THEN 
	x := 0;
	MEMSET(ADR(s_aSingleREVs), 0, SIZEOF(s_aSingleREVs));
	MEMSET(ADR(s_aPossibleRevs), 0, SIZEOF(s_aPossibleRevs));
	FOR i:= 0 TO Param_Project.n_MaxParamFiles DO
		IF FIND(s_aConfigFileNames[i], s_aSingleDUTs[s_nIndexDut]) <> 0 THEN
			s_aPossibleRevs[x] := MID(s_aConfigFileNames[i],1,FIND(s_aConfigFileNames[i], '^')+1);
			x := x + 1;
		END_IF					
	END_FOR	
	
	F_CheckDuplicatesInArray(iq_aOriginalArray := s_aPossibleRevs, iq_aUniqueArray := s_aSingleREVs); 
END_IF

IF s_nIndexDut <> -1 AND s_nIndexRev <> -1 AND s_nIndexRevPrev <> s_nIndexRev THEN
	FOR i := 0 TO Param_Project.n_MaxParamFiles DO
		IF s_aConfigFileNames[i] = CONCAT(s_aSingleDUTs[s_nIndexDut], 
										CONCAT('^', 
										CONCAT(s_aSingleRevs[s_nIndexRev], '.csv')))
		THEN
			s_sChosenFile := s_aConfigFileNames[i];
		END_IF
	END_FOR
	
	FOR i := 0 TO Param_Project.n_MaxParamFiles DO
		IF GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi[i] = s_sChosenFile THEN
			GVL_KMWEGenericLib.g_fbParamManager.p_nHmiFileSelected := TO_UDINT(i);
		END_IF
	END_FOR 
END_IF

IF s_aConfigFileNames[GVL_KMWEGenericLib.g_fbParamManager.p_nHmiFileSelected] <> s_sChosenFile THEN
	s_nIndexDut	:= -1;
	s_nIndexRev	:= -1;
	
	MEMSET(ADR(s_aSingleREVs), 0, SIZEOF(s_aSingleREVs));
END_IF

s_sChosenFile 		:= GVL_KMWEGenericLib.g_fbParamManager.s_aFileListHmi[GVL_KMWEGenericLib.g_fbParamManager.p_nHmiFileSelected];
s_sToHmiChosenFile 	:= DELETE(s_sChosenFile, 4, FIND(s_sChosenFile, '.csv'));

s_nIndexRevPrev := s_nIndexRev;
s_nIndexDutPrev	:= s_nIndexDut;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_FullCycle" Id="{85945a60-1e58-4d91-af47-0c270dd5f580}">
      <Declaration><![CDATA[METHOD PUBLIC m_FullCycle : BOOL
VAR
	sReason : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//FullCycle
//++	m_Inbound();
//	Wait(T#5S)
//	m_Outbound();

	//EM_PalletConveyor	
	IF GVL_Modules.g_objCarrier.p_eDestination <> E_Location.UNKNOWN
		AND GVL_Modules.g_objCarrier.p_eDestination > GVL_Modules.g_objCarrier.p_eLocation
		AND GVL_Modules.g_objCarrier.p_eLocation < E_Location.CENTERING  
		AND GVL_Modules.g_objCarrier.p_bOuterDoorOpened THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToCenter();
		 	
	ELSIF GVL_Modules.g_objCarrier.p_eDestination <> E_Location.UNKNOWN
		AND GVL_Modules.g_objCarrier.p_eDestination > GVL_Modules.g_objCarrier.p_eLocation
		AND GVL_Modules.g_objCarrier.p_eLocation < E_Location.DOCKING 
		AND GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone
		AND GVL_Modules.g_emDockingInterface.p_bStaUndocked THEN
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToDocking();
	
	ELSIF GVL_Modules.g_objCarrier.p_eDestination <> E_Location.UNKNOWN
		AND GVL_Modules.g_objCarrier.p_eDestination < GVL_Modules.g_objCarrier.p_eLocation
		AND GVL_Modules.g_objCarrier.p_eLocation > E_Location.INFEED
		AND GVL_Modules.g_emDockingInterface.p_bStaUndocked THEN 
			GVL_Modules.g_emPalletConveyor.m_ReqTB_ToInfeed();
	
	END_IF
	
	IF GVL_Modules.g_objCarrier.p_eDestination <> E_Location.UNKNOWN
		AND GVL_Modules.g_objCarrier.p_eLocation = E_Location.CENTERING  
		AND NOT(GVL_Modules.g_emPalletConveyor.p_bStaTB_CenteringDone) THEN
			GVL_Modules.g_emPalletConveyor.m_ReqCenteringTB();
			
	END_IF
	
	//EM_DockingInterface
	IF GVL_Modules.g_objCarrier.p_eDestination <> E_Location.UNKNOWN
		AND GVL_Modules.g_objCarrier.p_eLocation = E_Location.DOCKING
		AND GVL_Modules.g_objCarrier.p_eDestination > E_Location.DOCKING 
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaDocked) THEN
			GVL_Modules.g_emDockingInterface.m_DockBox();
			
	ELSIF GVL_Modules.g_objCarrier.p_eDestination <> E_Location.UNKNOWN
		AND GVL_Modules.g_objCarrier.p_eLocation = E_Location.DOCKING
		AND GVL_Modules.g_objCarrier.p_eDestination < E_Location.DOCKING
		AND GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosedAndLocked
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaUndocked) THEN  
			GVL_Modules.g_emDockingInterface.m_UndockBox();

	ELSIF GVL_Modules.g_objCarrier.p_eDestination <> E_Location.UNKNOWN
		AND GVL_Modules.g_objCarrier.p_eLocation = E_Location.DOCKING
		AND GVL_Modules.g_objCarrier.p_eDestination > E_Location.DOCKING
		AND GVL_Modules.g_emDockingInterface.p_bStaDocked
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorOpenedAndReleased) THEN  
			GVL_Modules.g_emDockingInterface.m_OpenInnerDoor();
			
	ELSIF GVL_Modules.g_objCarrier.p_eDestination <> E_Location.UNKNOWN
		AND GVL_Modules.g_objCarrier.p_eLocation = E_Location.DOCKING
		AND GVL_Modules.g_objCarrier.p_eDestination < E_Location.DOCKING
		AND NOT(GVL_Modules.g_emDockingInterface.p_bStaInnerDoorClosedAndLocked) THEN  
			GVL_Modules.g_emDockingInterface.m_CloseInnerDoor();		
			
	END_IF		]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Inbound" Id="{90534ebe-9d21-4aeb-b2cc-cf785c67a06d}">
      <Declaration><![CDATA[METHOD PUBLIC m_Inbound : BOOL
VAR
	sReason : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Onderstaande sequencer zal nog verder moeten worden opgebouwd

GVL_Modules.g_emPalletConveyor.m_CmdTB_ToCenter();
GVL_Modules.g_emPalletConveyor.m_CmdCenteringTB(i_refReason := sReason);
GVL_Modules.g_emPalletConveyor.m_CmdTB_ToDocking();
GVL_Modules.g_emDockingInterface.m_DockBox();
//GVL_Modules.g_emDockingInterface.m_OpenDoors();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{bf5d9d9d-3881-4722-ad23-ed0781ff35d5}">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

GVL.g_osrNotify();

//--GVL_DataLogging.g_fbDataLogger(i_sPathName := 'C:\RMMT\', i_bCmdReset := s_bCmdReset);

//--GVL_DataLogging.g_fbSqlDatabase(i_stSettings := s_stSqlDbSettings, i_bCmdReset := s_bCmdReset);

//--_m_SelectConfigFile(i_bCmdReset := s_fbHmiBtnAutomatic.p_osfBtnPress);

GVL.g_osrNotify.CLK := FALSE;	

m_FullCycle();

m_Main := TRUE;



// Paul Schippers: just a test with the use of interfaces
//??itfEmDoors.m_CloseOuterDoor();

//??itfEmDockingInterface.m_OpenDockingClamps();

//IF NOT(itfEmAirTreatment.p_bStaPressurizingOK) THEN 
//	itfEmAirTreatment.m_Pressurize();
//END_IF

(*	
	// Interlocks (doors must work as an airlock, only one door may be opened at all times)
	s_bIlckSpeedDoorOuterToOpen :=
		s_cmDoorLockCleanroom.p_bStaError
		OR NOT(s_cmDoorLockCleanroom.p_bStaEnabled)
		NOT(s_cmDoorLockCleanroom.p_bStaDoorIsClosed)
		OR NOT (s_cmDoorLockCleanroom.p_bStaLockIsApplied)
		OR s_cmDoorLockCleanroom.p_bStaLockIsReleased
		OR TRUE (*Air treathment unit must be running and ok*)
		OR TRUE (*Add more..*);
	s_bIlckSpeedDoorOuterToClose :=
		TRUE (*Opening must be free*)
		OR TRUE (*Add more..*);
	
	s_bIlckDoorLockCleanroomToOpen :=
		s_cmSpeedDoorOuter.p_bStaError
		OR NOT(s_cmSpeedDoorOuter.p_bStaEnabled)
		OR NOT(s_cmSpeedDoorOuter.p_bStaIsClosed)
		OR s_cmSpeedDoorOuter.p_bStaIsClosing
		OR s_cmSpeedDoorOuter.p_bStaIsOpened
		OR s_cmSpeedDoorOuter.p_bStaIsOpening
		OR TRUE (*Air treathment unit must be running and ok*)
		OR TRUE (*Add more..*);
*)	]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Outbound" Id="{6261bd7c-d400-4b5a-911e-fc663ac04169}">
      <Declaration><![CDATA[METHOD PUBLIC m_Outbound : BOOL
VAR
	sReason : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Onderstaande sequencer zal nog verder moeten worden opgebouwd

//GVL_Modules.g_emDockingInterface.m_CloseDoors();
GVL_Modules.g_emDockingInterface.m_UndockBox();
GVL_Modules.g_emPalletConveyor.m_CmdTB_ToInfeed();
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="UN_CleanroomConnect">
      <LineId Id="171" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="302" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="318" Count="1" />
      <LineId Id="316" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="317" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Alarms">
      <LineId Id="28" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="11" Count="3" />
      <LineId Id="16" Count="6" />
      <LineId Id="5" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Devices">
      <LineId Id="35" Count="0" />
      <LineId Id="6" Count="9" />
      <LineId Id="30" Count="3" />
      <LineId Id="16" Count="9" />
      <LineId Id="38" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Hmi">
      <LineId Id="286" Count="0" />
      <LineId Id="9" Count="11" />
      <LineId Id="307" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="313" Count="1" />
      <LineId Id="316" Count="2" />
      <LineId Id="315" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="21" Count="26" />
      <LineId Id="274" Count="1" />
      <LineId Id="240" Count="0" />
      <LineId Id="254" Count="1" />
      <LineId Id="242" Count="1" />
      <LineId Id="241" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="51" Count="16" />
      <LineId Id="277" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="184" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="191" Count="2" />
      <LineId Id="235" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="76" Count="4" />
      <LineId Id="84" Count="4" />
      <LineId Id="99" Count="0" />
      <LineId Id="231" Count="1" />
      <LineId Id="187" Count="0" />
      <LineId Id="189" Count="1" />
      <LineId Id="196" Count="2" />
      <LineId Id="195" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="209" Count="2" />
      <LineId Id="216" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="228" Count="2" />
      <LineId Id="212" Count="2" />
      <LineId Id="208" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="220" Count="7" />
      <LineId Id="219" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="265" Count="1" />
      <LineId Id="264" Count="0" />
      <LineId Id="244" Count="2" />
      <LineId Id="142" Count="11" />
      <LineId Id="155" Count="1" />
      <LineId Id="295" Count="1" />
      <LineId Id="294" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Init">
      <LineId Id="1635" Count="61" />
      <LineId Id="1908" Count="0" />
      <LineId Id="1698" Count="41" />
      <LineId Id="1911" Count="0" />
      <LineId Id="1741" Count="89" />
      <LineId Id="1832" Count="0" />
      <LineId Id="1834" Count="71" />
      <LineId Id="78" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_Modules">
      <LineId Id="556" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="564" Count="1" />
      <LineId Id="563" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="490" Count="14" />
      <LineId Id="548" Count="0" />
      <LineId Id="506" Count="2" />
      <LineId Id="542" Count="0" />
      <LineId Id="544" Count="0" />
      <LineId Id="509" Count="1" />
      <LineId Id="553" Count="0" />
      <LineId Id="511" Count="5" />
      <LineId Id="554" Count="0" />
      <LineId Id="569" Count="0" />
      <LineId Id="517" Count="0" />
      <LineId Id="572" Count="2" />
      <LineId Id="576" Count="2" />
      <LineId Id="575" Count="0" />
      <LineId Id="579" Count="1" />
      <LineId Id="571" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="518" Count="10" />
      <LineId Id="536" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="537" Count="1" />
      <LineId Id="535" Count="0" />
      <LineId Id="529" Count="1" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect._m_SelectConfigFile">
      <LineId Id="202" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="3" Count="30" />
      <LineId Id="40" Count="1" />
      <LineId Id="43" Count="2" />
      <LineId Id="47" Count="14" />
      <LineId Id="79" Count="5" />
      <LineId Id="143" Count="0" />
      <LineId Id="87" Count="12" />
      <LineId Id="101" Count="2" />
      <LineId Id="105" Count="6" />
      <LineId Id="203" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_FullCycle">
      <LineId Id="102" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="106" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="125" Count="1" />
      <LineId Id="183" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="161" Count="1" />
      <LineId Id="159" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="151" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_Inbound">
      <LineId Id="86" Count="2" />
      <LineId Id="31" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="95" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_Main">
      <LineId Id="30" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="59" Count="3" />
      <LineId Id="66" Count="3" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="33" Count="24" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="UN_CleanroomConnect.m_Outbound">
      <LineId Id="86" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="91" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>