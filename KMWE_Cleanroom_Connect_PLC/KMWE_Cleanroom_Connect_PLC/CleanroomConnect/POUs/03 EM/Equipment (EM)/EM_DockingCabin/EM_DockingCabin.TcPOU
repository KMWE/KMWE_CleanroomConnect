<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_DockingCabin" Id="{ddb6504e-a47b-46ee-987c-d5bb3bc3434b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_DockingCabin EXTENDS EM_Base
VAR CONSTANT 
	c_nResultDataSize : UINT := 20;
END_VAR

VAR_INPUT
//Inputs
	i_stSettings : ST_SettingsDockingCabin;
	
	i_ref_objCarrier : REFERENCE TO OBJ_Carrier;
END_VAR

VAR
//------------------------------------------//
//Equipment Modules (sub equipment)
	s_emDoors : EM_Doors;
	s_emDockingInterface : EM_DockingInterface;
	s_emAirTreatment : EM_AirTreatment;
//------------------------------------------//	

//------------------------------------------//
//Outputs
	//..

//------------------------------------------//

//Requests
	s_bReqToDock : BOOL;
	s_bReqToUndock : BOOL;
	s_bReqToUnlockCleanroomDoor : BOOL;
	
//Status
	s_bStaBoxAtPreDockPosition : BOOL;
	s_bStaBoxAtDockPosition : BOOL;
	s_bStaBoxRemovedFromDockPosition : BOOL;
	
//Properties

//------------------------------------------//
//Params
	//Tool settings
	s_fbParamToolHardwareNr				: FB_HmiParamHandler;
    s_fbParamToolSoftwareVersion		: FB_HmiParamHandler;

	s_fbParamName						: FB_HmiParamHandler;
	s_fbParamNumber						: FB_HmiParamHandler;
	s_fbParamRevision                   : FB_HmiParamHandler;
	
	//Product settings (Maybe)
	s_fbParamTotalStroke				: FB_HmiParamHandler;
	s_fbParamStepStroke					: FB_HmiParamHandler;
	s_fbParamAveragingNumberTest		: FB_HmiParamHandler;
	
	s_fbParamaMaxMagnitudeCriteria		: FB_HmiParamHandler;
	
	s_fbParamRefIduBottom				: FB_HmiParamHandler;
	s_fbParamRefItm                     : FB_HmiParamHandler;
	s_fbParamRefCenterTpmPipe           : FB_HmiParamHandler;
	s_fbParamRefCpValve					: FB_HmiParamHandler;
//------------------------------------------//

//------------------------------------------//
//Variables
	s_eSequence : E_SeqDockingCabin;
	s_ePrevStep : E_SeqDockingCabin;
	s_fbSeqControl : FB_SeqControl;
	
//------------------------------------------//

//------------------------------------------//
//Sensor data	
	s_aMagneticX						: ARRAY[0..c_nResultDataSize] OF LREAL;
	s_aMagneticY						: ARRAY[0..c_nResultDataSize] OF LREAL;
	s_aMagneticZ						: ARRAY[0..c_nResultDataSize] OF LREAL;
	s_aMagneticMagnitude				: ARRAY[0..c_nResultDataSize] OF LREAL;
	s_aProbePositionZ					: ARRAY[0..c_nResultDataSize] OF LREAL;
	
	s_sXMLData							: STRING(Param_Project.n_MaxLenghtXmlDbRow*Param_Project.n_NumberofRowsXmlDb);
	
	s_aHmi_MagneticTest					: ARRAY[1..3,0..c_nResultDataSize] OF ST_POINT;
	
//	s_aHmi_ProbePositionZ				: ARRAY[1..1,1..GVL_Datalogging.c_nHmiLogSize] OF ST_POINT;
//------------------------------------------//

//------------------------------------------//
//Alarms
	
	
//------------------------------------------//

//------------------------------------------//
//Hmi
	s_nToHmiStepNr						: INT;
	s_nToHmiMaxStepNr					: INT;
	s_sToHmiInstructionText				: T_MAXSTRING;
	s_sToHmiProcedure					: T_MAXSTRING;
	
	s_fbHmiBtnReset						: FB_HmiBtn;
	
	
//------------------------------------------//
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Folder Name="Base" Id="{0bdf27b8-843b-475e-be55-cdb4e5600f55}" />
    <Method Name="_m_Alarms" Id="{91ca146d-b383-4bc6-9275-30ba5174e1b8}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF
	
	s_fbAlarmHandlerOuterDoorNoAllowedToOpen(
		i_bStaActive := i_bReqEnable AND s_bWrnOuterDoorNoAllowedToOpen,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Outer Door Not Allowed To Open');
	
	s_fbAlarmHandlerOuterDoorNoAllowedToClose(
		i_bStaActive := i_bReqEnable AND s_bWrnOuterDoorNoAllowedToClose,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Outer Door Not Allowed To Close');
	
	s_fbAlarmHandlerCleanroomDoorNoAllowedToRelease(
		i_bStaActive := i_bReqEnable AND s_bWrnCleanroomDoorNoAllowedToRelease,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Cleanroom Door Not Allowed To Release/Open');
	
	s_fbAlarmHandlerCleanroomDoorNoAllowedToLock(
		i_bStaActive := i_bReqEnable AND s_bWrnCleanroomDoorNoAllowedToLock,
		i_eAlarmLevel := E_AlarmLevel.Warning,
		i_sAlarmText := 'Cleanroom Door Not Allowed To Lock');
	
	//Reset error/warning bits
	IF i_bCmdReset THEN
		s_bWrnOuterDoorNoAllowedToOpen := FALSE;
		s_bWrnOuterDoorNoAllowedToClose := FALSE;
		s_bWrnCleanroomDoorNoAllowedToRelease := FALSE;
		s_bWrnCleanroomDoorNoAllowedToLock := FALSE;
	END_IF

_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{ae238055-2f7f-404e-8ea8-17f42275f2ef}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnReset();
	
s_fbHmiBtnCloseOuterDoor();
s_fbHmiBtnOpenOuterDoor();
	
s_fbHmiBtnApplyLockCleanroomDoor();;
s_fbHmiBtnReleaseLockCleanroomDoor();

//Leds	
s_fbHmiLedOuterDoorClosed(i_bStaLed := s_bStaOuterDoorClosed);
s_fbHmiLedOuterDoorOpened(i_bStaLed := s_bStaOuterDoorOpened);
	
s_fbHmiLedCleanDoorClosed(i_bStaLed := s_bStaCleanroomDoorClosed);
s_fbHmiLedCleanDoorOpened(i_bStaLed := s_bStaCleanroomDoorOpened);
s_fbHmiLedCleanroomDoorLocked(i_bStaLed := s_bStaCleanroomLockApplied);
s_fbHmiLedCleanroomDoorReleased(i_bStaLed := s_bStaCleanroomLockReleased);

_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{55a77c57-0b59-4b6a-972f-95b5a853fa42}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

s_emDoors.i_stSettings := i_stSettings.stSettingsDoors;
s_emDockingInterface.i_stSettings := i_stSettings.stSettingsDockingInterface;
s_emAirTreatment.i_stSettings := i_stSettings.stSettingsAirTrearment;

//Equipment Module
	
//---------------------------------//	

//----------------------------------//

	
//----------------------------------//	
//Hmi
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	s_fbHmiBtnCloseOuterDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnCloseOuterDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnCloseOuterDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnCloseOuterDoor.p_sBtnText := 'Close Outer Door';
	
	s_fbHmiBtnOpenOuterDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnOpenOuterDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnOpenOuterDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnOpenOuterDoor.p_sBtnText := 'Open Outer Door';
	
	s_fbHmiBtnApplyLockCleanroomDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnApplyLockCleanroomDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnApplyLockCleanroomDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnApplyLockCleanroomDoor.p_sBtnText := 'Lock Cleanroom Door';
	
	s_fbHmiBtnReleaseLockCleanroomDoor.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReleaseLockCleanroomDoor.p_bStaVisible := FALSE;
	s_fbHmiBtnReleaseLockCleanroomDoor.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReleaseLockCleanroomDoor.p_sBtnText := 'Release Cleanroom Door';

	s_fbHmiLedOuterDoorClosed.p_bStaVisible := FALSE;
	s_fbHmiLedOuterDoorClosed.p_sToHmiDescriptionLed := 'Outer Door Closed';
	
	s_fbHmiLedOuterDoorOpened.p_bStaVisible := FALSE;
	s_fbHmiLedOuterDoorOpened.p_sToHmiDescriptionLed := 'Outer Door Opened';
	
	s_fbHmiLedCleanDoorClosed.p_bStaVisible := FALSE;
	s_fbHmiLedCleanDoorClosed.p_sToHmiDescriptionLed := 'Cleanroom Door Closed';
	
	s_fbHmiLedCleanDoorOpened.p_bStaVisible := FALSE;
	s_fbHmiLedCleanDoorOpened.p_sToHmiDescriptionLed := 'Cleanroom Door Opened';
	
	s_fbHmiLedCleanroomDoorLocked.p_bStaVisible := FALSE;
	s_fbHmiLedCleanroomDoorLocked.p_sToHmiDescriptionLed := 'Cleanroom Door Locked';
	
	s_fbHmiLedCleanroomDoorReleased.p_bStaVisible := FALSE;
	s_fbHmiLedCleanroomDoorReleased.p_sToHmiDescriptionLed := 'Cleanroom Door Released';
 
//Initialize all moving averages

//----------------------------------//	

//----------------------------------//	
//Inputs
//--s_diTableDownSensor.i_stSettings.tmInputDelay	:= T#0S;	
//--s_diBtnTableDown.i_stSettings.tmInputDelay		:= T#0S;
//--s_diBtnStop.i_stSettings.tmInputDelay			:= T#0S;
//----------------------------------//	

//----------------------------------//	
//Inputs
//--s_doRelayTableDown.i_stSettings.bCfgDelay		:= FALSE;	
//--s_doRelayTableDown.i_stSettings.tmOutputDelay	:= T#0S;	
//----------------------------------//	

_m_Init := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{cc1bc341-dd7b-479d-bdfb-f8e12a5629d4}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF


s_bIlckOuterDoorToOpen := i_bIlckOuterDoorToOpen;
s_bIlckOuterDoorToClose := i_bIlckOuterDoorToClose;
	
s_bIlckCleanroomDoorToRelease := i_bIlckCleanroomDoorToRelease;
s_bIlckCleanroomDoorToLock := i_bIlckCleanroomDoorToLock;

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Modules" Id="{db78043d-7673-487b-a1f0-6fd7aca5bdfb}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Modules : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

{warning 'TODO: Chcek if other interlock'S need TO be added'}

//Interlockes
//EM_Doors
s_emDoors.i_bIlckOuterDoorToClose :=
	NOT(s_emDockingInterface.p_bStaDockingClampsClosed)
	OR NOT(s_bStaBoxRemovedFromDockPosition);
	 
s_emDoors.i_bIlckOuterDoorToOpen :=
	NOT(s_emDockingInterface.p_bStaDockingClampsClosed)
	OR NOT(s_emDoors.p_bStaCleanroomDoorClosed
	OR NOT(s_emDoors.p_bStaCleanroomLockApplied)
	OR NOT (s_emAirTreatment.p_bStaPressurizingOK));

s_emDoors.i_bIlckCleanroomDoorToLock :=
	NOT(s_emDoors.p_bStaCleanroomDoorClosed);

s_emDoors.i_bIlckCleanroomDoorToRelease := 
	NOT(s_emDoors.p_bStaOuterDoorClosed)
	OR NOT (s_emAirTreatment.p_bStaPressurizingOK);
	

//EM_DockingInterface
s_emDockingInterface.i_bIlckDockingClampsToClose := TRUE; //TODO 
s_emDockingInterface.i_bIlckDockingClampsToOpen := TRUE; //TODO
s_emDockingInterface.i_bIlckUnlockingPinsToLock := TRUE; //TODO
s_emDockingInterface.i_bIlckUnlockingPinsToRelease := TRUE; //TODO

//Call of all sub-modules (EM's)
s_emDoors(
	i_bReqEnable := i_bReqEnable, 
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset, 
	i_sEmName := 'EM Doors');
	
s_emDockingInterface(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset,
	i_sEmName := 'EM Docking Interface');
	
s_emAirTreatment(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset,
	i_sEmName := 'EM Air Treatment');	

//Statusses
s_bStaError :=
	s_emDoors.p_bStaError
	OR s_emDockingInterface.p_bStaError
	OR s_emAirTreatment.p_bStaError;
	
_m_Modules := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{93172bcb-0e3c-41d2-bb2a-06f723a6198a}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{8ccf28cb-bddf-43d2-8f41-6ce044de4449}" FolderPath="Base\">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF


// Hier alleen wel het doorschuiven van de carier posities
				IF s_emDockingInterface.p_bStaBoxAtDockedPosition THEN
					i_ref_objCarrier.p_eLocation := E_Location.DOCKING; 
				END_IF

CASE i_eCtrlMode OF

	E_CtrlMode.IDLE:
		;
	
	E_CtrlMode.AUTOMATIC:
	
		IF (s_eSequence <> E_SeqDockingCabin.IDLE)
			AND (s_eSequence <> E_SeqDockingCabin.ERROR)
			AND (s_eSequence <> E_SeqDockingCabin.READY)
			THEN 
				s_ePrevStep := s_eSequence;
		END_IF
		
		s_fbSeqControl(
			i_nSeqStep := s_eSequence, 
			i_sStepName := TO_STRING(s_fbSeqControl.q_eActState), 
			i_bCmdReset := i_bCmdReset, 
			i_bStaError := s_bStaError); //In case of an error Sequence Control will force sequencer to ERROR step
			
		CASE s_eSequence OF 
		
			E_SeqDockingCabin.IDLE:
			
				s_emAirTreatment.m_Pressurize();
			
				IF s_bReqToDock THEN
					s_eSequence := E_SeqDockingCabin.DOCK_CHECK_CLEANROOM_DOORS;
					
				ELSIF s_bReqToUndock THEN
					s_eSequence := E_SeqDockingCabin.UNDOCK_CHECK_CLEANROOM_DOORS;
				END_IF
						
			//DOCK
			E_SeqDockingCabin.DOCK_CHECK_CLEANROOM_DOORS:
			
				IF s_emDoors.p_bStaCleanroomDoorClosed AND s_emDoors.p_bStaCleanroomLockApplied THEN
					s_eSequence := E_SeqDockingCabin.DOCK_CHECK_PRESSURE_DECO;
					
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN
					{warning '#TODO: Generate warning message, and return to IDLE'}
					s_eSequence := E_SeqDockingCabin.IDLE;
				END_IF
			
			E_SeqDockingCabin.DOCK_CHECK_PRESSURE_DECO:
			
				IF s_emAirTreatment.p_bStaPressurizingOK THEN
					s_eSequence := E_SeqDockingCabin.DOCK_OPEN_OUTER_DOOR;
					
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN
					{warning '#TODO: Generate warning message, and return to IDLE'}
					s_eSequence := E_SeqDockingCabin.IDLE;
				END_IF
			
			E_SeqDockingCabin.DOCK_OPEN_OUTER_DOOR:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emDoors.m_OpenOuterDoor();
				END_IF
				
				IF s_emDoors.p_bStaOuterDoorOpened THEN
					s_eSequence := E_SeqDockingCabin.DOCK_OPEN_DOCKING_CLAMPS;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
			
			E_SeqDockingCabin.DOCK_OPEN_DOCKING_CLAMPS:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emDockingInterface.m_OpenDockingClamps();
				END_IF
				
				IF s_emDockingInterface.p_bStaDockingClampsOpened THEN
					s_eSequence := E_SeqDockingCabin.DOCK_WAIT_FOR_BOX_AT_DOCK_POSITION;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
			
			E_SeqDockingCabin.DOCK_WAIT_FOR_BOX_AT_DOCK_POSITION:
			
				IF s_bStaBoxAtDockPosition THEN
					s_eSequence := E_SeqDockingCabin.DOCK_DOCK_BOX;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN
					{warning '#TODO: Generate wwarning to indicate that removing box has taken to lomg'}  
					s_eSequence := E_SeqDockingCabin.DOCK_CLOSE_DOCKING_CLAMPS;
				END_IF
			
			E_SeqDockingCabin.DOCK_CLOSE_DOCKING_CLAMPS:
			
				//Close outer door again after placing box at docking position takes to long
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emDoors.m_CloseOuterDoor();
				END_IF
				
				IF s_emDoors.p_bStaOuterDoorClosed THEN
					s_eSequence := E_SeqDockingCabin.IDLE;
				ELSIF fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
			
			E_SeqDockingCabin.DOCK_DOCK_BOX:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emDockingInterface.m_DockBox();
				END_IF
				
				IF s_emDockingInterface.p_bStaDockingDone THEN
					s_eSequence := E_SeqDockingCabin.DOCK_FLUSHING_DECO;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
			
			E_SeqDockingCabin.DOCK_FLUSHING_DECO:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emAirTreatment.m_Flush();
				END_IF
				
				IF s_emAirTreatment.p_bStaFlushingDone THEN
					s_eSequence := E_SeqDockingCabin.DOCK_WAIT;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
			
			E_SeqDockingCabin.DOCK_WAIT:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emAirTreatment.m_Pressurize();
				END_IF
				
				IF s_bReqToUnlockCleanroomDoor THEN
					s_eSequence := E_SeqDockingCabin.DOCK_EQUALIZE_DECO;
				ELSIF s_bReqToUndock THEN
					s_eSequence := E_SeqDockingCabin.UNDOCK_CHECK_CLEANROOM_DOORS; //Switch to undocking
				END_IF
						
			E_SeqDockingCabin.DOCK_EQUALIZE_DECO:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emAirTreatment.m_Equalize();
				END_IF
				
				IF s_emAirTreatment.p_bStaEqualizingDone THEN
					s_eSequence := E_SeqDockingCabin.DOCK_RELEASE_CLEANROOM_DOOR;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
			
			E_SeqDockingCabin.DOCK_RELEASE_CLEANROOM_DOOR:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emDoors.m_ReleaseLockCleanroomDoor();
				END_IF
				
				IF s_emDoors.p_bStaCleanroomLockReleased AND s_emDoors.p_bStaCleanroomDoorOpened THEN
					s_eSequence := E_SeqDockingCabin.DOCK_CLEANROOM_DOOR_OPENED;
				ELSIF s_bReqToUndock THEN
					s_eSequence := E_SeqDockingCabin.DOCK_LOCK_CLEANROOM_DOOR;	
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
			
			E_SeqDockingCabin.DOCK_CLEANROOM_DOOR_OPENED:
			
				IF s_emDoors.p_bStaCleanroomDoorClosed THEN
					s_eSequence := E_SeqDockingCabin.DOCK_LOCK_CLEANROOM_DOOR;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
			
			E_SeqDockingCabin.DOCK_LOCK_CLEANROOM_DOOR:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emDoors.m_ApplyLockCleanroomDoor();
				END_IF
				
				IF s_emDoors.p_bStaCleanroomLockApplied AND s_emDoors.p_bStaCleanroomDoorClosed THEN
					s_eSequence := E_SeqDockingCabin.DOCK_PRESSURIZE_DECO;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF	
			
			E_SeqDockingCabin.DOCK_PRESSURIZE_DECO:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emAirTreatment.m_Pressurize();
				END_IF
				
				IF s_emAirTreatment.p_bStaPressurizingOK THEN
					s_eSequence := E_SeqDockingCabin.DOCK_WAIT;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
			
			//UNDOCK
			E_SeqDockingCabin.UNDOCK_CHECK_CLEANROOM_DOORS:
				
				IF s_emDoors.p_bStaCleanroomDoorClosed AND s_emDoors.p_bStaCleanroomLockApplied THEN
					s_eSequence := E_SeqDockingCabin.UNDOCK_CHECK_PRESSURE_DECO;
				
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN
					{warning '#TODO: Generate warning message, and return to IDLE'}
					s_eSequence := E_SeqDockingCabin.IDLE; // of better to go to error?
				END_IF
				
			E_SeqDockingCabin.UNDOCK_CHECK_PRESSURE_DECO:
			
				IF s_emAirTreatment.p_bStaPressurizingOK THEN
					s_eSequence := E_SeqDockingCabin.UNDOCK_UNDOCK_BOX;

				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN
					{warning '#TODO: Generate warning message, and return to IDLE'}
					s_eSequence := E_SeqDockingCabin.IDLE; // of better to go to error?
				END_IF
			
			E_SeqDockingCabin.UNDOCK_UNDOCK_BOX:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emDockingInterface.m_UndockBox();
				END_IF
				
				IF s_emDockingInterface.p_bStaUndockingDone THEN
					s_eSequence := E_SeqDockingCabin.UNDOCK_WAIT_FOR_BOX_REMOVED;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
				
			E_SeqDockingCabin.UNDOCK_WAIT_FOR_BOX_REMOVED:
			
				IF s_bStaBoxRemovedFromDockPosition THEN
					s_eSequence := E_SeqDockingCabin.UNDOCK_CLOSE_DOCKING_CLAMPS;
					
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN
					{warning '#TODO: Generate wwarning to indicate that removing box has taken to lomg'}  
					s_eSequence := E_SeqDockingCabin.UNDOCK_DOCK_BOX;
				END_IF
			
			E_SeqDockingCabin.UNDOCK_DOCK_BOX:
			
				//Re-Dock box after removing box from docking position takes to long
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emDockingInterface.m_DockBox();
				END_IF
				
				IF s_emDockingInterface.p_bStaDockingDone THEN
					s_eSequence := E_SeqDockingCabin.IDLE;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF

			E_SeqDockingCabin.UNDOCK_CLOSE_DOCKING_CLAMPS:

				IF s_fbSeqControl.q_bStaEntry THEN
					s_emDockingInterface.m_CloseDockingClamps();
				END_IF
				
				IF s_emDockingInterface.p_bStaDockingClampsClosed THEN
					s_eSequence := E_SeqDockingCabin.UNDOCK_CLOSE_OUTER_DOOR;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF
			
			E_SeqDockingCabin.UNDOCK_CLOSE_OUTER_DOOR:
			
				IF s_fbSeqControl.q_bStaEntry THEN
					s_emDoors.m_CloseOuterDoor();
				END_IF
				
				IF s_emDoors.p_bStaOuterDoorClosed THEN
					s_eSequence := E_SeqDockingCabin.IDLE;
				ELSIF s_fbSeqControl.q_tmStepTime > T#10S THEN  
					s_eSequence := E_SeqDockingCabin.ERROR;
				END_IF

			//ERROR			
			E_SeqDockingCabin.ERROR:
			
				IF i_bCmdReset THEN
					s_ePrevStep := s_eSequence;
				END_IF
			
			//READY
			E_SeqDockingCabin.READY:
				;
				
		ELSE
			{warning '#TODO: Consider to trigger warning, error, move to ERROR step instead of IDLE'}
			s_eSequence := E_SeqDockingCabin.ERROR;
		END_CASE	
	
	E_CtrlMode.MANUAL:
		;
		
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="EM_DockingCabin">
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="458" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingCabin._m_Alarms">
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="32" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="2" />
      <LineId Id="45" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="52" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingCabin._m_Hmi">
      <LineId Id="222" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="199" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="248" Count="6" />
      <LineId Id="262" Count="0" />
      <LineId Id="255" Count="6" />
      <LineId Id="247" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="224" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingCabin._m_Init">
      <LineId Id="203" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="317" Count="1" />
      <LineId Id="320" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="35" Count="3" />
      <LineId Id="239" Count="2" />
      <LineId Id="238" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="243" Count="2" />
      <LineId Id="242" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="247" Count="2" />
      <LineId Id="246" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="251" Count="2" />
      <LineId Id="250" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="255" Count="2" />
      <LineId Id="254" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="273" Count="2" />
      <LineId Id="269" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="278" Count="10" />
      <LineId Id="226" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="118" Count="1" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="2" />
      <LineId Id="174" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingCabin._m_Inputs">
      <LineId Id="46" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="50" Count="1" />
      <LineId Id="53" Count="2" />
      <LineId Id="52" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingCabin._m_Modules">
      <LineId Id="122" Count="0" />
      <LineId Id="96" Count="2" />
      <LineId Id="199" Count="1" />
      <LineId Id="149" Count="1" />
      <LineId Id="152" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="205" Count="3" />
      <LineId Id="204" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="161" Count="2" />
      <LineId Id="159" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="127" Count="4" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="4" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="3" />
      <LineId Id="169" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="167" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingCabin._m_Outputs">
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingCabin.m_Main">
      <LineId Id="330" Count="0" />
      <LineId Id="186" Count="2" />
      <LineId Id="496" Count="0" />
      <LineId Id="876" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="874" Count="1" />
      <LineId Id="873" Count="0" />
      <LineId Id="500" Count="1" />
      <LineId Id="504" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="506" Count="1" />
      <LineId Id="782" Count="4" />
      <LineId Id="781" Count="0" />
      <LineId Id="779" Count="0" />
      <LineId Id="511" Count="4" />
      <LineId Id="586" Count="0" />
      <LineId Id="517" Count="0" />
      <LineId Id="583" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="617" Count="1" />
      <LineId Id="519" Count="0" />
      <LineId Id="576" Count="1" />
      <LineId Id="787" Count="0" />
      <LineId Id="579" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="578" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="548" Count="0" />
      <LineId Id="687" Count="5" />
      <LineId Id="685" Count="1" />
      <LineId Id="527" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="695" Count="5" />
      <LineId Id="693" Count="1" />
      <LineId Id="528" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="703" Count="7" />
      <LineId Id="701" Count="1" />
      <LineId Id="529" Count="0" />
      <LineId Id="551" Count="0" />
      <LineId Id="713" Count="7" />
      <LineId Id="711" Count="1" />
      <LineId Id="530" Count="0" />
      <LineId Id="552" Count="0" />
      <LineId Id="723" Count="4" />
      <LineId Id="721" Count="1" />
      <LineId Id="531" Count="0" />
      <LineId Id="553" Count="0" />
      <LineId Id="730" Count="8" />
      <LineId Id="729" Count="0" />
      <LineId Id="728" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="554" Count="0" />
      <LineId Id="741" Count="7" />
      <LineId Id="740" Count="0" />
      <LineId Id="739" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="759" Count="0" />
      <LineId Id="751" Count="7" />
      <LineId Id="555" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="556" Count="0" />
      <LineId Id="791" Count="2" />
      <LineId Id="790" Count="0" />
      <LineId Id="800" Count="1" />
      <LineId Id="799" Count="0" />
      <LineId Id="802" Count="1" />
      <LineId Id="788" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="804" Count="0" />
      <LineId Id="808" Count="6" />
      <LineId Id="816" Count="0" />
      <LineId Id="806" Count="0" />
      <LineId Id="557" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="819" Count="5" />
      <LineId Id="829" Count="0" />
      <LineId Id="831" Count="0" />
      <LineId Id="825" Count="1" />
      <LineId Id="818" Count="0" />
      <LineId Id="817" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="832" Count="1" />
      <LineId Id="836" Count="1" />
      <LineId Id="827" Count="1" />
      <LineId Id="538" Count="0" />
      <LineId Id="850" Count="0" />
      <LineId Id="840" Count="5" />
      <LineId Id="848" Count="1" />
      <LineId Id="560" Count="0" />
      <LineId Id="838" Count="0" />
      <LineId Id="539" Count="0" />
      <LineId Id="859" Count="0" />
      <LineId Id="851" Count="7" />
      <LineId Id="540" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="541" Count="1" />
      <LineId Id="604" Count="0" />
      <LineId Id="606" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="616" Count="0" />
      <LineId Id="612" Count="0" />
      <LineId Id="615" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="543" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="630" Count="0" />
      <LineId Id="621" Count="0" />
      <LineId Id="764" Count="0" />
      <LineId Id="623" Count="2" />
      <LineId Id="562" Count="0" />
      <LineId Id="619" Count="0" />
      <LineId Id="544" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="629" Count="0" />
      <LineId Id="631" Count="3" />
      <LineId Id="628" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="637" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="545" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="648" Count="1" />
      <LineId Id="767" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="651" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="546" Count="0" />
      <LineId Id="565" Count="0" />
      <LineId Id="664" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="655" Count="6" />
      <LineId Id="652" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="547" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="667" Count="7" />
      <LineId Id="640" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="566" Count="0" />
      <LineId Id="524" Count="0" />
      <LineId Id="677" Count="7" />
      <LineId Id="675" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="571" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="600" Count="3" />
      <LineId Id="598" Count="0" />
      <LineId Id="643" Count="2" />
      <LineId Id="642" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="569" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="510" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="179" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>