<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_DockingInterface" Id="{1a98308c-f0e0-4a53-963d-dfa6a727e4cb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_DockingInterface EXTENDS EM_Base IMPLEMENTS I_EM_DockingInterface
VAR_INPUT
//Inputs
	i_stSettings : ST_SettingsDockingInterface;
	
	i_bIlckDockingClampsToClose : BOOL := TRUE; //TRUE = Interlocked
	i_bIlckDockingClampsToOpen : BOOL := TRUE; //TRUE = Interlocked
	i_bIlckUnlockingPinsToLock : BOOL := TRUE; //TRUE = Interlocked
	i_bIlckUnlockingPinsToRelease : BOOL := TRUE; //TRUE = Interlocked	
END_VAR

VAR_OUTPUT
	q_bStaWarning : BOOL;
END_VAR

VAR
//------------------------------------------//
//Control Modules (Devices)
	s_cmDockingClampsUpper : CM_ValveWithDoubleFB; // Off = Open, On = Close
	s_cmDockingClampsLower : CM_ValveWithDoubleFB; // Off = Open, On = Close
	
	s_cmUnlockingPinUpper : CM_ValveWithFB; // Off = Lock, On = Release
	s_cmUnlockingPinLower : CM_ValveWithFB; // Off = Lock, On = Release
	
	s_cmDoorOpener : CM_ValveWithFB; // Off = Close, On = Open
	s_cmDoorShutter : CM_ValveWithFB; // Off = Close, On = Open
	
//------------------------------------------//

//------------------------------------------//
//Inputs
	s_diStaDoorAlmostClosed : FB_DigInput;
		
//------------------------------------------//
	
//------------------------------------------//
//Outputs
	s_doCmdClampsUpperHighPressure : FB_DigOutput;
	s_doCmdClampsLowerHighPressure : FB_DigOutput;

//------------------------------------------//

//Requests
	s_bReqDockBox : BOOL := FALSE;
	s_bReqUndockBox : BOOL := FALSE;
	s_bReqOpenDockingClamps : BOOL := FALSE;
	s_bReqCloseDockingClamps : BOOL := FALSE;
	s_bReqDockingClampsUpperHighPressure : BOOL := FALSE; // True = high pressure
	s_bReqDockingClampsLowerHighPressure : BOOL := FALSE; // True = high pressure
	
	s_bOverruleInterlocks : BOOL := FALSE;
	
//Properties
	s_bStaDockingDone : BOOL := FALSE;
	s_bStaUndockingDone : BOOL := FALSE;
	s_bStaUndocked : BOOL := FALSE;
	
	s_bStaDockingClampsClosed : BOOL := FALSE;
	s_bStaDockingClampsOpened : BOOL := FALSE;
	s_bStaDockingClampsUpperClosed : BOOL := FALSE;
	s_bStaDockingClampsUpperOpened : BOOL := FALSE;
	s_bStaDockingClampsLowerClosed : BOOL := FALSE;
	s_bStaDockingClampsLowerOpened : BOOL := FALSE;
	
	s_bStaLockingPinUpperReleased : BOOL := FALSE;
	s_bStaLockingPinUpperLocked : BOOL := FALSE;
	s_bStaLockingPinLowerReleased : BOOL := FALSE;
	s_bStaLockingPinLowerLocked : BOOL := FALSE;
		
	s_bStaDoorOpenerOpened : BOOL := FALSE;
	s_bStaDoorOpenerClosed : BOOL := FALSE;
	s_bStaDoorOpenerAlmostClosed : BOOL := FALSE;
	
	s_bStaDoorShutterOpened : BOOL := FALSE;
	s_bStaDoorShutterClosed : BOOL := FALSE;
		
	s_bStaBoxAtPreDockingPosition : BOOL := FALSE;
	s_bStaBoxAtDockedPosition : BOOL := FALSE;
	s_bStaDockingPositionFree : BOOL := FALSE;
	
//Interlockes	
	s_bIlckDockingClampsToClose : BOOL;
	s_bIlckDockingClampsToOpen : BOOL;
	s_bIlckUnlockingPinsToLock : BOOL;
	s_bIlckUnlockingPinsToRelease : BOOL;
	s_bIlckDoorOpenerToClose : BOOL;
	s_bIlckDoorOpenerToOpen : BOOL;
	s_bIlckDoorShutterToClose : BOOL;
	s_bIlckDoorShutterToOpen : BOOL;
	
//Sequencers
	s_eSeqDockingInterface : E_SeqDockingInterface;
	s_fbSeqDockingInterfaceControl : FB_SeqControl;	
	
	s_ePreviousStep : E_SeqDockingInterface;
	s_eResumeStep : E_SeqDockingInterface;
	
	s_tonTimer : TON;
	
//Alarms
	s_fbAlarmHandlerClosingDoorFailed : FB_AlarmHandler;

	s_bErrClosingDoorFailed : BOOL;
	
//Warnings
	s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition : FB_AlarmHandler;
	s_fbAlarmHandlerNoBoxPresentAtDockedPosition : FB_AlarmHandler;

	s_bWrnNoBoxPresentAtPreDockingPosition : BOOL;
	s_bWrnNoBoxPresentAtDockedPosition : BOOL;
	
	s_bStaWarning : BOOL;
	
//------------------------------------------//
//Params
//--	//Tool settings
//--	s_fbParamToolHardwareNr				: FB_HmiParamHandler;
//--    s_fbParamToolSoftwareVersion		: FB_HmiParamHandler;

//--	s_fbParamName						: FB_HmiParamHandler;
//--	s_fbParamNumber						: FB_HmiParamHandler;
//--	s_fbParamRevision                   : FB_HmiParamHandler;
	
//--	s_fbParamTeslaMeterIp				: FB_HmiParamHandler;
//--	s_fbParamTeslaMeterPort				: FB_HmiParamHandler;
	
//--	//Product settings (Maybe)
//--	s_fbParamTotalStroke				: FB_HmiParamHandler;
//--	s_fbParamStepStroke					: FB_HmiParamHandler;
//--	s_fbParamAveragingNumberTest		: FB_HmiParamHandler;
	
//--	s_fbParamaMaxMagnitudeCriteria		: FB_HmiParamHandler;
	
//--	s_fbParamRefIduBottom				: FB_HmiParamHandler;
//--	s_fbParamRefItm                     : FB_HmiParamHandler;
//--	s_fbParamRefCenterTpmPipe           : FB_HmiParamHandler;
//--	s_fbParamRefCpValve					: FB_HmiParamHandler;
//------------------------------------------//

//------------------------------------------//
//Variables
	s_sTestResult 						: STRING;
	
	//--s_eCurrentTest						: E_TestMode;
//--	s_stCommandsTesla					: ST_SCPI_TeslaCommands;
	
	
	// Interlocks
	s_bIlckSpeedDoorOuterToOpen 		: BOOL := TRUE;
	s_bIlckSpeedDoorOuterToClose 		: BOOL := TRUE;
	
	s_bIlckDoorLockCleanroomToOpen 		: BOOL := TRUE;
	
//------------------------------------------//

//------------------------------------------//
//Sensor data	
//--	s_aMagneticX						: ARRAY[0..c_nResultDataSize] OF LREAL;
//--	s_aMagneticY						: ARRAY[0..c_nResultDataSize] OF LREAL;
//--	s_aMagneticZ						: ARRAY[0..c_nResultDataSize] OF LREAL;
//--	s_aMagneticMagnitude				: ARRAY[0..c_nResultDataSize] OF LREAL;
//--	s_aProbePositionZ					: ARRAY[0..c_nResultDataSize] OF LREAL;
	
//--	s_sXMLData							: STRING(Param_Project.n_MaxLenghtXmlDbRow*Param_Project.n_NumberofRowsXmlDb);
	
//--	s_aHmi_MagneticTest					: ARRAY[1..3,0..c_nResultDataSize] OF ST_POINT;
	
//	s_aHmi_ProbePositionZ				: ARRAY[1..1,1..GVL_Datalogging.c_nHmiLogSize] OF ST_POINT;
//------------------------------------------//

//------------------------------------------//
//Alarms

//------------------------------------------//

//------------------------------------------//
//Hmi
	s_nToHmiStepNr					: INT;
	s_nToHmiMaxStepNr				: INT;
	s_sToHmiInstructionText			: T_MAXSTRING;
	s_sToHmiProcedure				: T_MAXSTRING;
	
	//Buttons
	s_fbHmiBtnReset					: FB_HmiBtn;
	
	s_fbHmiBtnManualClampsUpperHighPressure : FB_HmiBtn;
	s_fbHmiBtnManualClampsUpperOpen	: FB_HmiBtn;
	s_fbHmiBtnManualClampsUpperClose: FB_HmiBtn;
	
	s_fbHmiBtnManualClampsLowerHighPressure : FB_HmiBtn;
	s_fbHmiBtnManualClampsLowerOpen	: FB_HmiBtn;
	s_fbHmiBtnManualClampsLowerClose: FB_HmiBtn;
	
	s_fbHmiBtnManualPinUpperLock	: FB_HmiBtn;
	s_fbHmiBtnManualPinUpperRelease: FB_HmiBtn;
	
	s_fbHmiBtnManualPinLowerLock	: FB_HmiBtn;
	s_fbHmiBtnManualPinLowerRelease: FB_HmiBtn;
	
	s_fbHmiBtnManualOpenerOpen		: FB_HmiBtn;
	s_fbHmiBtnManualOpenerClose		: FB_HmiBtn;
	
	s_fbHmiBtnManualShutterOpen		: FB_HmiBtn;
	s_fbHmiBtnManualShutterClose	: FB_HmiBtn;
	
	//Buttons for semi-automai
	s_fbHmiBtnDockTB				: FB_HmiBtn;
	s_fbHmiBtnUndockTB				: FB_HmiBtn;
	s_fbHmiBtnOpenInnerDoor			: FB_HmiBtn;
	s_fbHmiBtnCloseInnerDoor		: FB_HmiBtn;
	
	//--s_fbHmiBtnReleaseInnerDoor		: FB_HmiBtn;
	//--s_fbHmiBtnLockInnerDoor			: FB_HmiBtn;
	
	//old
	//--s_fbHmiBtnDock					: FB_HmiBtn;
	//--s_fbHmiBtnUndock				: FB_HmiBtn;
	
	
	//Leds
	s_fbHmiLedClampsUpperPressureSelect : FB_HmiLed;
	s_fbHmiLedClampsLowerPressureSelect : FB_HmiLed;
	
	s_fbHmiLedClampsOpened			: FB_HmiLed;
	s_fbHmiLedClampsClosed			: FB_HmiLed;
	
	s_fbHmiLedPinsLocked			: FB_HmiLed;
	s_fbHmiLedPinsReleased			: FB_HmiLed;
	
	//==
	s_fbHmiLedClampsUpperOpened		: FB_HmiLed;
	s_fbHmiLedClampsUpperClosed		: FB_HmiLed;
	s_fbHmiLedClampsLowerOpened		: FB_HmiLed;
	s_fbHmiLedClampsLowerClosed		: FB_HmiLed;
	
	s_fbHmiLedPinUpperReleased		: FB_HmiLed;
	s_fbHmiLedPinUpperLocked		: FB_HmiLed;
	s_fbHmiLedPinLowerReleased		: FB_HmiLed;
	s_fbHmiLedPinLowerLocked		: FB_HmiLed;
	
	s_fbHmiLedOpenerOpened			: FB_HmiLed;
	s_fbHmiLedOpenerClosed			: FB_HmiLed;
	s_fbHmiLedOpenerAlmostClosed	: FB_HmiLed;
	
	s_fbHmiLedShutterOpened			: FB_HmiLed;
	s_fbHmiLedShutterClosed			: FB_HmiLed;
	
//------------------------------------------//
	s_bTestBool : BOOL;
	s_nTestCnt : UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Method Name="_m_Alarms" Id="{c0cf83f3-e704-4016-bd6f-2d30156087ff}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

// Set error bits

// Alarm Handlers
s_fbAlarmHandlerClosingDoorFailed(
	i_bStaActive := s_bErrClosingDoorFailed, 
	i_eAlarmLevel := E_AlarmLevel.Alarm, 
	i_sAlarmText := CONCAT(i_sEmName, ': Closing inner door failed'));

s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition(
	i_bStaActive := s_bWrnNoBoxPresentAtPreDockingPosition, 
	i_eAlarmLevel := E_AlarmLevel.Warning, 
	i_sAlarmText := CONCAT(i_sEmName, ':No box present AT per-docking position'));
	
s_fbAlarmHandlerNoBoxPresentAtDockedPosition(
	i_bStaActive := s_bWrnNoBoxPresentAtDockedPosition, 
	i_eAlarmLevel := E_AlarmLevel.Warning, 
	i_sAlarmText := CONCAT(i_sEmName, ':No box present at docked position'));

// Reset warnings
IF i_bCmdReset THEN
	s_bWrnNoBoxPresentAtPreDockingPosition := FALSE;
	s_bWrnNoBoxPresentAtDockedPosition := FALSE;
	s_bErrClosingDoorFailed := FALSE;
END_IF	
	
s_bStaError := 
	s_cmDockingClampsUpper.p_bStaError
	OR s_cmDockingClampsLower.p_bStaError
	OR s_cmUnlockingPinUpper.p_bStaError
	OR s_cmUnlockingPinLower.p_bStaError
	OR s_cmDoorOpener.p_bStaError
	OR s_cmDoorShutter.p_bStaError
	OR s_fbAlarmHandlerClosingDoorFailed.q_bStaActive;

s_bStaWarning := 
	s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition.q_bStaActive
	OR s_fbAlarmHandlerNoBoxPresentAtDockedPosition.q_bStaActive
	OR s_cmDockingClampsUpper.p_bStaWarning
	OR s_cmDockingClampsLower.p_bStaWarning
	OR s_cmUnlockingPinUpper.p_bStaWarning
	OR s_cmUnlockingPinLower.p_bStaWarning
	OR s_cmDoorOpener.p_bStaWarning
	OR s_cmDoorShutter.p_bStaWarning;	
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_AutomaticControl" Id="{ee0253ab-2fda-4db0-933c-ed048e84d0ed}">
      <Declaration><![CDATA[METHOD PRIVATE _m_AutomaticControl : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_fbHmiBtnDockTB.p_bStaVisible := TRUE;
s_fbHmiBtnDockTB.p_bStaEnabled := TRUE;

s_fbHmiBtnUndockTB.p_bStaVisible := TRUE;
s_fbHmiBtnUndockTB.p_bStaEnabled := TRUE;

s_fbHmiBtnOpenInnerDoor.p_bStaVisible := TRUE;
s_fbHmiBtnOpenInnerDoor.p_bStaEnabled := TRUE;

s_fbHmiBtnCloseInnerDoor.p_bStaVisible := TRUE;
s_fbHmiBtnCloseInnerDoor.p_bStaEnabled := TRUE;

//--IF s_eSeqDockingInterface <> s_ePreviousStep THEN
//--	s_ePreviousStep := s_eSeqDockingInterface;
//--END_IF

IF s_eSeqDockingInterface <> s_ePreviousStep 
	AND s_eSeqDockingInterface <> E_SeqDockingInterface.ERROR THEN
	s_ePreviousStep := s_eSeqDockingInterface;
END_IF

s_fbSeqDockingInterfaceControl(
	i_nSeqStep := s_eSeqDockingInterface, 
	i_sStepName := TO_STRING(s_eSeqDockingInterface), 
	i_bCmdReset := i_bCmdReset 
					AND (s_eSeqDockingInterface = E_SeqDockingInterface.ERROR) // Only reset/resume sequencer from ERROR state
					AND i_bReqEnable,   
	i_bStaError := s_bStaError OR NOT(i_bReqEnable));
	
s_tonTimer(PT := T#3600S);
	
CASE s_eSeqDockingInterface OF
	
	E_SeqTransport.IDLE:
		s_eSeqDockingInterface := E_SeqDockingInterface.START;
		s_eResumeStep := E_SeqDockingInterface.OPEN_DOCKING_CLAMPS;
		
	E_SeqDockingInterface.START:
		s_tonTimer.IN := FALSE;
		
		IF _m_SeqStartup() AND s_fbSeqDockingInterfaceControl.q_tmStepTime > T#1S THEN
			s_eSeqDockingInterface := s_eResumeStep;
		END_IF
		
	E_SeqDockingInterface.OPEN_DOCKING_CLAMPS:
		IF s_fbSeqDockingInterfaceControl.q_bStaEntry THEN	
			s_doCmdClampsUpperHighPressure.i_bStaOutput := FALSE;
			s_doCmdClampsLowerHighPressure.i_bStaOutput := FALSE;
		END_IF
			
		IF s_cmDockingClampsUpper.m_Off() AND s_cmDockingClampsLower.m_Off() THEN
			s_eSeqDockingInterface := E_SeqDockingInterface.READY;
		END_IF
		
	E_SeqDockingInterface.READY:
		IF s_fbHmiBtnDockTB.p_osrBtnPress THEN
			s_eSeqDockingInterface := E_SeqDockingInterface.CLOSE_DOCKING_CLAMPS;
		END_IF
		
	E_SeqDockingInterface.CLOSE_DOCKING_CLAMPS:
		IF s_fbSeqDockingInterfaceControl.q_bStaEntry THEN	
			s_doCmdClampsUpperHighPressure.i_bStaOutput := FALSE;
			s_doCmdClampsLowerHighPressure.i_bStaOutput := FALSE;
		END_IF
	
		IF s_cmDockingClampsUpper.m_On() AND s_cmDockingClampsLower.m_On() THEN
			s_eSeqDockingInterface := E_SeqDockingInterface.COMPRESS_SEAL;
		//ELSE
		//  In case of error all docking clamps will be openeed (this is implemented in error-step)		
		END_IF
	
	E_SeqDockingInterface.COMPRESS_SEAL:
		IF s_fbSeqDockingInterfaceControl.q_bStaEntry THEN	
			s_doCmdClampsUpperHighPressure.i_bStaOutput := TRUE;
			s_doCmdClampsLowerHighPressure.i_bStaOutput := TRUE;
		END_IF
		
		IF s_fbSeqDockingInterfaceControl.q_tmStepTime >= i_stSettings.tCompressSealDuration THEN	
			s_eSeqDockingInterface := E_SeqDockingInterface.TB_DOCKED;
		END_IF
		
	E_SeqDockingInterface.TB_DOCKED:
		IF s_fbHmiBtnOpenInnerDoor.p_osrBtnPress THEN
			IF s_bStaDoorOpenerClosed AND s_bStaDoorShutterClosed THEN
				s_eSeqDockingInterface := E_SeqDockingInterface.RELEASE_UNLOCKING_PINS;
			ELSE
				s_eSeqDockingInterface := E_SeqDockingInterface.CLOSE_DOOR_OPENER_RELEASING_PINS;
			END_IF
		END_IF
		
		IF s_fbHmiBtnUndockTB.p_osrBtnPress THEN
			s_eSeqDockingInterface := E_SeqDockingInterface.OPEN_DOCKING_CLAMPS;
		END_IF
		
	E_SeqDockingInterface.CLOSE_DOOR_OPENER_RELEASING_PINS:
		s_tonTimer.IN := s_cmDoorOpener.m_Off();
	
		IF s_tonTimer.ET > i_stSettings.tDelayCloseDoorShutterReleasingPins 
			AND s_bStaDoorOpenerAlmostClosed THEN
			s_tonTimer.IN := FALSE;
			s_eSeqDockingInterface := E_SeqDockingInterface.CLOSE_DOOR_SHUTTER_RELEASING_PINS;
		ELSIF s_fbSeqDockingInterfaceControl.q_tmStepTime >= T#10S THEN
			s_bErrClosingDoorFailed := TRUE;
			s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
		END_IF
		
	E_SeqDockingInterface.CLOSE_DOOR_SHUTTER_RELEASING_PINS:
		s_tonTimer.IN := s_cmDoorShutter.m_Off();
	
		IF s_tonTimer.ET > i_stSettings.tDelayReleaseUnlockingPins THEN
			s_tonTimer.IN := FALSE;
			s_eSeqDockingInterface := E_SeqDockingInterface.RELEASE_UNLOCKING_PINS;
		END_IF	
		
	E_SeqDockingInterface.RELEASE_UNLOCKING_PINS:
		s_tonTimer.IN := (s_cmUnlockingPinUpper.m_On() AND s_cmUnlockingPinLower.m_On());
	
		IF s_tonTimer.ET > i_stSettings.tDelayOpenDoorShutter THEN
			s_tonTimer.IN := FALSE;
			s_eSeqDockingInterface := E_SeqDockingInterface.OPEN_DOOR_SHUTTER;
		END_IF
		
	E_SeqDockingInterface.OPEN_DOOR_SHUTTER:
		s_tonTimer.IN := s_cmDoorShutter.m_On();
		
		IF s_tonTimer.ET > i_stSettings.tDelayOpenDoorOpener THEN
			s_tonTimer.IN := FALSE;
			s_eSeqDockingInterface := E_SeqDockingInterface.OPEN_DOOR_OPENER;
		END_IF
	
	E_SeqDockingInterface.OPEN_DOOR_OPENER:
		IF s_cmDoorOpener.m_On() THEN
			s_eSeqDockingInterface := E_SeqDockingInterface.INNER_DOOR_OPENED;
		END_IF
	
	E_SeqDockingInterface.INNER_DOOR_OPENED:
		IF s_fbHmiBtnCloseInnerDoor.p_osrBtnPress THEN
			s_eSeqDockingInterface := E_SeqDockingInterface.CLOSE_DOOR_OPENER;	
		END_IF
	
	E_SeqDockingInterface.CLOSE_DOOR_OPENER:
		s_tonTimer.IN := s_cmDoorOpener.m_Off();
		
		IF s_tonTimer.ET > i_stSettings.tDelayCloseDoorShutter
			AND s_bStaDoorOpenerAlmostClosed
			THEN
			s_tonTimer.IN := FALSE;
			s_eSeqDockingInterface := E_SeqDockingInterface.CLOSE_DOOR_SHUTTER;
		ELSIF s_fbSeqDockingInterfaceControl.q_tmStepTime >= T#15S THEN
			s_bErrClosingDoorFailed := TRUE;
			s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
		END_IF
		
	E_SeqDockingInterface.CLOSE_DOOR_SHUTTER:
		s_tonTimer.IN := s_cmDoorShutter.m_Off();
		
		IF s_tonTimer.ET > i_stSettings.tDelayLockUnlockingPins THEN
			s_tonTimer.IN := FALSE;
			s_eSeqDockingInterface := E_SeqDockingInterface.LOCK_UNLOCKING_PINS;
		END_IF
	
	E_SeqDockingInterface.LOCK_UNLOCKING_PINS:
		IF (s_cmUnlockingPinUpper.m_Off() AND s_cmUnlockingPinLower.m_Off()) THEN
			s_eSeqDockingInterface := E_SeqDockingInterface.TB_DOCKED;
		END_IF
		
	E_SeqDockingInterface.ERROR:
		IF s_fbSeqDockingInterfaceControl.q_bStaEntry THEN
			IF s_ePreviousStep > E_SeqDockingInterface.START
				AND s_ePreviousStep < E_SeqDockingInterface.ERROR THEN
				s_eResumeStep := s_ePreviousStep;
			ELSE 
				s_eResumeStep := E_SeqDockingInterface.OPEN_DOCKING_CLAMPS;
			END_IF
			
			//Stop controlling all valves
			IF i_stSettings.bOpenClampsAfterClosingTimeout AND_THEN
				s_ePreviousStep = E_SeqDockingInterface.CLOSE_DOCKING_CLAMPS
				AND (s_cmDockingClampsUpper.p_bStaError OR s_cmDockingClampsLower.p_bStaError) 
				THEN
				//Open all docking clamps if closing on low pressure has failed
				s_doCmdClampsUpperHighPressure.i_bStaOutput := FALSE;
				s_doCmdClampsLowerHighPressure.i_bStaOutput := FALSE;
				s_cmDockingClampsUpper.m_Off();
				s_cmDockingClampsLower.m_Off();
			ELSE
				s_cmDockingClampsUpper.m_Stop();
				s_cmDockingClampsLower.m_Stop();
			END_IF
			
			s_cmUnlockingPinUpper.m_Stop();
			s_cmUnlockingPinLower.m_Stop();
			s_cmDoorOpener.m_Stop();
			s_cmDoorShutter.m_Stop(); 
		END_IF

END_CASE	

//--IF s_eSeqDockingInterface <> s_ePreviousStep 
//--	AND s_eSeqDockingInterface <> E_SeqDockingInterface.ERROR THEN
//--	s_ePreviousStep := s_eSeqDockingInterface;
//--END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{b43c077f-3abc-4642-868d-7667cd19393f}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

//--s_diStaBoxAtPreDockingPosition();
//--s_diStaBoxAtDockedPosition();

//--s_cmDockingClamps(
//--	i_bReqEnable := i_bReqEnable,
//--	i_eCtrlMode := i_eCtrlMode,
//--	i_bCmdReset := i_bCmdReset);
//--	//--i_sCmName := 'Docking Clamps');
	
s_cmDockingClampsUpper(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckDockingClampsToClose AND NOT(s_bOverruleInterlocks), 
	i_bIclkOff := s_bIlckDockingClampsToOpen AND NOT(s_bOverruleInterlocks));
	
s_cmDockingClampsLower(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckDockingClampsToClose AND NOT(s_bOverruleInterlocks), 
	i_bIclkOff := s_bIlckDockingClampsToOpen AND NOT(s_bOverruleInterlocks));	
	
//--s_bStaDockingClampsClosed := s_cmDockingClamps.p_bStaIsClosed;
//--s_bStaDockingClampsOpened := s_cmDockingClamps.p_bStaIsOpened;

s_bStaDockingClampsUpperClosed := s_cmDockingClampsUpper.p_bStaIsOn;
s_bStaDockingClampsUpperOpened := s_cmDockingClampsUpper.p_bStaIsOff;
s_bStaDockingClampsLowerClosed := s_cmDockingClampsLower.p_bStaIsOn;
s_bStaDockingClampsLowerOpened := s_cmDockingClampsLower.p_bStaIsOff;

//--s_cmUnlockingPins(
//--	i_bReqEnable := i_bReqEnable,
//--	i_eCtrlMode := i_eCtrlMode,
//--	i_bCmdReset := i_bCmdReset);
//--	//--i_sCmName := 'Unlocking Pins');
	
s_cmUnlockingPinUpper(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckUnlockingPinsToRelease AND NOT(s_bOverruleInterlocks), 
	i_bIclkOff := s_bIlckUnlockingPinsToRelease AND NOT(s_bOverruleInterlocks));
	
s_cmUnlockingPinLower(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckUnlockingPinsToRelease AND NOT(s_bOverruleInterlocks), 
	i_bIclkOff := s_bIlckUnlockingPinsToRelease AND NOT(s_bOverruleInterlocks));
	
s_bStaLockingPinUpperReleased := s_cmUnlockingPinUpper.p_bStaIsOn;
s_bStaLockingPinUpperLocked := s_cmUnlockingPinUpper.p_bStaIsOff;
s_bStaLockingPinLowerReleased := s_cmUnlockingPinLower.p_bStaIsOn;
s_bStaLockingPinLowerLocked := s_cmUnlockingPinLower.p_bStaIsOff;	
	
s_cmDoorOpener(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckDoorOpenerToOpen AND NOT(s_bOverruleInterlocks), 
	i_bIclkOff := s_bIlckDoorOpenerToClose AND NOT(s_bOverruleInterlocks));

s_bStaDoorOpenerOpened := s_cmDoorOpener.p_bStaIsOn;
s_bStaDoorOpenerClosed := s_cmDoorOpener.p_bStaIsOff;

s_cmDoorShutter(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset,
	i_bIclkOn := s_bIlckDoorShutterToOpen AND NOT(s_bOverruleInterlocks), 
	i_bIclkOff := s_bIlckDoorShutterToClose AND NOT(s_bOverruleInterlocks));
	
s_bStaDoorShutterOpened := s_cmDoorShutter.p_bStaIsOn;
s_bStaDoorShutterClosed := s_cmDoorShutter.p_bStaIsOff;

_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{5090ba0a-8e2b-4ba6-88b3-b451c7c7863d}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
//--s_fbHmiBtnDock();
//--s_fbHmiBtnUndock();
s_fbHmiBtnReset();

s_fbHmiBtnDockTB();
s_fbHmiBtnUndockTB();
	
s_fbHmiBtnOpenInnerDoor();
s_fbHmiBtnCloseInnerDoor();

//Manual control	
s_fbHmiBtnManualClampsUpperHighPressure();
s_fbHmiBtnManualClampsUpperOpen();
s_fbHmiBtnManualClampsUpperClose();

s_fbHmiBtnManualClampsLowerHighPressure();
s_fbHmiBtnManualClampsLowerOpen();
s_fbHmiBtnManualClampsLowerClose();
	
s_fbHmiBtnManualPinUpperLock();
s_fbHmiBtnManualPinUpperRelease();
	
s_fbHmiBtnManualPinLowerLock();
s_fbHmiBtnManualPinLowerRelease();
	
s_fbHmiBtnManualOpenerOpen();
s_fbHmiBtnManualOpenerClose();
	
s_fbHmiBtnManualShutterOpen();
s_fbHmiBtnManualShutterClose();

//Leds
s_fbHmiLedClampsUpperOpened(i_bStaLed := s_bStaDockingClampsUpperOpened);
s_fbHmiLedClampsUpperClosed(i_bStaLed := s_bStaDockingClampsUpperClosed);

s_fbHmiLedClampsLowerOpened(i_bStaLed := s_bStaDockingClampsLowerOpened);
s_fbHmiLedClampsLowerClosed(i_bStaLed := s_bStaDockingClampsLowerClosed);

s_fbHmiLedPinUpperReleased(i_bStaLed := s_bStaLockingPinUpperReleased);
s_fbHmiLedPinUpperLocked(i_bStaLed := s_bStaLockingPinUpperLocked);

s_fbHmiLedPinLowerReleased(i_bStaLed := s_bStaLockingPinLowerReleased);
s_fbHmiLedPinLowerLocked(i_bStaLed := s_bStaLockingPinLowerLocked);
	
s_fbHmiLedOpenerOpened(i_bStaLed := s_bStaDoorOpenerOpened);
s_fbHmiLedOpenerClosed(i_bStaLed := s_bStaDoorOpenerClosed);
s_fbHmiLedOpenerAlmostClosed(i_bStaLed := s_bStaDoorOpenerAlmostClosed);
	
s_fbHmiLedShutterOpened(i_bStaLed := s_bStaDoorShutterOpened);
s_fbHmiLedShutterClosed(i_bStaLed := s_bStaDoorShutterClosed);

_m_Hmi := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{f248bb7d-4543-4fa5-93e5-377095a1130a}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Control Modules
//--s_cmDockingClamps.i_bReqEnable := FALSE;
//--s_cmDockingClamps.i_eCtrlMode := E_CtrlMode.IDLE;
//--s_cmDockingClamps.i_sCmName := 'Docking Clamps';
//--s_cmDockingClamps.i_stSettings.tClampsOpenTimeout := T#10S;
//--s_cmDockingClamps.i_stSettings.tClampsCloseTimeout := T#10S;
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}

s_cmDockingClampsUpper.i_bReqEnable := FALSE;
s_cmDockingClampsUpper.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmDockingClampsUpper.i_sCmName := 'Docking Clamps Upper';
s_cmDockingClampsUpper.i_stSettings.tValveOnTimeout := T#10S;
s_cmDockingClampsUpper.i_stSettings.tValveOnTimeout := T#10S;
s_cmDockingClampsUpper.p_sCfgOffName := 'Open';
s_cmDockingClampsUpper.p_sCfgOnName := 'Close';
s_cmDockingClampsUpper.p_sCfgFB1Name := 'Left';
s_cmDockingClampsUpper.p_sCfgFB2Name := 'Right';

s_doCmdClampsUpperHighPressure.i_stSettings.bCfgDelay := FALSE;
s_doCmdClampsUpperHighPressure.i_stSettings.tmOutputDelay := T#0S;

s_cmDockingClampsLower.i_bReqEnable := FALSE;
s_cmDockingClampsLower.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmDockingClampsLower.i_sCmName := 'Docking Clamps Lower';
s_cmDockingClampsLower.i_stSettings.tValveOnTimeout := T#10S;
s_cmDockingClampsLower.i_stSettings.tValveOnTimeout := T#10S;
s_cmDockingClampsLower.p_sCfgOffName := 'Open';
s_cmDockingClampsLower.p_sCfgOnName := 'Close';
s_cmDockingClampsLower.p_sCfgFB1Name := 'Left';
s_cmDockingClampsLower.p_sCfgFB2Name := 'Right';

s_doCmdClampsLowerHighPressure.i_stSettings.bCfgDelay := FALSE;
s_doCmdClampsLowerHighPressure.i_stSettings.tmOutputDelay := T#0S;
	
//--s_cmUnlockingPins.i_bReqEnable := FALSE;
//--s_cmUnlockingPins.i_eCtrlMode := E_CtrlMode.IDLE;
//--s_cmUnlockingPins.i_sCmName := 'Unlocking Pins';
//--s_cmUnlockingPins.i_stSettings.tPinsLockTimeout := T#10S;
//--s_cmUnlockingPins.i_stSettings.tPinsUnlockTimeout := T#10S;
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}

s_cmUnlockingPinUpper.i_bReqEnable := FALSE;
s_cmUnlockingPinUpper.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmUnlockingPinUpper.i_sCmName := 'Unlocking Pin Upper';
s_cmUnlockingPinUpper.i_stSettings.tValveOnTimeout := T#10S;
s_cmUnlockingPinUpper.i_stSettings.tValveOffTimeout := T#10S;
s_cmUnlockingPinUpper.p_sCfgOffName := 'Lock';
s_cmUnlockingPinUpper.p_sCfgOnName := 'Release';

s_cmUnlockingPinLower.i_bReqEnable := FALSE;
s_cmUnlockingPinLower.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmUnlockingPinLower.i_sCmName := 'Unlocking Pin Lower';
s_cmUnlockingPinLower.i_stSettings.tValveOnTimeout := T#10S;
s_cmUnlockingPinLower.i_stSettings.tValveOffTimeout := T#10S;
s_cmUnlockingPinLower.p_sCfgOffName := 'Lock';
s_cmUnlockingPinLower.p_sCfgOnName := 'Release';

s_cmDoorOpener.i_bReqEnable := FALSE;
s_cmDoorOpener.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmDoorOpener.i_sCmName := 'Door Opener';
s_cmDoorOpener.i_stSettings.tValveOnTimeout := T#10S;
s_cmDoorOpener.i_stSettings.tValveOffTimeout := T#10S;
s_cmDoorOpener.p_sCfgOffName := 'Close';
s_cmDoorOpener.p_sCfgOnName := 'Open';

s_diStaDoorAlmostClosed.i_stSettings.tmInputDelay := T#0S;

s_cmDoorShutter.i_bReqEnable := FALSE;
s_cmDoorShutter.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmDoorShutter.i_sCmName := 'Door Shutter';
s_cmDoorShutter.i_stSettings.tValveOnTimeout := T#10S;
s_cmDoorShutter.i_stSettings.tValveOffTimeout := T#10S;
s_cmDoorShutter.p_sCfgOffName := 'Open';
s_cmDoorShutter.p_sCfgOnName := 'Close';
	
//---------------------------------//	
	
//----------------------------------//	
//Hmi 
	//--s_fbHmiBtnDock.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	//--s_fbHmiBtnDock.p_bStaVisible := FALSE;
	//--s_fbHmiBtnDock.p_bStaEnabled := FALSE;		
	//--s_fbHmiBtnDock.p_sBtnText := 'Start Docking';
	
	//--s_fbHmiBtnUndock.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	//--s_fbHmiBtnUndock.p_bStaVisible := FALSE;
	//--s_fbHmiBtnUndock.p_bStaEnabled := FALSE;		
	//--s_fbHmiBtnUndock.p_sBtnText := 'Start Un-Docking';
	
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	//Manual
	s_fbHmiBtnManualClampsUpperHighPressure.p_eButtontype := E_HmiButtonType.TOGGLEBUTTON;
	s_fbHmiBtnManualClampsUpperHighPressure.p_bStaVisible := FALSE;
	s_fbHmiBtnManualClampsUpperHighPressure.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualClampsUpperHighPressure.p_sBtnText := 'Pressure Select Upper Clamps';
	
	s_fbHmiBtnManualClampsUpperOpen.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualClampsUpperOpen.p_bStaVisible := FALSE;
	s_fbHmiBtnManualClampsUpperOpen.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualClampsUpperOpen.p_sBtnText := 'Open Upper Clamps';
	
	s_fbHmiBtnManualClampsUpperClose.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualClampsUpperClose.p_bStaVisible := FALSE;
	s_fbHmiBtnManualClampsUpperClose.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualClampsUpperClose.p_sBtnText := 'Close Upper Clamps';
	
	s_fbHmiBtnManualClampsLowerHighPressure.p_eButtontype := E_HmiButtonType.TOGGLEBUTTON;
	s_fbHmiBtnManualClampsLowerHighPressure.p_bStaVisible := FALSE;
	s_fbHmiBtnManualClampsLowerHighPressure.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualClampsLowerHighPressure.p_sBtnText := 'Pressure Select Lower Clamps';
	
	s_fbHmiBtnManualClampsLowerOpen.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualClampsLowerOpen.p_bStaVisible := FALSE;
	s_fbHmiBtnManualClampsLowerOpen.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualClampsLowerOpen.p_sBtnText := 'Open Lower Clamps';
	
	s_fbHmiBtnManualClampsLowerClose.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualClampsLowerClose.p_bStaVisible := FALSE;
	s_fbHmiBtnManualClampsLowerClose.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualClampsLowerClose.p_sBtnText := 'Close Lower Clamps';
	
	s_fbHmiBtnManualPinUpperLock.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualPinUpperLock.p_bStaVisible := FALSE;
	s_fbHmiBtnManualPinUpperLock.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualPinUpperLock.p_sBtnText := 'Lock Upper Pins';
	
	s_fbHmiBtnManualPinUpperRelease.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualPinUpperRelease.p_bStaVisible := FALSE;
	s_fbHmiBtnManualPinUpperRelease.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualPinUpperRelease.p_sBtnText := 'Release Upper Pins';
	
	s_fbHmiBtnManualPinLowerLock.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualPinLowerLock.p_bStaVisible := FALSE;
	s_fbHmiBtnManualPinLowerLock.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualPinLowerLock.p_sBtnText := 'Lock Lower Pins';
	
	s_fbHmiBtnManualPinLowerRelease.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualPinLowerRelease.p_bStaVisible := FALSE;
	s_fbHmiBtnManualPinLowerRelease.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualPinLowerRelease.p_sBtnText := 'Release Lower Pins';
	
	s_fbHmiBtnManualOpenerOpen.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualOpenerOpen.p_bStaVisible := FALSE;
	s_fbHmiBtnManualOpenerOpen.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualOpenerOpen.p_sBtnText := 'Opener Open';
	
	s_fbHmiBtnManualOpenerClose.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualOpenerClose.p_bStaVisible := FALSE;
	s_fbHmiBtnManualOpenerClose.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualOpenerClose.p_sBtnText := 'Opener Close';
	
	s_fbHmiBtnManualShutterOpen.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualShutterOpen.p_bStaVisible := FALSE;
	s_fbHmiBtnManualShutterOpen.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualShutterOpen.p_sBtnText := 'Shutter Open';
	
	s_fbHmiBtnManualShutterClose.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualShutterClose.p_bStaVisible := FALSE;
	s_fbHmiBtnManualShutterClose.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualShutterClose.p_sBtnText := 'Shutter Close';
	
	//Leds
	s_fbHmiLedClampsUpperPressureSelect.p_bStaVisible := FALSE;
	s_fbHmiLedClampsUpperPressureSelect.p_sToHmiDescriptionLed := 'Pressure Select Upper Clamps';
	
	s_fbHmiLedClampsLowerPressureSelect.p_bStaVisible := FALSE;
	s_fbHmiLedClampsLowerPressureSelect.p_sToHmiDescriptionLed := 'Pressure Select Lower Clamps';
	
	s_fbHmiLedClampsOpened.p_bStaVisible := FALSE;
	s_fbHmiLedClampsOpened.p_sToHmiDescriptionLed := 'Clamps Opened';
		
	s_fbHmiLedClampsClosed.p_bStaVisible := FALSE;
	s_fbHmiLedClampsClosed.p_sToHmiDescriptionLed := 'Clamps Closed';

	//==
	s_fbHmiLedClampsUpperOpened.p_bStaVisible := FALSE;
	s_fbHmiLedClampsUpperOpened.p_sToHmiDescriptionLed := 'Clamps Upper Left Opened';
	
	s_fbHmiLedClampsUpperClosed.p_bStaVisible := FALSE;
	s_fbHmiLedClampsUpperClosed.p_sToHmiDescriptionLed := 'Clamps Upper Left Closed';

	s_fbHmiLedClampsLowerOpened.p_bStaVisible := FALSE;
	s_fbHmiLedClampsLowerOpened.p_sToHmiDescriptionLed := 'Clamps Lower Left Opened';
	
	s_fbHmiLedClampsLowerClosed.p_bStaVisible := FALSE;
	s_fbHmiLedClampsLowerClosed.p_sToHmiDescriptionLed := 'Clamps Lower Left Closed';
	
	
	s_fbHmiLedPinsLocked.p_bStaVisible := FALSE;
	s_fbHmiLedPinsLocked.p_sToHmiDescriptionLed := 'Pins Locked';
	
	s_fbHmiLedPinsReleased.p_bStaVisible := FALSE;
	s_fbHmiLedPinsReleased.p_sToHmiDescriptionLed := 'Pins Unlocked';
	
	//==	
	s_fbHmiLedPinUpperReleased.p_bStaVisible := FALSE;
	s_fbHmiLedPinUpperReleased.p_sToHmiDescriptionLed := 'Unlocking Pin Upper Released';
	s_fbHmiLedPinUpperLocked.p_bStaVisible := FALSE;
	s_fbHmiLedPinUpperLocked.p_sToHmiDescriptionLed := 'Unlocking Pin Upper Locked';
	
	s_fbHmiLedPinLowerReleased.p_bStaVisible := FALSE;
	s_fbHmiLedPinLowerReleased.p_sToHmiDescriptionLed := 'Unlocking Pin Lower Released';
	s_fbHmiLedPinLowerLocked.p_bStaVisible := FALSE;
	s_fbHmiLedPinLowerLocked.p_sToHmiDescriptionLed := 'Unlocking Pin Lower Locked';
	
	s_fbHmiLedOpenerOpened.p_bStaVisible := FALSE;
	s_fbHmiLedOpenerOpened.p_sToHmiDescriptionLed := 'Door Opener Opened';
	s_fbHmiLedOpenerClosed.p_bStaVisible := FALSE;
	s_fbHmiLedOpenerClosed.p_sToHmiDescriptionLed := 'Door Opener Closed';
	s_fbHmiLedOpenerAlmostClosed.p_bStaVisible := FALSE;
	s_fbHmiLedOpenerAlmostClosed.p_sToHmiDescriptionLed := 'Door Opener Almost Closed';
	
	s_fbHmiLedShutterOpened.p_bStaVisible := FALSE;
	s_fbHmiLedShutterOpened.p_sToHmiDescriptionLed := 'Door Shutter Opened';
	s_fbHmiLedShutterClosed.p_bStaVisible := FALSE;
	s_fbHmiLedShutterClosed.p_sToHmiDescriptionLed := 'Door Shutter Closed';
	
//----------------------------------//	
//Initialize all moving averages

//----------------------------------//	

//----------------------------------//	

//Inputs
//--s_diStaBoxAtPreDockingPosition.i_stSettings.tmInputDelay := T#3S;
//--s_diStaBoxAtDockedPosition.i_stSettings.tmInputDelay := T#3S;
//----------------------------------//	

//----------------------------------//	
//Outputs
//--s_doRelayTableDown.i_stSettings.bCfgDelay		:= FALSE;	
//--s_doRelayTableDown.i_stSettings.tmOutputDelay	:= T#0S;	
//----------------------------------//	

_m_Init := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{15e5d91e-088b-4383-82aa-ad9257b81a9b}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

//Interlocks
//++s_bIlckDockingClampsToClose := i_bIlckDockingClampsToClose;
//++s_bIlckDockingClampsToOpen := i_bIlckDockingClampsToOpen;
//++s_bIlckUnlockingPinsToLock := i_bIlckUnlockingPinsToLock;
//++s_bIlckUnlockingPinsToRelease := i_bIlckUnlockingPinsToRelease;

s_bIlckDockingClampsToClose := FALSE;
s_bIlckDockingClampsToOpen := FALSE;
s_bIlckUnlockingPinsToLock := FALSE;
s_bIlckUnlockingPinsToRelease := FALSE;
s_bIlckDoorOpenerToClose := NOT(s_bStaDoorShutterOpened);
s_bIlckDoorOpenerToOpen := NOT(s_bStaDoorShutterOpened);
s_bIlckDoorShutterToClose := NOT(s_bStaDoorOpenerClosed) AND NOT(s_bStaDoorOpenerAlmostClosed);
s_bIlckDoorShutterToOpen := FALSE;

s_cmDockingClampsUpper.p_sInterlockedReason := 'n/a';
s_cmDockingClampsLower.p_sInterlockedReason := 'n/a';
s_cmUnlockingPinUpper.p_sInterlockedReason := 'n/a';
s_cmUnlockingPinLower.p_sInterlockedReason := 'n/a';
s_cmDoorOpener.p_sInterlockedReason := 'Door shutter not opened';
s_cmDoorShutter.p_sInterlockedReason := 'Door opener not closed';




//--s_diStaBoxAtPreDockingPosition();
//--s_diStaBoxAtDockedPosition();

//--s_bStaBoxAtPreDockingPosition := s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed AND NOT(s_diStaBoxAtDockedPosition.p_bStaInputDelayed);
//--s_bStaBoxAtDockedPosition := s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed AND s_diStaBoxAtDockedPosition.p_bStaInputDelayed;
//--s_bStaDockingPositionFree := NOT(s_bStaBoxAtPreDockingPosition) AND NOT(s_bStaBoxAtDockedPosition);

s_diStaDoorAlmostClosed();

s_bStaDoorOpenerAlmostClosed := s_diStaDoorAlmostClosed.p_bStaInputDelayed;

_m_Inputs := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_ManualControl" Id="{cf85508a-2caa-42ea-a56c-5902a15aaf22}">
      <Declaration><![CDATA[METHOD PRIVATE _m_ManualControl : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Manual control has been implemented into lower layer control modules
IF s_fbHmiBtnManualClampsUpperHighPressure.p_osrBtnPress THEN
	s_doCmdClampsUpperHighPressure.i_bStaOutput := TRUE;
ELSIF s_fbHmiBtnManualClampsUpperHighPressure.p_osfBtnPress THEN
	s_doCmdClampsUpperHighPressure.i_bStaOutput := FALSE;
END_IF

IF s_fbHmiBtnManualClampsLowerHighPressure.p_osrBtnPress THEN
	s_doCmdClampsLowerHighPressure.i_bStaOutput := TRUE;
ELSIF s_fbHmiBtnManualClampsLowerHighPressure.p_osfBtnPress THEN
	s_doCmdClampsLowerHighPressure.i_bStaOutput := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{748b7abf-6524-428b-ad1f-dd34bf2d901c}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

s_doCmdClampsUpperHighPressure();
s_doCmdClampsLowerHighPressure();

s_bStaUndocked := s_cmDockingClampsUpper.p_bStaIsOff AND s_cmDockingClampsLower.p_bStaIsOff;

q_bStaWarning := s_bStaWarning;

_m_Outputs := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Params" Id="{78648659-4a86-4875-84af-aa8b2b68e067}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Params : BOOL
VAR_INST
	s_fToHmiXAxisMin	: LREAL;
	s_fToHmiXAxisMax	: LREAL;
	s_fToHmiYAxisMin	: LREAL;
	s_fToHmiYAxisMax	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Params() THEN
	RETURN;
END_IF

s_fbParamToolHardwareNr(i_fDefaultValue				:= 0,
						i_nArrayFolderIndex			:= 1,
						i_sName						:= 'Harware ID',
						i_bIsNumber					:= FALSE);

s_fbParamToolSoftwareVersion(i_fDefaultValue		:= 0,
							i_nArrayFolderIndex		:= 1,
							i_sName					:= 'Software Version',
							i_bIsNumber				:= FALSE);

s_fbParamName(i_fDefaultValue						:= 0,
				i_nArrayFolderIndex					:= 1,
				i_sName								:= 'Description',
				i_bIsNumber							:= FALSE);
							
s_fbParamTeslaMeterIp(i_fDefaultValue			:= 0,
						i_nArrayFolderIndex		:= 1,
						i_sName					:= 'Tesla meter ip adress',
						i_bIsNumber				:= FALSE);
						
s_fbParamTeslaMeterPort(i_fDefaultValue			:= 0,
						i_nArrayFolderIndex		:= 1,
						i_sName					:= 'Tesla meter port number',
						i_bIsNumber				:= TRUE);

//---------

						
s_fbParamTotalStroke(i_fDefaultValue			:= 100,
						i_nArrayFolderIndex		:= 2,
						i_sName					:= 'Total measurement stroke',
						i_bIsNumber				:= TRUE);
						
s_fbParamStepStroke(i_fDefaultValue				:= 10,
						i_nArrayFolderIndex		:= 2,
						i_sName					:= 'Step distance per measurement',
						i_bIsNumber				:= TRUE);

s_fbParamAveragingNumberTest(i_fDefaultValue		:= 10,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Number of measurements per step for averaging the magnetic field',
							i_bIsNumber				:= TRUE);
							
s_fbParamaMaxMagnitudeCriteria(i_fDefaultValue		:= 100,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Maximum allowed magnitude magnetic field (Test)',
							i_bIsNumber				:= TRUE);

s_fbParamRefIduBottom(i_fDefaultValue				:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to lower IDU Bottom',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefItm(i_fDefaultValue						:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position Itm lower IDU / upper IDU',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefCenterTpmPipe(i_fDefaultValue			:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to center TPM pipe',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefCpValve(i_fDefaultValue		:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to bottom C/P valve',
							i_bIsNumber				:= TRUE);				

GVL_DataLogging.g_stReportData.CabinetSerialNumber      := s_fbParamToolHardwareNr.p_sValue;
GVL_DataLogging.g_stReportData.TesterSoftwareVersion    := s_fbParamToolSoftwareVersion.p_sValue;
GVL_DataLogging.g_stReportData.Operator                 := GVL.g_sUser;
GVL_DataLogging.g_stReportData.Note						:= GVL.g_sNotesEntry;
//GVL_DataLogging.g_stReportData.Message can be filled in test procedure with for example the error if test is stopped
GVL_DataLogging.g_stReportData.SerialNumber             := GVL.g_sSerialNumber;

s_fToHmiXAxisMin	:= -2*s_fbParamaMaxMagnitudeCriteria.p_fValue;
s_fToHmiXAxisMax	:= 2*s_fbParamaMaxMagnitudeCriteria.p_fValue;
s_fToHmiYAxisMin	:= s_CmProbeMotor.p_fHomePosition;
s_fToHmiYAxisMax	:= s_fbParamRefCpValve.p_fValue*1.2;

_m_Params := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_SeqStartup" Id="{c8d2def1-61a3-43d6-a687-bb0d54548919}">
      <Declaration><![CDATA[METHOD PRIVATE _m_SeqStartup : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
s_bReqDockingClampsUpperHighPressure := FALSE; //Low pressure 
s_bReqDockingClampsLowerHighPressure := FALSE; //Low pressure

IF s_cmDoorOpener.m_Off() OR s_bStaDoorOpenerAlmostClosed THEN //Close Door Opener
	IF s_cmDoorShutter.m_Off()THEN //Close Door Shutter
		IF s_cmUnlockingPinUpper.m_Off() AND s_cmUnlockingPinLower.m_Off() THEN //Lock Unlocking Pins
			IF s_cmDockingClampsUpper.m_Off() AND s_cmDockingClampsLower.m_Off() THEN // Open Docking Clamps
				_m_SeqStartup := TRUE;
			END_IF
		END_IF						
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_CloseDockingClamps" Id="{410bcb72-5351-4d55-ac55-5d0e27ce8155}">
      <Declaration><![CDATA[METHOD PUBLIC m_CloseDockingClamps : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := FALSE;
s_bReqUndockBox := FALSE;
s_bReqOpenDockingClamps := FALSE;
s_bReqCloseDockingClamps := TRUE;

m_CloseDockingClamps := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_DockBox" Id="{8e382bf6-1d32-4474-a8a5-7c183a3c7036}">
      <Declaration><![CDATA[METHOD PUBLIC m_DockBox : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := TRUE;
s_bReqUndockBox := FALSE;
s_bReqOpenDockingClamps := FALSE;
s_bReqCloseDockingClamps := FALSE;

m_DockBox := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{13829dfc-fc98-4f3a-8520-8dee66cb84d9}">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

CASE i_eCtrlMode OF

	E_CtrlMode.IDLE:
		//--s_cmDockingClamps.m_Stop();
		//--s_cmUnlockingPins.m_Stop();
		
		s_bReqDockBox := FALSE;
		s_bReqUndockBox := FALSE;
		
	E_CtrlMode.AUTOMATIC:
	
		//Let pressure selection toggle follow automatic state
		IF s_doCmdClampsUpperHighPressure.p_bStaOutput THEN
			s_fbHmiBtnManualClampsUpperHighPressure.m_On();
		ELSE
			s_fbHmiBtnManualClampsUpperHighPressure.m_Off();	
		END_IF
		
		IF s_doCmdClampsLowerHighPressure.p_bStaOutput THEN
			s_fbHmiBtnManualClampsLowerHighPressure.m_On();
		ELSE
			s_fbHmiBtnManualClampsLowerHighPressure.m_Off();	
		END_IF
	
		//Execute automatic control
		_m_AutomaticControl();
	
(*		s_fbSeqDockingInterface(
			i_nSeqStep := s_eSeqDockingInterface, 
			i_sStepName := TO_STRING(s_fbSeqDockingInterface.q_eActState), 
			i_bCmdReset := i_bCmdReset, 
			i_bStaError := s_bStaError);
	
		CASE s_eSeqDockingInterface OF
			
			E_SeqDockingInterface.IDLE:
			
				IF s_bReqDockBox THEN
					//--IF s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed THEN
					IF s_bStaBoxAtPreDockingPosition THEN	
						s_bStaUndockingDone := FALSE;
						s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_CLOSE_CLAMPS;
					ELSE
						s_bWrnNoBoxPresentAtPreDockingPosition := TRUE;	
					END_IF
				END_IF
				
				IF s_bReqUndockBox THEN
					IF s_diStaBoxAtDockedPosition.p_bStaInputDelayed THEN
						s_bStaDockingDone := FALSE;
						s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_LOCK_DOOR;
					ELSE
						s_bWrnNoBoxPresentAtDockedPosition := TRUE;	
					END_IF	
				END_IF
			
				// Seperatly opening/closing the clamps is nessescary to move these out of the way for moving of the outer door
				// Clamps must be closed before the outer door can be moved
				IF s_bReqClosDockingClamps THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.ONLY_CLOSE_CLAMPS;
				END_IF
				
				IF s_bReqOpenDockingClamps THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.ONLY_OPEN_CLAMPS;
				END_IF
				
			E_SeqDockingInterface.DOCKING_CLOSE_CLAMPS:
				
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmDockingClamps.m_Close();
				END_IF
				
				IF s_cmDockingClamps.p_bStaIsClosed THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_UNLOCK_DOOR;
				ELSIF s_cmDockingClamps.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tTimeoutDockingClamps) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.DOCKING_UNLOCK_DOOR:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmUnlockingPins.m_Unlock();
				END_IF
				
				IF s_cmUnlockingPins.p_bStaIsUnlocked THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_DONE;
				ELSIF s_cmUnlockingPins.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tTimeoutUnlockingPins) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.DOCKING_DONE:
				s_bStaDockingDone := TRUE;
				s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
			
			E_SeqDockingInterface.UNDOCKING_LOCK_DOOR:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmUnlockingPins.m_Lock();
				END_IF
				
				IF s_cmUnlockingPins.p_bStaIsLocked THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_OPEN_CLAMPS;
				ELSIF s_cmUnlockingPins.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tTimeoutUnlockingPins) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.UNDOCKING_OPEN_CLAMPS:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmDockingClamps.m_Open();
				END_IF
				
				IF s_cmDockingClamps.p_bStaIsOpened THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_DONE;
				ELSIF s_cmDockingClamps.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tTimeoutDockingClamps) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.UNDOCKING_DONE:
				s_bStaUndockingDone := TRUE;
				s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				
			E_SeqDockingInterface.ONLY_CLOSE_CLAMPS:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN
					s_cmDockingClamps.m_Close();
				END_IF
			
				IF s_cmDockingClamps.p_bStaIsClosed THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tTimeoutDockingClamps) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.ONLY_OPEN_CLAMPS:	
				
				IF s_fbSeqDockingInterface.q_bStaEntry THEN
					s_cmDockingClamps.m_Open();
				END_IF
			
				IF s_cmDockingClamps.p_bStaIsOpened THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tTimeoutDockingClamps) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.READY:
				;
			
			E_SeqDockingInterface.ERROR:
				
				IF i_bCmdReset THEN
					//Reset errors (probebly alredy done in the methode devices)
					//--cmValveDockingClampsUpper.i_bCmdReset := TRUE;
				
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				END_IF
				
		END_CASE		
*)	
		
	E_CtrlMode.MANUAL:
		//Reset automatic sequencer
		s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
		
		_m_ManualControl();

END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_OpenDockingClamps" Id="{8be47e79-6c29-4713-b252-eb11a6bb46fb}">
      <Declaration><![CDATA[METHOD PUBLIC m_OpenDockingClamps : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := FALSE;
s_bReqUndockBox := FALSE;
s_bReqOpenDockingClamps := TRUE;
s_bReqCloseDockingClamps := FALSE;

m_OpenDockingClamps := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_UndockBox" Id="{b328f671-5464-49bf-836c-f1f93f3d32af}">
      <Declaration><![CDATA[METHOD PUBLIC m_UndockBox : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := FALSE;
s_bReqUndockBox := TRUE;
s_bReqOpenDockingClamps := FALSE;
s_bReqCloseDockingClamps := FALSE;

m_UndockBox := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bStaBoxAtDockedPosition" Id="{95822bca-1047-492e-8877-1d8528242dc0}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaBoxAtDockedPosition : BOOL]]></Declaration>
      <Get Name="Get" Id="{aa3a83b8-f468-44df-903c-150f557391f1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaBoxAtDockedPosition := s_bStaBoxAtDockedPosition;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaBoxAtPreDockingPosition" Id="{edbe1074-bded-474c-9558-f67f08872474}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaBoxAtPreDockingPosition : BOOL]]></Declaration>
      <Get Name="Get" Id="{cf71d052-481e-48f0-aa51-5a234c033608}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaBoxAtPreDockingPosition := s_bStaBoxAtPreDockingPosition;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingClampsClosed" Id="{de32a338-e965-450c-a404-78adcd65d0d0}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingClampsClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{7682c14a-e4ab-4156-bdf2-ba42269377d9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingClampsClosed := s_bStaDockingClampsClosed; 
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingClampsOpened" Id="{20b689ca-7b07-4e51-a3ea-324f8cec92e0}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingClampsOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{31c09844-15c2-48d5-9a5b-8c43458c7d91}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingClampsOpened := s_bStaDockingClampsOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingDone" Id="{a61394df-c5f0-450a-8cdf-e47379cb8b81}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{e6843217-13bc-4765-b8f6-a237563e9d39}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingDone := s_bStaDockingDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingPositionFree" Id="{1c1bcc1f-d42b-48d2-9743-d0c845e1b595}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingPositionFree : BOOL]]></Declaration>
      <Get Name="Get" Id="{8f44ecfc-2d8a-4e22-a3b9-d3876337bbab}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingPositionFree := s_bStaDockingPositionFree;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaUndocked" Id="{2a632f80-434e-4ff6-ad02-3973770d7bbf}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaUndocked : BOOL]]></Declaration>
      <Get Name="Get" Id="{56b7d6e8-1510-46ea-84c2-20aa46607960}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaUndocked := s_bStaUndocked;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaUndockingDone" Id="{bb261a88-cc34-4fd6-bf54-1089f44f9408}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaUndockingDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{44b7df0c-94a7-4b6d-a3a8-e5b8bd6f931a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaUndockingDone := s_bStaUndockingDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="EM_DockingInterface">
      <LineId Id="1152" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="1387" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Alarms">
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="40" Count="5" />
      <LineId Id="39" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="68" Count="5" />
      <LineId Id="47" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_AutomaticControl">
      <LineId Id="140" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="500" Count="3" />
      <LineId Id="499" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="7" Count="3" />
      <LineId Id="342" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="362" Count="3" />
      <LineId Id="323" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="450" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="371" Count="1" />
      <LineId Id="370" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="358" Count="2" />
      <LineId Id="357" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="453" Count="2" />
      <LineId Id="451" Count="1" />
      <LineId Id="376" Count="1" />
      <LineId Id="504" Count="1" />
      <LineId Id="374" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="459" Count="3" />
      <LineId Id="456" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="465" Count="1" />
      <LineId Id="464" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="478" Count="1" />
      <LineId Id="482" Count="0" />
      <LineId Id="481" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="316" Count="1" />
      <LineId Id="315" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="413" Count="1" />
      <LineId Id="421" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="422" Count="1" />
      <LineId Id="438" Count="0" />
      <LineId Id="440" Count="1" />
      <LineId Id="424" Count="1" />
      <LineId Id="405" Count="0" />
      <LineId Id="428" Count="4" />
      <LineId Id="426" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="385" Count="1" />
      <LineId Id="225" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="227" Count="1" />
      <LineId Id="226" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="240" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="391" Count="1" />
      <LineId Id="179" Count="2" />
      <LineId Id="254" Count="1" />
      <LineId Id="253" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="268" Count="1" />
      <LineId Id="436" Count="0" />
      <LineId Id="435" Count="0" />
      <LineId Id="270" Count="1" />
      <LineId Id="443" Count="2" />
      <LineId Id="442" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="278" Count="3" />
      <LineId Id="272" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="397" Count="1" />
      <LineId Id="400" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="328" Count="3" />
      <LineId Id="344" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="489" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="495" Count="1" />
      <LineId Id="494" Count="0" />
      <LineId Id="508" Count="1" />
      <LineId Id="490" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="491" Count="0" />
      <LineId Id="347" Count="1" />
      <LineId Id="488" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="351" Count="1" />
      <LineId Id="345" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="474" Count="1" />
      <LineId Id="477" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="293" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Devices">
      <LineId Id="284" Count="0" />
      <LineId Id="156" Count="10" />
      <LineId Id="265" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="250" Count="3" />
      <LineId Id="249" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="255" Count="3" />
      <LineId Id="268" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="208" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="169" Count="4" />
      <LineId Id="236" Count="0" />
      <LineId Id="238" Count="3" />
      <LineId Id="237" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="244" Count="3" />
      <LineId Id="243" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="224" Count="3" />
      <LineId Id="280" Count="1" />
      <LineId Id="218" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="231" Count="3" />
      <LineId Id="220" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Hmi">
      <LineId Id="222" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="246" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="320" Count="3" />
      <LineId Id="319" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="327" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="304" Count="12" />
      <LineId Id="298" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="279" Count="1" />
      <LineId Id="268" Count="0" />
      <LineId Id="283" Count="1" />
      <LineId Id="281" Count="0" />
      <LineId Id="271" Count="3" />
      <LineId Id="325" Count="0" />
      <LineId Id="275" Count="1" />
      <LineId Id="256" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Init">
      <LineId Id="203" Count="0" />
      <LineId Id="5" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="241" Count="1" />
      <LineId Id="248" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="327" Count="3" />
      <LineId Id="326" Count="0" />
      <LineId Id="485" Count="2" />
      <LineId Id="484" Count="0" />
      <LineId Id="504" Count="2" />
      <LineId Id="332" Count="4" />
      <LineId Id="331" Count="0" />
      <LineId Id="489" Count="2" />
      <LineId Id="488" Count="0" />
      <LineId Id="508" Count="1" />
      <LineId Id="507" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="239" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="244" Count="2" />
      <LineId Id="337" Count="4" />
      <LineId Id="222" Count="0" />
      <LineId Id="493" Count="1" />
      <LineId Id="343" Count="0" />
      <LineId Id="348" Count="3" />
      <LineId Id="342" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="355" Count="4" />
      <LineId Id="354" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="503" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="361" Count="4" />
      <LineId Id="360" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="35" Count="3" />
      <LineId Id="271" Count="2" />
      <LineId Id="269" Count="1" />
      <LineId Id="276" Count="2" />
      <LineId Id="274" Count="1" />
      <LineId Id="280" Count="2" />
      <LineId Id="279" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="516" Count="2" />
      <LineId Id="514" Count="1" />
      <LineId Id="258" Count="0" />
      <LineId Id="286" Count="1" />
      <LineId Id="283" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="289" Count="1" />
      <LineId Id="260" Count="0" />
      <LineId Id="431" Count="0" />
      <LineId Id="522" Count="2" />
      <LineId Id="520" Count="1" />
      <LineId Id="433" Count="7" />
      <LineId Id="432" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="294" Count="1" />
      <LineId Id="292" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="298" Count="2" />
      <LineId Id="297" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="450" Count="7" />
      <LineId Id="449" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="465" Count="7" />
      <LineId Id="463" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="475" Count="7" />
      <LineId Id="474" Count="0" />
      <LineId Id="464" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="525" Count="0" />
      <LineId Id="527" Count="3" />
      <LineId Id="526" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="413" Count="2" />
      <LineId Id="389" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="308" Count="1" />
      <LineId Id="250" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="417" Count="3" />
      <LineId Id="423" Count="2" />
      <LineId Id="422" Count="0" />
      <LineId Id="382" Count="1" />
      <LineId Id="426" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="511" Count="1" />
      <LineId Id="385" Count="1" />
      <LineId Id="428" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="97" Count="3" />
      <LineId Id="314" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="1" />
      <LineId Id="323" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Inputs">
      <LineId Id="46" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="56" Count="1" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="84" Count="7" />
      <LineId Id="83" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="97" Count="1" />
      <LineId Id="101" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="77" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_ManualControl">
      <LineId Id="397" Count="1" />
      <LineId Id="409" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="415" Count="4" />
      <LineId Id="414" Count="0" />
      <LineId Id="403" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Outputs">
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="22" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Params">
      <LineId Id="291" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="6" Count="8" />
      <LineId Id="159" Count="3" />
      <LineId Id="35" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="235" Count="7" />
      <LineId Id="40" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="191" Count="2" />
      <LineId Id="190" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="196" Count="2" />
      <LineId Id="195" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="222" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="230" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="256" Count="2" />
      <LineId Id="253" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="261" Count="2" />
      <LineId Id="260" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="266" Count="2" />
      <LineId Id="265" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="271" Count="2" />
      <LineId Id="270" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="210" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="274" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="292" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_SeqStartup">
      <LineId Id="395" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="369" Count="1" />
      <LineId Id="375" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="293" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.m_CloseDockingClamps">
      <LineId Id="4" Count="9" />
      <LineId Id="3" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.m_DockBox">
      <LineId Id="13" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.m_Main">
      <LineId Id="178" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="397" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="333" Count="1" />
      <LineId Id="332" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="430" Count="1" />
      <LineId Id="434" Count="1" />
      <LineId Id="437" Count="1" />
      <LineId Id="436" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="441" Count="3" />
      <LineId Id="440" Count="0" />
      <LineId Id="425" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="235" Count="3" />
      <LineId Id="233" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="242" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="318" Count="1" />
      <LineId Id="317" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="326" Count="2" />
      <LineId Id="324" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="394" Count="1" />
      <LineId Id="392" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="359" Count="4" />
      <LineId Id="223" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="343" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="271" Count="4" />
      <LineId Id="221" Count="1" />
      <LineId Id="211" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="212" Count="1" />
      <LineId Id="310" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="286" Count="1" />
      <LineId Id="349" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="291" Count="4" />
      <LineId Id="225" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="299" Count="1" />
      <LineId Id="352" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="304" Count="4" />
      <LineId Id="227" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="370" Count="3" />
      <LineId Id="368" Count="0" />
      <LineId Id="374" Count="1" />
      <LineId Id="378" Count="1" />
      <LineId Id="377" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="381" Count="8" />
      <LineId Id="380" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="230" Count="1" />
      <LineId Id="218" Count="0" />
      <LineId Id="277" Count="1" />
      <LineId Id="280" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="195" Count="1" />
      <LineId Id="417" Count="0" />
      <LineId Id="427" Count="2" />
      <LineId Id="414" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.m_OpenDockingClamps">
      <LineId Id="4" Count="10" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.m_UndockBox">
      <LineId Id="18" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaBoxAtDockedPosition.Get">
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaBoxAtPreDockingPosition.Get">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaDockingClampsClosed.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaDockingClampsOpened.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaDockingDone.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaDockingPositionFree.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaUndocked.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaUndockingDone.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>