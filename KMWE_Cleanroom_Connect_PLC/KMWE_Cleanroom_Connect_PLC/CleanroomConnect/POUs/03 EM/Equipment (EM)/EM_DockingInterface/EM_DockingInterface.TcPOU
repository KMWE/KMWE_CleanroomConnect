<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_DockingInterface" Id="{1a98308c-f0e0-4a53-963d-dfa6a727e4cb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_DockingInterface EXTENDS EM_Base IMPLEMENTS I_EM_DockingInterface
VAR CONSTANT 
	c_nResultDataSize : UINT := 20;
END_VAR

VAR_INPUT
//Inputs
	i_stSettings : ST_SettingsDockingInterface;
	
	i_bIlckDockingClampsToClose : BOOL := TRUE; //TRUE = Interlocked
	i_bIlckDockingClampsToOpen : BOOL := TRUE; //TRUE = Interlocked
	i_bIlckUnlockingPinsToLock : BOOL := TRUE; //TRUE = Interlocked
	i_bIlckUnlockingPinsToRelease : BOOL := TRUE; //TRUE = Interlocked	
END_VAR

VAR
//------------------------------------------//
//Control Modules (Devices)
	s_cmDockingClamps : CM_DockingClamps;
	s_cmUnlockingPins : CM_UnlockingPins; 
	
//------------------------------------------//

//------------------------------------------//
//Inputs
	s_diStaBoxAtPreDockingPosition : FB_DigInput;
	s_diStaBoxAtDockedPosition : FB_DigInput;
		
//------------------------------------------//
	
//------------------------------------------//
//Outputs

//------------------------------------------//

//Requests
	s_bReqDockBox : BOOL := FALSE;
	s_bReqUndockBox : BOOL := FALSE;
	s_bReqOpenDockingClamps : BOOL := FALSE;
	s_bReqClosDockingClamps : BOOL := FALSE;
	
//Properties
	s_bStaDockingDone : BOOL := FALSE;
	s_bStaUndockingDone : BOOL := FALSE;
	
	s_bStaDockingClampsClosed : BOOL := FALSE;
	s_bStaDockingClampsOpened : BOOL := FALSE;
	
	s_bStaBoxAtPreDockingPosition : BOOL := FALSE;
	s_bStaBoxAtDockedPosition : BOOL := FALSE;
	s_bStaDockingPositionFree : BOOL := FALSE;
	
//Interlockes	
	s_bIlckDockingClampsToClose : BOOL;
	s_bIlckDockingClampsToOpen : BOOL;
	s_bIlckUnlockingPinsToLock : BOOL;
	s_bIlckUnlockingPinsToRelease : BOOL;
	
//Alarms

//Warnings
	s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition : FB_AlarmHandler;
	s_fbAlarmHandlerNoBoxPresentAtDockedPosition : FB_AlarmHandler;

	s_bWrnNoBoxPresentAtPreDockingPosition : BOOL;
	s_bWrnNoBoxPresentAtDockedPosition : BOOL;
	
//------------------------------------------//
//Params
	//Tool settings
	s_fbParamToolHardwareNr				: FB_HmiParamHandler;
    s_fbParamToolSoftwareVersion		: FB_HmiParamHandler;

	s_fbParamName						: FB_HmiParamHandler;
	s_fbParamNumber						: FB_HmiParamHandler;
	s_fbParamRevision                   : FB_HmiParamHandler;
	
	s_fbParamTeslaMeterIp				: FB_HmiParamHandler;
	s_fbParamTeslaMeterPort				: FB_HmiParamHandler;
	
	//Product settings (Maybe)
	s_fbParamTotalStroke				: FB_HmiParamHandler;
	s_fbParamStepStroke					: FB_HmiParamHandler;
	s_fbParamAveragingNumberTest		: FB_HmiParamHandler;
	
	s_fbParamaMaxMagnitudeCriteria		: FB_HmiParamHandler;
	
	s_fbParamRefIduBottom				: FB_HmiParamHandler;
	s_fbParamRefItm                     : FB_HmiParamHandler;
	s_fbParamRefCenterTpmPipe           : FB_HmiParamHandler;
	s_fbParamRefCpValve					: FB_HmiParamHandler;
//------------------------------------------//

//------------------------------------------//
//Variables
	s_sTestResult 						: STRING;
	
	s_eSeqDockingInterface : E_SeqDockingInterface;
	s_fbSeqDockingInterface : FB_SeqControl;
	
	//--s_eCurrentTest						: E_TestMode;
//--	s_stCommandsTesla					: ST_SCPI_TeslaCommands;
	
	
	// Interlocks
	s_bIlckSpeedDoorOuterToOpen 		: BOOL := TRUE;
	s_bIlckSpeedDoorOuterToClose 		: BOOL := TRUE;
	
	s_bIlckDoorLockCleanroomToOpen 		: BOOL := TRUE;
	
//------------------------------------------//

//------------------------------------------//
//Sensor data	
	s_aMagneticX						: ARRAY[0..c_nResultDataSize] OF LREAL;
	s_aMagneticY						: ARRAY[0..c_nResultDataSize] OF LREAL;
	s_aMagneticZ						: ARRAY[0..c_nResultDataSize] OF LREAL;
	s_aMagneticMagnitude				: ARRAY[0..c_nResultDataSize] OF LREAL;
	s_aProbePositionZ					: ARRAY[0..c_nResultDataSize] OF LREAL;
	
	s_sXMLData							: STRING(Param_Project.n_MaxLenghtXmlDbRow*Param_Project.n_NumberofRowsXmlDb);
	
	s_aHmi_MagneticTest					: ARRAY[1..3,0..c_nResultDataSize] OF ST_POINT;
	
//	s_aHmi_ProbePositionZ				: ARRAY[1..1,1..GVL_Datalogging.c_nHmiLogSize] OF ST_POINT;
//------------------------------------------//

//------------------------------------------//
//Alarms

//------------------------------------------//

//------------------------------------------//
//Hmi
	s_nToHmiStepNr					: INT;
	s_nToHmiMaxStepNr				: INT;
	s_sToHmiInstructionText			: T_MAXSTRING;
	s_sToHmiProcedure				: T_MAXSTRING;
	
	//Buttons
	s_fbHmiBtnDock					: FB_HmiBtn;
	s_fbHmiBtnUndock				: FB_HmiBtn;
	s_fbHmiBtnReset					: FB_HmiBtn;
	
	s_fbHmiBtnManualOpenClamps		: FB_HmiBtn;
	s_fbHmiBtnManualCloseClamps		: FB_HmiBtn;
	
	s_fbHmiBtnManualLockPins		: FB_HmiBtn;
	s_fbHmiBtnManualUnlockPins		: FB_HmiBtn;
	
	//Leds
	s_fbHmiLedClampsOpened			: FB_HmiLed;
	s_fbHmiLedClampsClosed			: FB_HmiLed;
	
	s_fbHmiLedPinsLocked			: FB_HmiLed;
	s_fbHmiLedPinsUnloacked			: FB_HmiLed;
	
	s_fbHmiLedBoxAtPreDockPosition	: FB_HmiLed;
	s_fbHmiLedBoxAtDockedPosition	: FB_HmiLed;
	
//------------------------------------------//
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();
]]></ST>
    </Implementation>
    <Method Name="_m_Alarms" Id="{c0cf83f3-e704-4016-bd6f-2d30156087ff}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

// Set error bits

// Alarm Handlers
s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition(
	i_bStaActive := s_bWrnNoBoxPresentAtPreDockingPosition, 
	i_eAlarmLevel := E_AlarmLevel.Warning, 
	i_sAlarmText := 'No box present at per-docking position');
	
s_fbAlarmHandlerNoBoxPresentAtDockedPosition(
	i_bStaActive := s_bWrnNoBoxPresentAtDockedPosition, 
	i_eAlarmLevel := E_AlarmLevel.Warning, 
	i_sAlarmText := 'No box present at docked position');

// Reset warnings
IF i_bCmdReset THEN
	s_bWrnNoBoxPresentAtPreDockingPosition := FALSE;
	s_bWrnNoBoxPresentAtDockedPosition := FALSE;
END_IF	
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{5090ba0a-8e2b-4ba6-88b3-b451c7c7863d}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnDock();
s_fbHmiBtnUndock();
s_fbHmiBtnReset();
	
s_fbHmiBtnManualOpenClamps();
s_fbHmiBtnManualCloseClamps();
	
s_fbHmiBtnManualLockPins();
s_fbHmiBtnManualUnlockPins();

//Leds
s_fbHmiLedClampsOpened(i_bStaLed := s_cmDockingClamps.p_bStaIsOpened);
s_fbHmiLedClampsClosed(i_bStaLed := s_cmDockingClamps.p_bStaIsClosed);
	
s_fbHmiLedPinsLocked(i_bStaLed := s_cmUnlockingPins.p_bStaIsLocked);
s_fbHmiLedPinsUnloacked(i_bStaLed := s_cmUnlockingPins.p_bStaIsUnlocked);

s_fbHmiLedBoxAtPreDockPosition(i_bStaLed := s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed);
s_fbHmiLedBoxAtDockedPosition(i_bStaLed := s_diStaBoxAtDockedPosition.p_bStaInputDelayed);

_m_Hmi := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{f248bb7d-4543-4fa5-93e5-377095a1130a}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Control Modules
s_cmDockingClamps.i_bReqEnable := FALSE;
s_cmDockingClamps.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmDockingClamps.i_sCmName := 'Docking Clamps';
s_cmDockingClamps.i_stSettings.tClampsOpenTimeout := T#10S;
s_cmDockingClamps.i_stSettings.tClampsCloseTimeout := T#10S;
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}
	
s_cmUnlockingPins.i_bReqEnable := FALSE;
s_cmUnlockingPins.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmUnlockingPins.i_sCmName := 'Unloading Pins';
s_cmUnlockingPins.i_stSettings.tPinsLockTimeout := T#10S;
s_cmUnlockingPins.i_stSettings.tPinsUnlockTimeout := T#10S;
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}
	
//---------------------------------//	
	
//----------------------------------//	
//Hmi 
	s_fbHmiBtnDock.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnDock.p_bStaVisible := FALSE;
	s_fbHmiBtnDock.p_bStaEnabled := FALSE;		
	s_fbHmiBtnDock.p_sBtnText := 'Start Docking';
	
	s_fbHmiBtnUndock.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnUndock.p_bStaVisible := FALSE;
	s_fbHmiBtnUndock.p_bStaEnabled := FALSE;		
	s_fbHmiBtnUndock.p_sBtnText := 'Start Un-Docking';
	
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	s_fbHmiBtnManualOpenClamps.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualOpenClamps.p_bStaVisible := FALSE;
	s_fbHmiBtnManualOpenClamps.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualOpenClamps.p_sBtnText := 'Open Clamps';
	
	s_fbHmiBtnManualCloseClamps.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualCloseClamps.p_bStaVisible := FALSE;
	s_fbHmiBtnManualCloseClamps.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualCloseClamps.p_sBtnText := 'Close Clamps';
	
	s_fbHmiBtnManualLockPins.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualLockPins.p_bStaVisible := FALSE;
	s_fbHmiBtnManualLockPins.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualLockPins.p_sBtnText := 'Lock Pins';
	
	s_fbHmiBtnManualUnlockPins.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualUnlockPins.p_bStaVisible := FALSE;
	s_fbHmiBtnManualUnlockPins.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualUnlockPins.p_sBtnText := 'Unlock Pins';
	
	s_fbHmiLedClampsOpened.p_bStaVisible := FALSE;
	s_fbHmiLedClampsOpened.p_sToHmiDescriptionLed := 'Clamps Opened';
		
	s_fbHmiLedClampsClosed.p_bStaVisible := FALSE;
	s_fbHmiLedClampsClosed.p_sToHmiDescriptionLed := 'Clamps Closed';
	
	s_fbHmiLedPinsLocked.p_bStaVisible := FALSE;
	s_fbHmiLedPinsLocked.p_sToHmiDescriptionLed := 'Pins Locked';
	
	s_fbHmiLedPinsUnloacked.p_bStaVisible := FALSE;
	s_fbHmiLedPinsUnloacked.p_sToHmiDescriptionLed := 'Pins Unlocked';
	
	s_fbHmiLedBoxAtPreDockPosition.p_bStaVisible := FALSE;
	s_fbHmiLedBoxAtPreDockPosition.p_sToHmiDescriptionLed := 'Box At Pre Docking Position';
	
	s_fbHmiLedBoxAtDockedPosition.p_bStaVisible := FALSE;
	s_fbHmiLedBoxAtDockedPosition.p_sToHmiDescriptionLed := 'Box At Docked Position';

//----------------------------------//	
//Initialize all moving averages

//----------------------------------//	

//----------------------------------//	

//Inputs
s_diStaBoxAtPreDockingPosition.i_stSettings.tmInputDelay := T#3S;
s_diStaBoxAtDockedPosition.i_stSettings.tmInputDelay := T#3S;
//----------------------------------//	

//----------------------------------//	
//Outputs
//--s_doRelayTableDown.i_stSettings.bCfgDelay		:= FALSE;	
//--s_doRelayTableDown.i_stSettings.tmOutputDelay	:= T#0S;	
//----------------------------------//	

_m_Init := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{15e5d91e-088b-4383-82aa-ad9257b81a9b}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

//Interlocks
s_bIlckDockingClampsToClose := i_bIlckDockingClampsToClose;
s_bIlckDockingClampsToOpen := i_bIlckDockingClampsToOpen;
s_bIlckUnlockingPinsToLock := i_bIlckUnlockingPinsToLock;
s_bIlckUnlockingPinsToRelease := i_bIlckUnlockingPinsToRelease;

s_diStaBoxAtPreDockingPosition();
s_diStaBoxAtDockedPosition();

s_bStaBoxAtPreDockingPosition := s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed AND NOT(s_diStaBoxAtDockedPosition.p_bStaInputDelayed);
s_bStaBoxAtDockedPosition := s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed AND s_diStaBoxAtDockedPosition.p_bStaInputDelayed;
s_bStaDockingPositionFree := NOT(s_bStaBoxAtPreDockingPosition) AND NOT(s_bStaBoxAtDockedPosition);

_m_Inputs := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Modules" Id="{b43c077f-3abc-4642-868d-7667cd19393f}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Modules : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

s_diStaBoxAtPreDockingPosition();
s_diStaBoxAtDockedPosition();

s_cmDockingClamps(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset);
	//--i_sCmName := 'Docking Clamps');
	
s_bStaDockingClampsClosed := s_cmDockingClamps.p_bStaIsClosed;
s_bStaDockingClampsOpened := s_cmDockingClamps.p_bStaIsOpened;
	
s_cmUnlockingPins(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset);
	//--i_sCmName := 'Unloading Pins');
	
(*	
	// Interlocks (doors must work as an airlock, only one door may be opened at all times)
	s_bIlckSpeedDoorOuterToOpen :=
		s_cmDoorLockCleanroom.p_bStaError
		OR NOT(s_cmDoorLockCleanroom.p_bStaEnabled)
		NOT(s_cmDoorLockCleanroom.p_bStaDoorIsClosed)
		OR NOT (s_cmDoorLockCleanroom.p_bStaLockIsApplied)
		OR s_cmDoorLockCleanroom.p_bStaLockIsReleased
		OR TRUE (*Air treathment unit must be running and ok*)
		OR TRUE (*Add more..*);
	s_bIlckSpeedDoorOuterToClose :=
		TRUE (*Opening must be free*)
		OR TRUE (*Add more..*);
	
	s_bIlckDoorLockCleanroomToOpen :=
		s_cmSpeedDoorOuter.p_bStaError
		OR NOT(s_cmSpeedDoorOuter.p_bStaEnabled)
		OR NOT(s_cmSpeedDoorOuter.p_bStaIsClosed)
		OR s_cmSpeedDoorOuter.p_bStaIsClosing
		OR s_cmSpeedDoorOuter.p_bStaIsOpened
		OR s_cmSpeedDoorOuter.p_bStaIsOpening
		OR TRUE (*Air treathment unit must be running and ok*)
		OR TRUE (*Add more..*);
*)	
_m_Modules := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{748b7abf-6524-428b-ad1f-dd34bf2d901c}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

_m_Outputs := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Params" Id="{78648659-4a86-4875-84af-aa8b2b68e067}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Params : BOOL
VAR_INST
	s_fToHmiXAxisMin	: LREAL;
	s_fToHmiXAxisMax	: LREAL;
	s_fToHmiYAxisMin	: LREAL;
	s_fToHmiYAxisMax	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Params() THEN
	RETURN;
END_IF

s_fbParamToolHardwareNr(i_fDefaultValue				:= 0,
						i_nArrayFolderIndex			:= 1,
						i_sName						:= 'Harware ID',
						i_bIsNumber					:= FALSE);

s_fbParamToolSoftwareVersion(i_fDefaultValue		:= 0,
							i_nArrayFolderIndex		:= 1,
							i_sName					:= 'Software Version',
							i_bIsNumber				:= FALSE);

s_fbParamName(i_fDefaultValue						:= 0,
				i_nArrayFolderIndex					:= 1,
				i_sName								:= 'Description',
				i_bIsNumber							:= FALSE);
							
s_fbParamTeslaMeterIp(i_fDefaultValue			:= 0,
						i_nArrayFolderIndex		:= 1,
						i_sName					:= 'Tesla meter ip adress',
						i_bIsNumber				:= FALSE);
						
s_fbParamTeslaMeterPort(i_fDefaultValue			:= 0,
						i_nArrayFolderIndex		:= 1,
						i_sName					:= 'Tesla meter port number',
						i_bIsNumber				:= TRUE);

//---------

						
s_fbParamTotalStroke(i_fDefaultValue			:= 100,
						i_nArrayFolderIndex		:= 2,
						i_sName					:= 'Total measurement stroke',
						i_bIsNumber				:= TRUE);
						
s_fbParamStepStroke(i_fDefaultValue				:= 10,
						i_nArrayFolderIndex		:= 2,
						i_sName					:= 'Step distance per measurement',
						i_bIsNumber				:= TRUE);

s_fbParamAveragingNumberTest(i_fDefaultValue		:= 10,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Number of measurements per step for averaging the magnetic field',
							i_bIsNumber				:= TRUE);
							
s_fbParamaMaxMagnitudeCriteria(i_fDefaultValue		:= 100,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Maximum allowed magnitude magnetic field (Test)',
							i_bIsNumber				:= TRUE);

s_fbParamRefIduBottom(i_fDefaultValue				:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to lower IDU Bottom',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefItm(i_fDefaultValue						:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position Itm lower IDU / upper IDU',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefCenterTpmPipe(i_fDefaultValue			:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to centre TPM pipe',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefCpValve(i_fDefaultValue		:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to bottom C/P valve',
							i_bIsNumber				:= TRUE);				

GVL_DataLogging.g_stReportData.CabinetSerialNumber      := s_fbParamToolHardwareNr.p_sValue;
GVL_DataLogging.g_stReportData.TesterSoftwareVersion    := s_fbParamToolSoftwareVersion.p_sValue;
GVL_DataLogging.g_stReportData.Operator                 := GVL.g_sUser;
GVL_DataLogging.g_stReportData.Note						:= GVL.g_sNotesEntry;
//GVL_DataLogging.g_stReportData.Message can be filled in test procedure with for example the error if test is stopped
GVL_DataLogging.g_stReportData.SerialNumber             := GVL.g_sSerialNumber;

s_fToHmiXAxisMin	:= -2*s_fbParamaMaxMagnitudeCriteria.p_fValue;
s_fToHmiXAxisMax	:= 2*s_fbParamaMaxMagnitudeCriteria.p_fValue;
s_fToHmiYAxisMin	:= s_CmProbeMotor.p_fHomePosition;
s_fToHmiYAxisMax	:= s_fbParamRefCpValve.p_fValue*1.2;

_m_Params := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_CloseDockingClamps" Id="{410bcb72-5351-4d55-ac55-5d0e27ce8155}">
      <Declaration><![CDATA[METHOD PUBLIC m_CloseDockingClamps : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := FALSE;
s_bReqUndockBox := FALSE;
s_bReqOpenDockingClamps := FALSE;
s_bReqClosDockingClamps := TRUE;

m_CloseDockingClamps := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_DockBox" Id="{8e382bf6-1d32-4474-a8a5-7c183a3c7036}">
      <Declaration><![CDATA[METHOD PUBLIC m_DockBox : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := TRUE;
s_bReqUndockBox := FALSE;
s_bReqOpenDockingClamps := FALSE;
s_bReqClosDockingClamps := FALSE;

m_DockBox := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{13829dfc-fc98-4f3a-8520-8dee66cb84d9}">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

CASE i_eCtrlMode OF

	E_CtrlMode.IDLE:
		s_cmDockingClamps.m_Stop();
		s_cmUnlockingPins.m_Stop();
		
		s_bReqDockBox := FALSE;
		s_bReqUndockBox := FALSE;
		
	E_CtrlMode.AUTOMATIC:
		
		s_fbSeqDockingInterface(
			i_nSeqStep := s_eSeqDockingInterface, 
			i_sStepName := TO_STRING(s_fbSeqDockingInterface.q_eActState), 
			i_bCmdReset := i_bCmdReset, 
			i_bStaError := s_bStaError);
	
		CASE s_eSeqDockingInterface OF
			
			E_SeqDockingInterface.IDLE:
			
				IF s_bReqDockBox THEN
					//--IF s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed THEN
					IF s_bStaBoxAtPreDockingPosition THEN	
						s_bStaUndockingDone := FALSE;
						s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_CLOSE_CLAMPS;
					ELSE
						s_bWrnNoBoxPresentAtPreDockingPosition := TRUE;	
					END_IF
				END_IF
				
				IF s_bReqUndockBox THEN
					IF s_diStaBoxAtDockedPosition.p_bStaInputDelayed THEN
						s_bStaDockingDone := FALSE;
						s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_LOCK_DOOR;
					ELSE
						s_bWrnNoBoxPresentAtDockedPosition := TRUE;	
					END_IF	
				END_IF
			
				// Seperatly opening/closing the clamps is nessescary to move these out of the way for moving of the outer door
				// Clamps must be closed before the outer door can be moved
				IF s_bReqClosDockingClamps THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.ONLY_CLOSE_CLAMPS;
				END_IF
				
				IF s_bReqOpenDockingClamps THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.ONLY_OPEN_CLAMPS;
				END_IF
				
			E_SeqDockingInterface.DOCKING_CLOSE_CLAMPS:
				
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmDockingClamps.m_Close();
				END_IF
				
				IF s_cmDockingClamps.p_bStaIsClosed THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_UNLOCK_DOOR;
				ELSIF s_cmDockingClamps.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.DOCKING_UNLOCK_DOOR:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmUnlockingPins.m_Unlock();
				END_IF
				
				IF s_cmUnlockingPins.p_bStaIsUnlocked THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_DONE;
				ELSIF s_cmUnlockingPins.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tReleasePinsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.DOCKING_DONE:
				s_bStaDockingDone := TRUE;
				s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
			
			E_SeqDockingInterface.UNDOCKING_LOCK_DOOR:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmUnlockingPins.m_Lock();
				END_IF
				
				IF s_cmUnlockingPins.p_bStaIsLocked THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_OPEN_CLAMPS;
				ELSIF s_cmUnlockingPins.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tReleasePinsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.UNDOCKING_OPEN_CLAMPS:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmDockingClamps.m_Open();
				END_IF
				
				IF s_cmDockingClamps.p_bStaIsOpened THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_DONE;
				ELSIF s_cmDockingClamps.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.UNDOCKING_DONE:
				s_bStaUndockingDone := TRUE;
				s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				
			E_SeqDockingInterface.ONLY_CLOSE_CLAMPS:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN
					s_cmDockingClamps.m_Close();
				END_IF
			
				IF s_cmDockingClamps.p_bStaIsClosed THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.ONLY_OPEN_CLAMPS:	
				
				IF s_fbSeqDockingInterface.q_bStaEntry THEN
					s_cmDockingClamps.m_Open();
				END_IF
			
				IF s_cmDockingClamps.p_bStaIsOpened THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.READY:
				;
			
			E_SeqDockingInterface.ERROR:
				
				IF i_bCmdReset THEN
					//Reset errors (probebly alredy done in the methode devices)
					//--cmValveDockingClampsUpper.i_bCmdReset := TRUE;
				
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				END_IF
				
		END_CASE		
	
		
	E_CtrlMode.MANUAL:
		;
		{warning '#TODO: Add manual control from hmi'}

END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_OpenDockingClamps" Id="{8be47e79-6c29-4713-b252-eb11a6bb46fb}">
      <Declaration><![CDATA[METHOD PUBLIC m_OpenDockingClamps : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := FALSE;
s_bReqUndockBox := FALSE;
s_bReqOpenDockingClamps := TRUE;
s_bReqClosDockingClamps := FALSE;

m_OpenDockingClamps := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_UndockBox" Id="{b328f671-5464-49bf-836c-f1f93f3d32af}">
      <Declaration><![CDATA[METHOD PUBLIC m_UndockBox : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := FALSE;
s_bReqUndockBox := TRUE;
s_bReqOpenDockingClamps := FALSE;
s_bReqClosDockingClamps := FALSE;

m_UndockBox := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bStaBoxAtDockedPosition" Id="{95822bca-1047-492e-8877-1d8528242dc0}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaBoxAtDockedPosition : BOOL]]></Declaration>
      <Get Name="Get" Id="{aa3a83b8-f468-44df-903c-150f557391f1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaBoxAtDockedPosition := s_bStaBoxAtDockedPosition;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaBoxAtPreDockingPosition" Id="{edbe1074-bded-474c-9558-f67f08872474}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaBoxAtPreDockingPosition : BOOL]]></Declaration>
      <Get Name="Get" Id="{cf71d052-481e-48f0-aa51-5a234c033608}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaBoxAtPreDockingPosition := s_bStaBoxAtPreDockingPosition;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingClampsClosed" Id="{de32a338-e965-450c-a404-78adcd65d0d0}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingClampsClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{7682c14a-e4ab-4156-bdf2-ba42269377d9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingClampsClosed := s_bStaDockingClampsClosed; 
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingClampsOpened" Id="{20b689ca-7b07-4e51-a3ea-324f8cec92e0}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingClampsOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{31c09844-15c2-48d5-9a5b-8c43458c7d91}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingClampsOpened := s_bStaDockingClampsOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingDone" Id="{a61394df-c5f0-450a-8cdf-e47379cb8b81}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{e6843217-13bc-4765-b8f6-a237563e9d39}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingDone := s_bStaDockingDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingPositionFree" Id="{1c1bcc1f-d42b-48d2-9743-d0c845e1b595}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingPositionFree : BOOL]]></Declaration>
      <Get Name="Get" Id="{8f44ecfc-2d8a-4e22-a3b9-d3876337bbab}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingPositionFree := s_bStaDockingPositionFree;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaUndockingDone" Id="{bb261a88-cc34-4fd6-bf54-1089f44f9408}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaUndockingDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{44b7df0c-94a7-4b6d-a3a8-e5b8bd6f931a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaUndockingDone := s_bStaUndockingDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="EM_DockingInterface">
      <LineId Id="221" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="222" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Alarms">
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Hmi">
      <LineId Id="222" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="246" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="232" Count="5" />
      <LineId Id="248" Count="0" />
      <LineId Id="239" Count="4" />
      <LineId Id="226" Count="0" />
      <LineId Id="250" Count="1" />
      <LineId Id="249" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Init">
      <LineId Id="203" Count="0" />
      <LineId Id="5" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="241" Count="1" />
      <LineId Id="248" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="239" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="244" Count="2" />
      <LineId Id="222" Count="0" />
      <LineId Id="35" Count="3" />
      <LineId Id="271" Count="2" />
      <LineId Id="269" Count="1" />
      <LineId Id="276" Count="2" />
      <LineId Id="274" Count="1" />
      <LineId Id="280" Count="2" />
      <LineId Id="279" Count="0" />
      <LineId Id="257" Count="1" />
      <LineId Id="286" Count="1" />
      <LineId Id="283" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="289" Count="1" />
      <LineId Id="260" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="294" Count="1" />
      <LineId Id="292" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="298" Count="2" />
      <LineId Id="297" Count="0" />
      <LineId Id="263" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="308" Count="1" />
      <LineId Id="250" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="315" Count="5" />
      <LineId Id="91" Count="2" />
      <LineId Id="97" Count="3" />
      <LineId Id="314" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="1" />
      <LineId Id="323" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Inputs">
      <LineId Id="46" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="56" Count="1" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Modules">
      <LineId Id="156" Count="12" />
      <LineId Id="200" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="169" Count="30" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Outputs">
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface._m_Params">
      <LineId Id="291" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="6" Count="8" />
      <LineId Id="159" Count="3" />
      <LineId Id="35" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="235" Count="7" />
      <LineId Id="40" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="191" Count="2" />
      <LineId Id="190" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="196" Count="2" />
      <LineId Id="195" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="222" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="230" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="256" Count="2" />
      <LineId Id="253" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="261" Count="2" />
      <LineId Id="260" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="266" Count="2" />
      <LineId Id="265" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="271" Count="2" />
      <LineId Id="270" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="210" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="274" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="292" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.m_CloseDockingClamps">
      <LineId Id="4" Count="9" />
      <LineId Id="3" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.m_DockBox">
      <LineId Id="13" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.m_Main">
      <LineId Id="178" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="181" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="333" Count="1" />
      <LineId Id="332" Count="0" />
      <LineId Id="193" Count="1" />
      <LineId Id="235" Count="3" />
      <LineId Id="233" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="242" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="318" Count="1" />
      <LineId Id="317" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="326" Count="2" />
      <LineId Id="324" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="394" Count="1" />
      <LineId Id="392" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="359" Count="4" />
      <LineId Id="223" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="343" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="271" Count="4" />
      <LineId Id="221" Count="1" />
      <LineId Id="211" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="212" Count="1" />
      <LineId Id="310" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="286" Count="1" />
      <LineId Id="349" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="291" Count="4" />
      <LineId Id="225" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="299" Count="1" />
      <LineId Id="352" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="304" Count="4" />
      <LineId Id="227" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="370" Count="3" />
      <LineId Id="368" Count="0" />
      <LineId Id="374" Count="1" />
      <LineId Id="378" Count="1" />
      <LineId Id="377" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="381" Count="8" />
      <LineId Id="380" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="230" Count="1" />
      <LineId Id="218" Count="0" />
      <LineId Id="277" Count="1" />
      <LineId Id="280" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="195" Count="2" />
      <LineId Id="190" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.m_OpenDockingClamps">
      <LineId Id="4" Count="10" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.m_UndockBox">
      <LineId Id="18" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaBoxAtDockedPosition.Get">
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaBoxAtPreDockingPosition.Get">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaDockingClampsClosed.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaDockingClampsOpened.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaDockingDone.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaDockingPositionFree.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_DockingInterface.p_bStaUndockingDone.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>