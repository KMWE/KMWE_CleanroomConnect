<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_PalletConveyor" Id="{53c7f34e-04c1-49dd-bb7e-a79d410146b3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_PalletConveyor EXTENDS EM_Base IMPLEMENTS I_EM_PalletConveyor
VAR CONSTANT 
	c_nResultDataSize : UINT := 20;
END_VAR

VAR_INPUT
//Inputs
	i_stSettings : ST_SettingsPalletConveyor;
	
//??	i_bIlckDockingClampsToClose : BOOL := TRUE; //TRUE = Interlocked
//??	i_bIlckDockingClampsToOpen : BOOL := TRUE; //TRUE = Interlocked
//??	i_bIlckUnlockingPinsToLock : BOOL := TRUE; //TRUE = Interlocked
//??	i_bIlckUnlockingPinsToRelease : BOOL := TRUE; //TRUE = Interlocked

	i_refTB : REFERENCE TO OBJ_Carrier;
	
END_VAR

VAR
//------------------------------------------//
//Control Modules (Devices)
	s_cmPalletConveyor : CM_SEW_WithBrake;
	s_cmCenteringUnit : CM_ValveWithFB; 
	
//------------------------------------------//

//------------------------------------------//
//Inputs
	s_diStaAtInfeedPositionRear : FB_DigInput;
	s_diStaAtInfeedPositionFront : FB_DigInput;
	s_diStaAtCenteringPosition : FB_DigInput;
	s_diStaAtDockingPosition : FB_DigInput;
	s_diStaDoorOpened : FB_DigInput;
		
//------------------------------------------//
	
//------------------------------------------//
//Outputs

//------------------------------------------//

//Requests
//??	s_bReqDockBox : BOOL := FALSE;
//??	s_bReqUndockBox : BOOL := FALSE;
//??	s_bReqOpenDockingClamps : BOOL := FALSE;
//??	s_bReqClosDockingClamps : BOOL := FALSE;
	
//Properties
//??	s_bStaDockingDone : BOOL := FALSE;
//??	s_bStaUndockingDone : BOOL := FALSE;
	
//??	s_bStaDockingClampsClosed : BOOL := FALSE;
//??	s_bStaDockingClampsOpened : BOOL := FALSE;
	
//??	s_bStaBoxAtPreDockingPosition : BOOL := FALSE;
//??	s_bStaBoxAtDockedPosition : BOOL := FALSE;
//??	s_bStaDockingPositionFree : BOOL := FALSE;
	
//Interlockes	
//??	s_bIlckDockingClampsToClose : BOOL;
//??	s_bIlckDockingClampsToOpen : BOOL;
//??	s_bIlckUnlockingPinsToLock : BOOL;
//??	s_bIlckUnlockingPinsToRelease : BOOL;
	
//Alarms

//Warnings
//??	s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition : FB_AlarmHandler;
//??	s_fbAlarmHandlerNoBoxPresentAtDockedPosition : FB_AlarmHandler;

//??	s_bWrnNoBoxPresentAtPreDockingPosition : BOOL;
//??	s_bWrnNoBoxPresentAtDockedPosition : BOOL;
	
//------------------------------------------//
//Params
	//Tool settings
	s_fbParamToolHardwareNr				: FB_HmiParamHandler;
    s_fbParamToolSoftwareVersion		: FB_HmiParamHandler;

	s_fbParamName						: FB_HmiParamHandler;
	s_fbParamNumber						: FB_HmiParamHandler;
	s_fbParamRevision                   : FB_HmiParamHandler;
	
	s_fbParamTeslaMeterIp				: FB_HmiParamHandler;
	s_fbParamTeslaMeterPort				: FB_HmiParamHandler;
	
	//Product settings (Maybe)
	s_fbParamTotalStroke				: FB_HmiParamHandler;
	s_fbParamStepStroke					: FB_HmiParamHandler;
	s_fbParamAveragingNumberTest		: FB_HmiParamHandler;
	
	s_fbParamaMaxMagnitudeCriteria		: FB_HmiParamHandler;
	
	s_fbParamRefIduBottom				: FB_HmiParamHandler;
	s_fbParamRefItm                     : FB_HmiParamHandler;
	s_fbParamRefCenterTpmPipe           : FB_HmiParamHandler;
	s_fbParamRefCpValve					: FB_HmiParamHandler;
//------------------------------------------//

//------------------------------------------//
//Variables
	s_sTestResult 						: STRING;
	
//??	s_eSeqDockingInterface : E_SeqDockingInterface;
//??	s_fbSeqDockingInterface : FB_SeqControl;
	
	//--s_eCurrentTest						: E_TestMode;
//--	s_stCommandsTesla					: ST_SCPI_TeslaCommands;
	
	
	// Interlocks
//??	s_bIlckSpeedDoorOuterToOpen 		: BOOL := TRUE;
//??	s_bIlckSpeedDoorOuterToClose 		: BOOL := TRUE;
	
//??	s_bIlckDoorLockCleanroomToOpen 		: BOOL := TRUE;
	
//------------------------------------------//

//------------------------------------------//
//Sensor data	
//??	s_aMagneticX						: ARRAY[0..c_nResultDataSize] OF LREAL;
//??	s_aMagneticY						: ARRAY[0..c_nResultDataSize] OF LREAL;
//??	s_aMagneticZ						: ARRAY[0..c_nResultDataSize] OF LREAL;
//??	s_aMagneticMagnitude				: ARRAY[0..c_nResultDataSize] OF LREAL;
//??	s_aProbePositionZ					: ARRAY[0..c_nResultDataSize] OF LREAL;
	
//??	s_sXMLData							: STRING(Param_Project.n_MaxLenghtXmlDbRow*Param_Project.n_NumberofRowsXmlDb);
	
//??	s_aHmi_MagneticTest					: ARRAY[1..3,0..c_nResultDataSize] OF ST_POINT;
	
//	s_aHmi_ProbePositionZ				: ARRAY[1..1,1..GVL_Datalogging.c_nHmiLogSize] OF ST_POINT;
//------------------------------------------//

//------------------------------------------//
//Alarms

//------------------------------------------//

//------------------------------------------//
//Hmi
	s_nToHmiStepNr					: INT;
	s_nToHmiMaxStepNr				: INT;
	s_sToHmiInstructionText			: T_MAXSTRING;
	s_sToHmiProcedure				: T_MAXSTRING;
	
	//Buttons
	s_fbHmiBtnManualConveyorStop	: FB_HmiBtn;
	s_fbHmiBtnManualConveyorReleaseBrake	: FB_HmiBtn;
	s_fbHmiBtnManualConveyorApplyBrake	: FB_HmiBtn;
	s_fbHmiBtnManualConveyorForward	: FB_HmiBtn;
	s_fbHmiBtnManualConveyorBackward: FB_HmiBtn;
	s_fbHmiBtnReset					: FB_HmiBtn;
	
	s_fbHmiBtnManualExtractCenterUnit	: FB_HmiBtn;
	s_fbHmiBtnManualRetractCenterUnit	: FB_HmiBtn;
	s_fbHmiBtnManualIdleCenterUnit	: FB_HmiBtn;
	
	//Leds
	s_fbHmiLedBrakeReleased			: FB_HmiLed;
	
	s_fbHmiLedCenterUnitRetracted	: FB_HmiLed;
	s_fbHmiLedCenterUnitExtracted	: FB_HmiLed;
	
//------------------------------------------//
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[


SUPER^();
]]></ST>
    </Implementation>
    <Method Name="_m_Alarms" Id="{aee2feff-cbd9-4478-9815-a567a5153a13}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

// Set error bits

// Create error message for unexpected position detections: 2 TB places, swapped sensors> etc...


// Alarm Handlers
s_fbAlarmHandlerNoBoxPresentAtPreDockingPosition(
	i_bStaActive := s_bWrnNoBoxPresentAtPreDockingPosition, 
	i_eAlarmLevel := E_AlarmLevel.Warning, 
	i_sAlarmText := 'No box present at per-docking position');
	
s_fbAlarmHandlerNoBoxPresentAtDockedPosition(
	i_bStaActive := s_bWrnNoBoxPresentAtDockedPosition, 
	i_eAlarmLevel := E_AlarmLevel.Warning, 
	i_sAlarmText := 'No box present at docked position');

// Reset warnings
IF i_bCmdReset THEN
	s_bWrnNoBoxPresentAtPreDockingPosition := FALSE;
	s_bWrnNoBoxPresentAtDockedPosition := FALSE;
END_IF	
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{afc38d7b-1a6b-4465-996c-ac4ea040e152}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnDock();
s_fbHmiBtnUndock();
s_fbHmiBtnReset();
	
s_fbHmiBtnManualOpenClamps();
s_fbHmiBtnManualCloseClamps();
	
s_fbHmiBtnManualLockPins();
s_fbHmiBtnManualUnlockPins();

//Leds
s_fbHmiLedClampsOpened(i_bStaLed := s_cmDockingClamps.p_bStaIsOpened);
s_fbHmiLedClampsClosed(i_bStaLed := s_cmDockingClamps.p_bStaIsClosed);
	
s_fbHmiLedPinsLocked(i_bStaLed := s_cmUnlockingPins.p_bStaIsLocked);
s_fbHmiLedPinsUnloacked(i_bStaLed := s_cmUnlockingPins.p_bStaIsUnlocked);

s_fbHmiLedBoxAtPreDockPosition(i_bStaLed := s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed);
s_fbHmiLedBoxAtDockedPosition(i_bStaLed := s_diStaBoxAtDockedPosition.p_bStaInputDelayed);

_m_Hmi := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{a6194918-083d-460c-8c8c-f7fff673bb61}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Control Modules
s_cmPalletConveyor.i_bReqEnable := FALSE;
s_cmPalletConveyor.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmPalletConveyor.i_sCmName := 'Pallet Conveyor';
s_cmPalletConveyor.i_stSettings.tResetPulseDuration := T#1S;
s_cmPalletConveyor.i_stSettings.tBrakeReleasedDelay := T#600MS;
s_cmPalletConveyor.i_stSettings.tMotorStoppedDelay := T#3S;
s_cmPalletConveyor.i_stSettings.rMaxTargetSpeed := 200.0; // mm/s
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}

s_cmCenteringUnit.i_bReqEnable := FALSE;
s_cmCenteringUnit.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmCenteringUnit.i_sCmName := 'Centering Unit';
s_cmCenteringUnit.i_stSettings.tValveOnTimeout := T#5S;
s_cmCenteringUnit.i_stSettings.tValveOffTimeout := T#5S;
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}
s_cmCenteringUnit.p_bCfgBiStableValve := FALSE;
s_cmCenteringUnit.p_bCfgReverseValve := FALSE;

s_diStaAtInfeedPositionRear.i_stSettings.tmInputDelay := T#100MS;
s_diStaAtInfeedPositionFront.i_stSettings.tmInputDelay := T#100MS;
s_diStaAtCenteringPosition.i_stSettings.tmInputDelay := T#100MS;
s_diStaAtDockingPosition.i_stSettings.tmInputDelay := T#100MS;
s_diStaDoorOpened.i_stSettings.tmInputDelay := T#100MS;

//---------------------------------//	
	
//----------------------------------//	
//Hmi 
	s_fbHmiBtnDock.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnDock.p_bStaVisible := FALSE;
	s_fbHmiBtnDock.p_bStaEnabled := FALSE;		
	s_fbHmiBtnDock.p_sBtnText := 'Start Docking';
	
	s_fbHmiBtnUndock.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnUndock.p_bStaVisible := FALSE;
	s_fbHmiBtnUndock.p_bStaEnabled := FALSE;		
	s_fbHmiBtnUndock.p_sBtnText := 'Start Un-Docking';
	
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	s_fbHmiBtnManualOpenClamps.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualOpenClamps.p_bStaVisible := FALSE;
	s_fbHmiBtnManualOpenClamps.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualOpenClamps.p_sBtnText := 'Open Clamps';
	
	s_fbHmiBtnManualCloseClamps.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualCloseClamps.p_bStaVisible := FALSE;
	s_fbHmiBtnManualCloseClamps.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualCloseClamps.p_sBtnText := 'Close Clamps';
	
	s_fbHmiBtnManualLockPins.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualLockPins.p_bStaVisible := FALSE;
	s_fbHmiBtnManualLockPins.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualLockPins.p_sBtnText := 'Lock Pins';
	
	s_fbHmiBtnManualUnlockPins.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnManualUnlockPins.p_bStaVisible := FALSE;
	s_fbHmiBtnManualUnlockPins.p_bStaEnabled := FALSE;		
	s_fbHmiBtnManualUnlockPins.p_sBtnText := 'Unlock Pins';
	
	s_fbHmiLedClampsOpened.p_bStaVisible := FALSE;
	s_fbHmiLedClampsOpened.p_sToHmiDescriptionLed := 'Clamps Opened';
		
	s_fbHmiLedClampsClosed.p_bStaVisible := FALSE;
	s_fbHmiLedClampsClosed.p_sToHmiDescriptionLed := 'Clamps Closed';
	
	s_fbHmiLedPinsLocked.p_bStaVisible := FALSE;
	s_fbHmiLedPinsLocked.p_sToHmiDescriptionLed := 'Pins Locked';
	
	s_fbHmiLedPinsUnloacked.p_bStaVisible := FALSE;
	s_fbHmiLedPinsUnloacked.p_sToHmiDescriptionLed := 'Pins Unlocked';
	
	s_fbHmiLedBoxAtPreDockPosition.p_bStaVisible := FALSE;
	s_fbHmiLedBoxAtPreDockPosition.p_sToHmiDescriptionLed := 'Box At Pre Docking Position';
	
	s_fbHmiLedBoxAtDockedPosition.p_bStaVisible := FALSE;
	s_fbHmiLedBoxAtDockedPosition.p_sToHmiDescriptionLed := 'Box At Docked Position';

//----------------------------------//	
//Initialize all moving averages

//----------------------------------//	

//----------------------------------//	

//Inputs
s_diStaBoxAtPreDockingPosition.i_stSettings.tmInputDelay := T#3S;
s_diStaBoxAtDockedPosition.i_stSettings.tmInputDelay := T#3S;
//----------------------------------//	

//----------------------------------//	
//Outputs
//--s_doRelayTableDown.i_stSettings.bCfgDelay		:= FALSE;	
//--s_doRelayTableDown.i_stSettings.tmOutputDelay	:= T#0S;	
//----------------------------------//	

_m_Init := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{6338a124-287d-498f-bd5c-dc8edaa7899d}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

//Interlocks
s_bIlckDockingClampsToClose := i_bIlckDockingClampsToClose;
s_bIlckDockingClampsToOpen := i_bIlckDockingClampsToOpen;
s_bIlckUnlockingPinsToLock := i_bIlckUnlockingPinsToLock;
s_bIlckUnlockingPinsToRelease := i_bIlckUnlockingPinsToRelease;

s_diStaBoxAtPreDockingPosition();
s_diStaBoxAtDockedPosition();

s_bStaBoxAtPreDockingPosition := s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed AND NOT(s_diStaBoxAtDockedPosition.p_bStaInputDelayed);
s_bStaBoxAtDockedPosition := s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed AND s_diStaBoxAtDockedPosition.p_bStaInputDelayed;
s_bStaDockingPositionFree := NOT(s_bStaBoxAtPreDockingPosition) AND NOT(s_bStaBoxAtDockedPosition);

_m_Inputs := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Modules" Id="{72f3cdd7-58c3-44c6-9f8f-bde48a5098a2}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Modules : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF


s_cmPalletConveyor(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset);

s_cmCenteringUnit(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset);
	
s_diStaAtInfeedPositionRear();
s_diStaAtInfeedPositionFront();
s_diStaAtCenteringPosition();
s_diStaAtDockingPosition();
s_diStaDoorOpened();	
	
	
s_bStaDockingClampsClosed := s_cmDockingClamps.p_bStaIsClosed;
s_bStaDockingClampsOpened := s_cmDockingClamps.p_bStaIsOpened;
	
s_cmUnlockingPins(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset);
	//--i_sCmName := 'Unloading Pins');
	
(*	
	// Interlocks (doors must work as an airlock, only one door may be opened at all times)
	s_bIlckSpeedDoorOuterToOpen :=
		s_cmDoorLockCleanroom.p_bStaError
		OR NOT(s_cmDoorLockCleanroom.p_bStaEnabled)
		NOT(s_cmDoorLockCleanroom.p_bStaDoorIsClosed)
		OR NOT (s_cmDoorLockCleanroom.p_bStaLockIsApplied)
		OR s_cmDoorLockCleanroom.p_bStaLockIsReleased
		OR TRUE (*Air treathment unit must be running and ok*)
		OR TRUE (*Add more..*);
	s_bIlckSpeedDoorOuterToClose :=
		TRUE (*Opening must be free*)
		OR TRUE (*Add more..*);
	
	s_bIlckDoorLockCleanroomToOpen :=
		s_cmSpeedDoorOuter.p_bStaError
		OR NOT(s_cmSpeedDoorOuter.p_bStaEnabled)
		OR NOT(s_cmSpeedDoorOuter.p_bStaIsClosed)
		OR s_cmSpeedDoorOuter.p_bStaIsClosing
		OR s_cmSpeedDoorOuter.p_bStaIsOpened
		OR s_cmSpeedDoorOuter.p_bStaIsOpening
		OR TRUE (*Air treathment unit must be running and ok*)
		OR TRUE (*Add more..*);
*)	
_m_Modules := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{dde91033-d57b-467b-929e-41cce55dae6e}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

_m_Outputs := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Params" Id="{b7688a2b-8ea9-42be-9d82-c5b14e9212e5}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Params : BOOL
VAR_INST
	s_fToHmiXAxisMin	: LREAL;
	s_fToHmiXAxisMax	: LREAL;
	s_fToHmiYAxisMin	: LREAL;
	s_fToHmiYAxisMax	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Params() THEN
	RETURN;
END_IF

s_fbParamToolHardwareNr(i_fDefaultValue				:= 0,
						i_nArrayFolderIndex			:= 1,
						i_sName						:= 'Harware ID',
						i_bIsNumber					:= FALSE);

s_fbParamToolSoftwareVersion(i_fDefaultValue		:= 0,
							i_nArrayFolderIndex		:= 1,
							i_sName					:= 'Software Version',
							i_bIsNumber				:= FALSE);

s_fbParamName(i_fDefaultValue						:= 0,
				i_nArrayFolderIndex					:= 1,
				i_sName								:= 'Description',
				i_bIsNumber							:= FALSE);
							
s_fbParamTeslaMeterIp(i_fDefaultValue			:= 0,
						i_nArrayFolderIndex		:= 1,
						i_sName					:= 'Tesla meter ip adress',
						i_bIsNumber				:= FALSE);
						
s_fbParamTeslaMeterPort(i_fDefaultValue			:= 0,
						i_nArrayFolderIndex		:= 1,
						i_sName					:= 'Tesla meter port number',
						i_bIsNumber				:= TRUE);

//---------

						
s_fbParamTotalStroke(i_fDefaultValue			:= 100,
						i_nArrayFolderIndex		:= 2,
						i_sName					:= 'Total measurement stroke',
						i_bIsNumber				:= TRUE);
						
s_fbParamStepStroke(i_fDefaultValue				:= 10,
						i_nArrayFolderIndex		:= 2,
						i_sName					:= 'Step distance per measurement',
						i_bIsNumber				:= TRUE);

s_fbParamAveragingNumberTest(i_fDefaultValue		:= 10,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Number of measurements per step for averaging the magnetic field',
							i_bIsNumber				:= TRUE);
							
s_fbParamaMaxMagnitudeCriteria(i_fDefaultValue		:= 100,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Maximum allowed magnitude magnetic field (Test)',
							i_bIsNumber				:= TRUE);

s_fbParamRefIduBottom(i_fDefaultValue				:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to lower IDU Bottom',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefItm(i_fDefaultValue						:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position Itm lower IDU / upper IDU',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefCenterTpmPipe(i_fDefaultValue			:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to centre TPM pipe',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefCpValve(i_fDefaultValue		:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to bottom C/P valve',
							i_bIsNumber				:= TRUE);				

GVL_DataLogging.g_stReportData.CabinetSerialNumber      := s_fbParamToolHardwareNr.p_sValue;
GVL_DataLogging.g_stReportData.TesterSoftwareVersion    := s_fbParamToolSoftwareVersion.p_sValue;
GVL_DataLogging.g_stReportData.Operator                 := GVL.g_sUser;
GVL_DataLogging.g_stReportData.Note						:= GVL.g_sNotesEntry;
//GVL_DataLogging.g_stReportData.Message can be filled in test procedure with for example the error if test is stopped
GVL_DataLogging.g_stReportData.SerialNumber             := GVL.g_sSerialNumber;

s_fToHmiXAxisMin	:= -2*s_fbParamaMaxMagnitudeCriteria.p_fValue;
s_fToHmiXAxisMax	:= 2*s_fbParamaMaxMagnitudeCriteria.p_fValue;
s_fToHmiYAxisMin	:= s_CmProbeMotor.p_fHomePosition;
s_fToHmiYAxisMax	:= s_fbParamRefCpValve.p_fValue*1.2;

_m_Params := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_CloseDockingClamps" Id="{d5f8c393-7f08-4f48-a1ae-aa39eb87698a}">
      <Declaration><![CDATA[METHOD PUBLIC m_CloseDockingClamps : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := FALSE;
s_bReqUndockBox := FALSE;
s_bReqOpenDockingClamps := FALSE;
s_bReqClosDockingClamps := TRUE;

m_CloseDockingClamps := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_DockBox" Id="{756726d7-4a1f-46eb-806b-f0f5d2ce1cf2}">
      <Declaration><![CDATA[METHOD PUBLIC m_DockBox : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := TRUE;
s_bReqUndockBox := FALSE;
s_bReqOpenDockingClamps := FALSE;
s_bReqClosDockingClamps := FALSE;

m_DockBox := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{aa6670a8-50a5-40e7-bcf1-bbb60244f9de}">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

// Pallet Conveyor
IF i_refTB.p_eLocation = E_Location.INFEED
	AND i_refTB.p_eDestination > E_Location.INFEED
	THEN
	
	s_cmPalletConveyor.m_ReleaseBrake(TRUE);

	IF s_cmPalletConveyor.p_bStaBrakeReleased THEN
		s_cmPalletConveyor.m_StartForward(i_stSettings.rSpeedGoToCentering);
	END_IF
	
END_IF

CASE i_refTB.p_eLocation OF
	E_Location.INFEED :

	E_Location.ALLIGNMENT :

	E_Location.DOCKING :	
		
		IF i_refTB.p_eDestination < E_Location.DOCKING 
			AND NOT(i_refTB.Docked)
			THEN
			 s_cmPalletConveyor.m_StartBackward(i_stSettings.rSpeedReturnToInfeed);
		END_IF

END_CASE


// Centering
IF i_refTB.p_eLocation = E_Location.ALLIGNMENT
	AND s_diStaAtCenteringPosition.p_bStaInputDelayed
	AND NOT(i_refTB.p_bAlligned)
	THEN
		s_cmCenteringUnit.m_On();
		
		IF s_cmCenteringUnit.p_bStaIsOn THEN
			i_refTB.p_bAlligned := TRUE;
		END_IF
ELSE
	s_cmCenteringUnit.m_Off();
END_IF




CASE i_eCtrlMode OF

	E_CtrlMode.IDLE:
		s_cmDockingClamps.m_Stop();
		s_cmUnlockingPins.m_Stop();
		
		s_bReqDockBox := FALSE;
		s_bReqUndockBox := FALSE;
		
	E_CtrlMode.AUTOMATIC:
		
		s_fbSeqDockingInterface(
			i_nSeqStep := s_eSeqDockingInterface, 
			i_sStepName := TO_STRING(s_fbSeqDockingInterface.q_eActState), 
			i_bCmdReset := i_bCmdReset, 
			i_bStaError := s_bStaError);
	
		CASE s_eSeqDockingInterface OF
			
			E_SeqDockingInterface.IDLE:
			
				IF s_bReqDockBox THEN
					//--IF s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed THEN
					IF s_bStaBoxAtPreDockingPosition THEN	
						s_bStaUndockingDone := FALSE;
						s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_CLOSE_CLAMPS;
					ELSE
						s_bWrnNoBoxPresentAtPreDockingPosition := TRUE;	
					END_IF
				END_IF
				
				IF s_bReqUndockBox THEN
					IF s_diStaBoxAtDockedPosition.p_bStaInputDelayed THEN
						s_bStaDockingDone := FALSE;
						s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_LOCK_DOOR;
					ELSE
						s_bWrnNoBoxPresentAtDockedPosition := TRUE;	
					END_IF	
				END_IF
			
				// Seperatly opening/closing the clamps is nessescary to move these out of the way for moving of the outer door
				// Clamps must be closed before the outer door can be moved
				IF s_bReqClosDockingClamps THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.ONLY_CLOSE_CLAMPS;
				END_IF
				
				IF s_bReqOpenDockingClamps THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.ONLY_OPEN_CLAMPS;
				END_IF
				
			E_SeqDockingInterface.DOCKING_CLOSE_CLAMPS:
				
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmDockingClamps.m_Close();
				END_IF
				
				IF s_cmDockingClamps.p_bStaIsClosed THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_UNLOCK_DOOR;
				ELSIF s_cmDockingClamps.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.DOCKING_UNLOCK_DOOR:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmUnlockingPins.m_Unlock();
				END_IF
				
				IF s_cmUnlockingPins.p_bStaIsUnlocked THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_DONE;
				ELSIF s_cmUnlockingPins.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tReleasePinsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.DOCKING_DONE:
				s_bStaDockingDone := TRUE;
				s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
			
			E_SeqDockingInterface.UNDOCKING_LOCK_DOOR:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmUnlockingPins.m_Lock();
				END_IF
				
				IF s_cmUnlockingPins.p_bStaIsLocked THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_OPEN_CLAMPS;
				ELSIF s_cmUnlockingPins.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tReleasePinsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.UNDOCKING_OPEN_CLAMPS:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmDockingClamps.m_Open();
				END_IF
				
				IF s_cmDockingClamps.p_bStaIsOpened THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_DONE;
				ELSIF s_cmDockingClamps.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.UNDOCKING_DONE:
				s_bStaUndockingDone := TRUE;
				s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				
			E_SeqDockingInterface.ONLY_CLOSE_CLAMPS:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN
					s_cmDockingClamps.m_Close();
				END_IF
			
				IF s_cmDockingClamps.p_bStaIsClosed THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.ONLY_OPEN_CLAMPS:	
				
				IF s_fbSeqDockingInterface.q_bStaEntry THEN
					s_cmDockingClamps.m_Open();
				END_IF
			
				IF s_cmDockingClamps.p_bStaIsOpened THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.READY:
				;
			
			E_SeqDockingInterface.ERROR:
				
				IF i_bCmdReset THEN
					//Reset errors (probebly alredy done in the methode devices)
					//--cmValveDockingClampsUpper.i_bCmdReset := TRUE;
				
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				END_IF
				
		END_CASE		
	
		
	E_CtrlMode.MANUAL:
		;
		{warning '#TODO: Add manual control from hmi'}

END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_OpenDockingClamps" Id="{fdbc4c86-9963-45ec-8883-8d52d85dfe4c}">
      <Declaration><![CDATA[METHOD PUBLIC m_OpenDockingClamps : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := FALSE;
s_bReqUndockBox := FALSE;
s_bReqOpenDockingClamps := TRUE;
s_bReqClosDockingClamps := FALSE;

m_OpenDockingClamps := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_UndockBox" Id="{87a273ce-924f-4f5a-87e9-ca76e4b519fd}">
      <Declaration><![CDATA[METHOD PUBLIC m_UndockBox : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT i_bReqEnable THEN 
	RETURN;
END_IF

s_bReqDockBox := FALSE;
s_bReqUndockBox := TRUE;
s_bReqOpenDockingClamps := FALSE;
s_bReqClosDockingClamps := FALSE;

m_UndockBox := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bStaBoxAtDockedPosition" Id="{15c657ec-976f-406a-af61-b74a1bc4da62}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaBoxAtDockedPosition : BOOL]]></Declaration>
      <Get Name="Get" Id="{85ddebd8-bb8c-4495-b028-3fffc96ce272}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaBoxAtDockedPosition := s_bStaBoxAtDockedPosition;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaBoxAtPreDockingPosition" Id="{5cf86758-94a7-4c83-8655-89df68776a6a}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaBoxAtPreDockingPosition : BOOL]]></Declaration>
      <Get Name="Get" Id="{390e3a8f-be51-4ead-b7d1-b375781ae098}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaBoxAtPreDockingPosition := s_bStaBoxAtPreDockingPosition;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingClampsClosed" Id="{aeec2c84-5a33-42bf-8206-358bf0e881f7}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingClampsClosed : BOOL]]></Declaration>
      <Get Name="Get" Id="{f6a5df60-e1c4-43aa-ad06-c40db7782890}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingClampsClosed := s_bStaDockingClampsClosed; 
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingClampsOpened" Id="{326ed6bf-3886-45dd-9f57-ea2919c9ffcb}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingClampsOpened : BOOL]]></Declaration>
      <Get Name="Get" Id="{411149f2-11dd-4d52-acbb-b2029ab5c78e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingClampsOpened := s_bStaDockingClampsOpened;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingDone" Id="{5b03a1fd-28fa-4e4c-8b16-120ff29fbe65}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{ea2f8f74-0ea7-460e-89df-2b5449737ea6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingDone := s_bStaDockingDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaDockingPositionFree" Id="{2bc723ff-f9a5-42af-b160-e4dc5b057a50}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaDockingPositionFree : BOOL]]></Declaration>
      <Get Name="Get" Id="{c30a314b-9757-4d3b-8e4f-ac9f4438d705}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaDockingPositionFree := s_bStaDockingPositionFree;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStaUndockingDone" Id="{78b40d33-5413-4f7d-b0d7-9c166ca5f648}">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStaUndockingDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{ed85bc2c-166d-4354-8f24-cb6305b95ef7}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStaUndockingDone := s_bStaUndockingDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="EM_PalletConveyor">
      <LineId Id="567" Count="1" />
      <LineId Id="221" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="222" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Alarms">
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="38" Count="2" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Hmi">
      <LineId Id="222" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="246" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="232" Count="5" />
      <LineId Id="248" Count="0" />
      <LineId Id="239" Count="4" />
      <LineId Id="226" Count="0" />
      <LineId Id="250" Count="1" />
      <LineId Id="249" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Init">
      <LineId Id="203" Count="0" />
      <LineId Id="5" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="327" Count="1" />
      <LineId Id="342" Count="0" />
      <LineId Id="331" Count="3" />
      <LineId Id="343" Count="0" />
      <LineId Id="335" Count="2" />
      <LineId Id="341" Count="0" />
      <LineId Id="339" Count="1" />
      <LineId Id="353" Count="1" />
      <LineId Id="344" Count="0" />
      <LineId Id="348" Count="3" />
      <LineId Id="346" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="35" Count="3" />
      <LineId Id="271" Count="2" />
      <LineId Id="269" Count="1" />
      <LineId Id="276" Count="2" />
      <LineId Id="274" Count="1" />
      <LineId Id="280" Count="2" />
      <LineId Id="279" Count="0" />
      <LineId Id="257" Count="1" />
      <LineId Id="286" Count="1" />
      <LineId Id="283" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="289" Count="1" />
      <LineId Id="260" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="294" Count="1" />
      <LineId Id="292" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="298" Count="2" />
      <LineId Id="297" Count="0" />
      <LineId Id="263" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="308" Count="1" />
      <LineId Id="250" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="315" Count="5" />
      <LineId Id="91" Count="2" />
      <LineId Id="97" Count="3" />
      <LineId Id="314" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="1" />
      <LineId Id="323" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Inputs">
      <LineId Id="46" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="56" Count="1" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Modules">
      <LineId Id="156" Count="3" />
      <LineId Id="205" Count="5" />
      <LineId Id="212" Count="2" />
      <LineId Id="162" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="217" Count="3" />
      <LineId Id="215" Count="1" />
      <LineId Id="200" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="169" Count="30" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Outputs">
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Params">
      <LineId Id="291" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="6" Count="8" />
      <LineId Id="159" Count="3" />
      <LineId Id="35" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="235" Count="7" />
      <LineId Id="40" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="191" Count="2" />
      <LineId Id="190" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="196" Count="2" />
      <LineId Id="195" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="222" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="230" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="256" Count="2" />
      <LineId Id="253" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="261" Count="2" />
      <LineId Id="260" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="266" Count="2" />
      <LineId Id="265" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="271" Count="2" />
      <LineId Id="270" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="210" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="274" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="292" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.m_CloseDockingClamps">
      <LineId Id="4" Count="9" />
      <LineId Id="3" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.m_DockBox">
      <LineId Id="13" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.m_Main">
      <LineId Id="178" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="433" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="413" Count="1" />
      <LineId Id="412" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="434" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="444" Count="0" />
      <LineId Id="447" Count="1" />
      <LineId Id="445" Count="1" />
      <LineId Id="438" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="435" Count="0" />
      <LineId Id="416" Count="1" />
      <LineId Id="419" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="429" Count="3" />
      <LineId Id="424" Count="1" />
      <LineId Id="423" Count="0" />
      <LineId Id="427" Count="1" />
      <LineId Id="404" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="333" Count="1" />
      <LineId Id="332" Count="0" />
      <LineId Id="193" Count="1" />
      <LineId Id="235" Count="3" />
      <LineId Id="233" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="242" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="318" Count="1" />
      <LineId Id="317" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="326" Count="2" />
      <LineId Id="324" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="394" Count="1" />
      <LineId Id="392" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="359" Count="4" />
      <LineId Id="223" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="343" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="271" Count="4" />
      <LineId Id="221" Count="1" />
      <LineId Id="211" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="212" Count="1" />
      <LineId Id="310" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="286" Count="1" />
      <LineId Id="349" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="291" Count="4" />
      <LineId Id="225" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="299" Count="1" />
      <LineId Id="352" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="304" Count="4" />
      <LineId Id="227" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="370" Count="3" />
      <LineId Id="368" Count="0" />
      <LineId Id="374" Count="1" />
      <LineId Id="378" Count="1" />
      <LineId Id="377" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="381" Count="8" />
      <LineId Id="380" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="230" Count="1" />
      <LineId Id="218" Count="0" />
      <LineId Id="277" Count="1" />
      <LineId Id="280" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="195" Count="2" />
      <LineId Id="190" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.m_OpenDockingClamps">
      <LineId Id="4" Count="10" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.m_UndockBox">
      <LineId Id="18" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.p_bStaBoxAtDockedPosition.Get">
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.p_bStaBoxAtPreDockingPosition.Get">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.p_bStaDockingClampsClosed.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.p_bStaDockingClampsOpened.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.p_bStaDockingDone.Get">
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.p_bStaDockingPositionFree.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.p_bStaUndockingDone.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>