<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_PalletConveyor" Id="{53c7f34e-04c1-49dd-bb7e-a79d410146b3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_PalletConveyor EXTENDS EM_Base IMPLEMENTS I_EM_PalletConveyor

VAR_INPUT
//Inputs
	i_stSettings : ST_SettingsPalletConveyor;
	
	i_refTB : REFERENCE TO OBJ_Carrier;
	
	
END_VAR

VAR
//------------------------------------------//
//Control Modules (Devices)
	s_cmPalletConveyor : CM_SEW_WithBrake;
	s_cmCentringUnit : CM_ValveWithDoubleFB; 
	
//------------------------------------------//

//------------------------------------------//
//Inputs
	s_diStaAtInfeedPositionRear : FB_DigInput;
	s_diStaAtInfeedPositionFront : FB_DigInput;
	s_diStaAtCentringPosition : FB_DigInput;
	s_diStaAtDockingPosition : FB_DigInput;
	s_diStaDoorOpened : FB_DigInput;
//------------------------------------------//
	
//------------------------------------------//
//Outputs

//------------------------------------------//

//Requests

//States
s_bStaBrakeReleased : BOOL := FALSE;
s_bStaDriveError : BOOL := FALSE;

s_bStaAtInfeedRearPosition : BOOL := FALSE;
s_bStaAtInfeedFrontPosition : BOOL := FALSE;
s_bStaAtCentringPosition : BOOL := FALSE;
s_bStaAtDockingPosition : BOOL := FALSE;
s_bStaDoorOpened : BOOL := FALSE;

s_bStaCentringCenter : BOOL := FALSE;
s_bStaCentringIdle : BOOL := FALSE;

//Properties
	
//Interlockes	
	s_bIlckConveyorForward : BOOL := TRUE;
	s_bIlckConveyorBackward : BOOL := TRUE;
	s_bIlckCentringToCenter : BOOL := TRUE;
	s_bIlckCentringToRest : BOOL := TRUE;
	
//Alarms
	s_sReason : STRING;
	
	s_fbAlarmHandlerTravelTimeOut : FB_AlarmHandler;
	s_bWrnOuterDoorNotOpened : BOOL;
	
//Warnings
	s_fbAlarmHandlerOuterDoorNotOpened : FB_AlarmHandler;
	s_bErrTravelTimeOut : BOOL;
	
//------------------------------------------//
//Params
//--	//Tool settings
//--	s_fbParamToolHardwareNr				: FB_HmiParamHandler;
//--    s_fbParamToolSoftwareVersion		: FB_HmiParamHandler;

//--	s_fbParamName						: FB_HmiParamHandler;
//--	s_fbParamNumber						: FB_HmiParamHandler;
//--	s_fbParamRevision                   : FB_HmiParamHandler;
	
//--	s_fbParamTeslaMeterIp				: FB_HmiParamHandler;
//--	s_fbParamTeslaMeterPort				: FB_HmiParamHandler;
	
//--	//Product settings (Maybe)
//--	s_fbParamTotalStroke				: FB_HmiParamHandler;
//--	s_fbParamStepStroke					: FB_HmiParamHandler;
//--	s_fbParamAveragingNumberTest		: FB_HmiParamHandler;
	
//--	s_fbParamaMaxMagnitudeCriteria		: FB_HmiParamHandler;
	
//--	s_fbParamRefIduBottom				: FB_HmiParamHandler;
//--	s_fbParamRefItm                     : FB_HmiParamHandler;
//--	s_fbParamRefCenterTpmPipe           : FB_HmiParamHandler;
//--	s_fbParamRefCpValve					: FB_HmiParamHandler;
//------------------------------------------//

//------------------------------------------//
//Variables
//--	s_sTestResult 						: STRING;
	
//------------------------------------------//

//------------------------------------------//
//Alarms
	

//------------------------------------------//

//------------------------------------------//

//Sequencers
	eSeqTransport : E_SeqTransport;
	fbSeqTransportControl : FB_SeqControl;

	tMaxTravelTime : TIME;
	tDoorCheckTime : TIME;
	bDoorCheckTimeDisabled : BOOL := FALSE;
	
	eSeqCentring : E_SeqCentring;
	fbSeqCentringControl : FB_SeqControl;

//Hmi
	s_nToHmiStepNr					: INT;
	s_nToHmiMaxStepNr				: INT;
	s_sToHmiInstructionText			: T_MAXSTRING;
	s_sToHmiProcedure				: T_MAXSTRING;
	
	//Buttons
	s_fbHmiBtnTB_ToInfeed				: FB_HmiBtn;
	s_fbHmiBtnTB_ToCentring				: FB_HmiBtn;
	s_fbHmiBtnTB_ToDocking				: FB_HmiBtn;
	
	s_fbHmiBtnTB_Centring				: FB_HmiBtn;
	
	//Leds
	s_fbHmiLedInfeedRearPosition		: FB_HmiLed;
	s_fbHmiLedInfeedFrontPosition		: FB_HmiLed;
	s_fbHmiLedCentringPosition			: FB_HmiLed;
	s_fbHmiLedDockingPosition			: FB_HmiLed;
	s_fbHmiLedDoorOpened				: FB_HmiLed;
	
	s_fbHmiLedCentringIdle				: FB_HmiLed;
	s_fbHmiLedCentringCenter			: FB_HmiLed;
	
	fTestReal : LREAL;
//------------------------------------------//
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[


SUPER^();
]]></ST>
    </Implementation>
    <Method Name="_m_Alarms" Id="{aee2feff-cbd9-4478-9815-a567a5153a13}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

// Alarm Handlers
s_fbAlarmHandlerTravelTimeOut(
	i_bStaActive := s_bErrTravelTimeOut, 
	i_eAlarmLevel := E_AlarmLevel.Alarm, 
	i_sAlarmText := CONCAT('Travel timeout: ', s_sReason));
	
s_fbAlarmHandlerOuterDoorNotOpened(
	i_bStaActive := s_bWrnOuterDoorNotOpened, 
	i_eAlarmLevel := E_AlarmLevel.Warning, 
	i_sAlarmText := 'Outer-door open not detected');

// Reset warnings
IF i_bCmdReset THEN
	s_bErrTravelTimeOut := FALSE;
	s_bWrnOuterDoorNotOpened := FALSE;
END_IF	
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{a5afe549-ba9e-46b9-b9ab-569cdd3f8cbd}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

s_cmPalletConveyor(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset,
	i_bIclkForward := NOT(s_bStaCentringIdle), // TRUE = Interlocked - if centring not at idle/rest position
	i_bIclkBackward := TRUE); // TRUE = Interlocked - if TB is docked (external interface)

s_bStaBrakeReleased := s_cmPalletConveyor.p_bStaBrakeReleased;
s_bStaDriveError := s_cmPalletConveyor.p_bStaError; 
	
s_cmCentringUnit(
	i_bReqEnable := i_bReqEnable,
	i_eCtrlMode := i_eCtrlMode,
	i_bCmdReset := i_bCmdReset);
	
s_bStaCentringCenter := s_cmCentringUnit.p_bStaIsOn; 
s_bStaCentringIdle := s_cmCentringUnit.p_bStaIsOff;
	
s_diStaAtInfeedPositionRear();
s_diStaAtInfeedPositionFront();
s_diStaAtCentringPosition();
s_diStaAtDockingPosition();
s_diStaDoorOpened();	

s_bStaAtInfeedRearPosition := s_diStaAtInfeedPositionRear.p_bStaInputDelayed;
s_bStaAtInfeedFrontPosition := s_diStaAtInfeedPositionFront.p_bStaInputDelayed;
s_bStaAtCentringPosition := s_diStaAtCentringPosition.p_bStaInputDelayed;
s_bStaAtDockingPosition := s_diStaAtDockingPosition.p_bStaInputDelayed;
s_bStaDoorOpened := s_diStaDoorOpened.p_bStaInputDelayed ;
	
_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{afc38d7b-1a6b-4465-996c-ac4ea040e152}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnTB_ToInfeed();
s_fbHmiBtnTB_ToCentring();
s_fbHmiBtnTB_ToDocking();
s_fbHmiBtnTB_Centring();

//Leds
s_fbHmiLedInfeedRearPosition(i_bStaLed := s_bStaAtInfeedRearPosition);
s_fbHmiLedInfeedFrontPosition(i_bStaLed := s_bStaAtInfeedFrontPosition);
s_fbHmiLedCentringPosition(i_bStaLed := s_bStaAtCentringPosition);
s_fbHmiLedDockingPosition(i_bStaLed := s_bStaAtDockingPosition);
s_fbHmiLedDoorOpened(i_bStaLed := s_bStaDoorOpened);

s_fbHmiLedCentringCenter(i_bStaLed := s_bStaCentringCenter);
s_fbHmiLedCentringIdle(i_bStaLed := s_bStaCentringIdle);

_m_Hmi := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{a6194918-083d-460c-8c8c-f7fff673bb61}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Control Modules
s_cmPalletConveyor.i_bReqEnable := FALSE;
s_cmPalletConveyor.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmPalletConveyor.i_sCmName := 'Pallet Conveyor';
s_cmPalletConveyor.i_stSettings.tResetPulseDuration := T#1S;
s_cmPalletConveyor.i_stSettings.tBrakeReleasedDelay := T#600MS;
s_cmPalletConveyor.i_stSettings.tMotorStoppedDelay := T#3S;
s_cmPalletConveyor.i_stSettings.rMaxTargetSpeed := 200.0; // mm/s
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}

s_cmCentringUnit.i_bReqEnable := FALSE;
s_cmCentringUnit.i_eCtrlMode := E_CtrlMode.IDLE;
s_cmCentringUnit.i_sCmName := 'Centering Unit';
s_cmCentringUnit.i_stSettings.tValveOnTimeout := T#5S;
s_cmCentringUnit.i_stSettings.tValveOffTimeout := T#5S;
{warning '#TODO: Dot we need to added configuration parameters? Seperate struct or via settings or dedicateed variables'}
s_cmCentringUnit.p_bCfgBiStableValve := FALSE;
s_cmCentringUnit.p_bCfgReverseValve := FALSE;

s_diStaAtInfeedPositionRear.i_stSettings.tmInputDelay := T#100MS;
s_diStaAtInfeedPositionFront.i_stSettings.tmInputDelay := T#100MS;
s_diStaAtCentringPosition.i_stSettings.tmInputDelay := T#100MS;
s_diStaAtDockingPosition.i_stSettings.tmInputDelay := T#100MS;
s_diStaDoorOpened.i_stSettings.tmInputDelay := T#100MS;

//---------------------------------//	
	
//----------------------------------//	
//Hmi 
	s_fbHmiBtnTB_ToInfeed.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnTB_ToInfeed.p_bStaVisible := FALSE;
	s_fbHmiBtnTB_ToInfeed.p_bStaEnabled := FALSE;		
	s_fbHmiBtnTB_ToInfeed.p_sBtnText := 'TB To Infeed Position';
	
	s_fbHmiBtnTB_ToCentring.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnTB_ToCentring.p_bStaVisible := FALSE;
	s_fbHmiBtnTB_ToCentring.p_bStaEnabled := FALSE;		
	s_fbHmiBtnTB_ToCentring.p_sBtnText := 'TB To Centring Position';
	
	s_fbHmiBtnTB_ToInfeed.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnTB_ToInfeed.p_bStaVisible := FALSE;
	s_fbHmiBtnTB_ToInfeed.p_bStaEnabled := FALSE;		
	s_fbHmiBtnTB_ToInfeed.p_sBtnText := 'TB To Docking Position';
	
	s_fbHmiBtnTB_Centring.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnTB_Centring.p_bStaVisible := FALSE;
	s_fbHmiBtnTB_Centring.p_bStaEnabled := FALSE;		
	s_fbHmiBtnTB_Centring.p_sBtnText := 'TB To Centring Position';

	s_fbHmiLedInfeedRearPosition.p_bStaVisible := FALSE;
	s_fbHmiLedInfeedRearPosition.p_sToHmiDescriptionLed := 'Infeed Rear Position';
	
	s_fbHmiLedInfeedFrontPosition.p_bStaVisible := FALSE;
	s_fbHmiLedInfeedFrontPosition.p_sToHmiDescriptionLed := 'Infeed Front Position';
	
	s_fbHmiLedCentringPosition.p_bStaVisible := FALSE;
	s_fbHmiLedCentringPosition.p_sToHmiDescriptionLed := 'Centre Position';
	
	s_fbHmiLedDockingPosition.p_bStaVisible := FALSE;
	s_fbHmiLedDockingPosition.p_sToHmiDescriptionLed := 'Docking Position';
	
	s_fbHmiLedDoorOpened.p_bStaVisible := FALSE;
	s_fbHmiLedDoorOpened.p_sToHmiDescriptionLed := 'Door Opened';
	
	s_fbHmiLedCentringIdle.p_bStaVisible := FALSE;
	s_fbHmiLedCentringIdle.p_sToHmiDescriptionLed := 'Centring Idle';
	
	s_fbHmiLedCentringCenter.p_bStaVisible := FALSE;
	s_fbHmiLedCentringCenter.p_sToHmiDescriptionLed := 'Centring Center';
	
//----------------------------------//	
//Initialize all moving averages

//----------------------------------//	

//----------------------------------//	

//Inputs
//----------------------------------//	

//----------------------------------//	
//Outputs
//--s_doRelayTableDown.i_stSettings.bCfgDelay		:= FALSE;	
//--s_doRelayTableDown.i_stSettings.tmOutputDelay	:= T#0S;	
//----------------------------------//	

_m_Init := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{6338a124-287d-498f-bd5c-dc8edaa7899d}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

//Interlocks
//??s_bIlckDockingClampsToClose := i_bIlckDockingClampsToClose;
//??s_bIlckDockingClampsToOpen := i_bIlckDockingClampsToOpen;
//??s_bIlckUnlockingPinsToLock := i_bIlckUnlockingPinsToLock;
//??s_bIlckUnlockingPinsToRelease := i_bIlckUnlockingPinsToRelease;

//??s_diStaBoxAtPreDockingPosition();
//??s_diStaBoxAtDockedPosition();

//??s_bStaBoxAtPreDockingPosition := s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed AND NOT(s_diStaBoxAtDockedPosition.p_bStaInputDelayed);
//??s_bStaBoxAtDockedPosition := s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed AND s_diStaBoxAtDockedPosition.p_bStaInputDelayed;
//??s_bStaDockingPositionFree := NOT(s_bStaBoxAtPreDockingPosition) AND NOT(s_bStaBoxAtDockedPosition);

_m_Inputs := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{dde91033-d57b-467b-929e-41cce55dae6e}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

_m_Outputs := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Params" Id="{b7688a2b-8ea9-42be-9d82-c5b14e9212e5}">
      <Declaration><![CDATA[METHOD PROTECTED _m_Params : BOOL
VAR_INST
	s_fToHmiXAxisMin	: LREAL;
	s_fToHmiXAxisMax	: LREAL;
	s_fToHmiYAxisMin	: LREAL;
	s_fToHmiYAxisMax	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Params() THEN
	RETURN;
END_IF

s_fbParamToolHardwareNr(i_fDefaultValue				:= 0,
						i_nArrayFolderIndex			:= 1,
						i_sName						:= 'Harware ID',
						i_bIsNumber					:= FALSE);

s_fbParamToolSoftwareVersion(i_fDefaultValue		:= 0,
							i_nArrayFolderIndex		:= 1,
							i_sName					:= 'Software Version',
							i_bIsNumber				:= FALSE);

s_fbParamName(i_fDefaultValue						:= 0,
				i_nArrayFolderIndex					:= 1,
				i_sName								:= 'Description',
				i_bIsNumber							:= FALSE);
							
s_fbParamTeslaMeterIp(i_fDefaultValue			:= 0,
						i_nArrayFolderIndex		:= 1,
						i_sName					:= 'Tesla meter ip adress',
						i_bIsNumber				:= FALSE);
						
s_fbParamTeslaMeterPort(i_fDefaultValue			:= 0,
						i_nArrayFolderIndex		:= 1,
						i_sName					:= 'Tesla meter port number',
						i_bIsNumber				:= TRUE);

//---------

						
s_fbParamTotalStroke(i_fDefaultValue			:= 100,
						i_nArrayFolderIndex		:= 2,
						i_sName					:= 'Total measurement stroke',
						i_bIsNumber				:= TRUE);
						
s_fbParamStepStroke(i_fDefaultValue				:= 10,
						i_nArrayFolderIndex		:= 2,
						i_sName					:= 'Step distance per measurement',
						i_bIsNumber				:= TRUE);

s_fbParamAveragingNumberTest(i_fDefaultValue		:= 10,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Number of measurements per step for averaging the magnetic field',
							i_bIsNumber				:= TRUE);
							
s_fbParamaMaxMagnitudeCriteria(i_fDefaultValue		:= 100,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Maximum allowed magnitude magnetic field (Test)',
							i_bIsNumber				:= TRUE);

s_fbParamRefIduBottom(i_fDefaultValue				:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to lower IDU Bottom',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefItm(i_fDefaultValue						:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position Itm lower IDU / upper IDU',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefCenterTpmPipe(i_fDefaultValue			:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to centre TPM pipe',
							i_bIsNumber				:= TRUE);
							
s_fbParamRefCpValve(i_fDefaultValue		:= 0,
							i_nArrayFolderIndex		:= 2,
							i_sName					:= 'Distance from home position to bottom C/P valve',
							i_bIsNumber				:= TRUE);				

GVL_DataLogging.g_stReportData.CabinetSerialNumber      := s_fbParamToolHardwareNr.p_sValue;
GVL_DataLogging.g_stReportData.TesterSoftwareVersion    := s_fbParamToolSoftwareVersion.p_sValue;
GVL_DataLogging.g_stReportData.Operator                 := GVL.g_sUser;
GVL_DataLogging.g_stReportData.Note						:= GVL.g_sNotesEntry;
//GVL_DataLogging.g_stReportData.Message can be filled in test procedure with for example the error if test is stopped
GVL_DataLogging.g_stReportData.SerialNumber             := GVL.g_sSerialNumber;

s_fToHmiXAxisMin	:= -2*s_fbParamaMaxMagnitudeCriteria.p_fValue;
s_fToHmiXAxisMax	:= 2*s_fbParamaMaxMagnitudeCriteria.p_fValue;
s_fToHmiYAxisMin	:= s_CmProbeMotor.p_fHomePosition;
s_fToHmiYAxisMax	:= s_fbParamRefCpValve.p_fValue*1.2;

_m_Params := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_SeqCentring" Id="{9ea29294-eb8f-4625-80fc-76ae8a3e8898}">
      <Declaration><![CDATA[METHOD PRIVATE _m_SeqCentring : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[s_fbHmiBtnTB_Centring.p_bStaVisible := TRUE;
s_fbHmiBtnTB_Centring.p_bStaEnabled := TRUE;

fbSeqCentringControl(
	i_nSeqStep := eSeqCentring, 
	i_sStepName := TO_STRING(eSeqCentring), 
	i_bCmdReset := i_bCmdReset, 
	i_bStaError := s_bStaError);

//Probebly not necessary, this will be done with fb_SeqControl	
//--//Exception handler
//--IF eSeqCentring <> E_SeqCentring.IDLE 
//--	AND eSeqCentring <> E_SeqCentring.ERROR THEN
//--	eSeqCentring := E_SeqCentring.ERROR;
//--END_IF
	
CASE eSeqCentring OF
	
	E_SeqCentring.IDLE:
	
		IF fbSeqCentringControl.q_bStaEntry THEN
			eSeqCentring := E_SeqCentring.MOVE_TO_REST;
		END_IF
	
		//--IF s_cmCentringUnit.p_bStaIsOff THEN
		//--	eSeqCentring := E_SeqCentring.AT_REST;
		//--ELSIF s_cmCentringUnit.p_bStaIsOn THEN
		//--	eSeqCentring := E_SeqCentring.AT_CENTER;
		//--ELSIF s_fbHmiBtnTB_Centring.p_osrBtnPress THEN
		//--	eSeqCentring := E_SeqCentring.MOVE_TO_CENTER;	
		//--END_IF
	
	E_SeqCentring.START:
		IF fbSeqCentringControl.q_bStaEntry THEN
			eSeqCentring := E_SeqCentring.MOVE_TO_REST;
		END_IF
		
	E_SeqCentring.MOVE_TO_REST:
		IF fbSeqCentringControl.q_bStaEntry THEN
			s_cmCentringUnit.m_Off();
		END_IF
		
		IF s_cmCentringUnit.p_bStaIsOff THEN
			eSeqCentring := E_SeqCentring.AT_REST;
		END_IF
	
	E_SeqCentring.AT_REST:
		IF s_fbHmiBtnTB_Centring.p_osrBtnPress THEN
			eSeqCentring := E_SeqCentring.MOVE_TO_CENTER;
		END_IF
	
	E_SeqCentring.MOVE_TO_CENTER:
		IF fbSeqCentringControl.q_bStaEntry THEN
			s_cmCentringUnit.m_On();
		END_IF
		
		IF s_cmCentringUnit.p_bStaIsOn THEN
			eSeqCentring := E_SeqCentring.AT_CENTER;
		END_IF
	
	E_SeqCentring.AT_CENTER:
		IF fbSeqCentringControl.q_tmStepTime > i_stSettings.tCentringDuration THEN
			eSeqCentring := E_SeqCentring.MOVE_TO_REST;
		END_IF
	
	E_SeqCentring.READY:
		;
		
	E_SeqCentring.ERROR:
		;
	
	//--E_SeqCentring.ERROR:
	//--	IF fbSeqCentringControl.q_bStaEntry THEN
	//--		//no action
	//--	END_IF
		
	//--	IF i_bCmdReset THEN
	//--		eSeqCentring := E_SeqCentring.IDLE;
	//--	END_IF

END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_SeqTransport" Id="{7bf2ff54-007b-4f2a-966d-421cf756f1be}">
      <Declaration><![CDATA[METHOD PRIVATE _m_SeqTransport : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//tMaxTravelTime := LREAL_TO_TIME(fTestReal);

s_fbHmiBtnTB_ToInfeed.p_bStaVisible := TRUE;
s_fbHmiBtnTB_ToInfeed.p_bStaEnabled := TRUE;

s_fbHmiBtnTB_ToCentring.p_bStaVisible := TRUE;
s_fbHmiBtnTB_ToCentring.p_bStaEnabled := TRUE;

s_fbHmiBtnTB_ToDocking.p_bStaVisible := TRUE;
s_fbHmiBtnTB_ToDocking.p_bStaEnabled := TRUE;

fbSeqTransportControl(
	i_nSeqStep := eSeqTransport, 
	i_sStepName := TO_STRING(eSeqTransport), 
	i_bCmdReset := i_bCmdReset, 
	i_bStaError := s_bStaError);

//Probebly not necessary, this will be done with fb_SeqControl
//--//Exception handler
//--IF eSeqTransport <> E_SeqTransport.IDLE 
//--	AND eSeqTransport <> E_SeqTransport.ERROR THEN
//--	eSeqTransport := E_SeqTransport.ERROR;
//--END_IF

CASE eSeqTransport OF
	
	E_SeqTransport.IDLE:
		eSeqTransport := E_SeqTransport.START;
		
	E_SeqTransport.START:
		IF s_fbHmiBtnTB_ToInfeed.p_osrBtnPress THEN
			eSeqTransport := E_SeqTransport.TB_TO_INFEED;
		ELSIF s_fbHmiBtnTB_ToCentring.p_osrBtnPress THEN
			
			IF s_bStaDoorOpened THEN
				eSeqTransport := E_SeqTransport.TB_TO_CENTRING;
			ELSE
				s_bWrnOuterDoorNotOpened := TRUE;
			END_IF	
			
		ELSIF s_fbHmiBtnTB_ToDocking.p_osrBtnPress THEN
			eSeqTransport := E_SeqTransport.TB_TO_DOCKING;
		END_IF
	
	E_SeqTransport.TB_TO_INFEED:
		IF fbSeqTransportControl.q_bStaEntry THEN		
			tMaxTravelTime := LREAL_TO_TIME((i_stSettings.fDistanceToInfeed / i_stSettings.fSpeedGoToInfeed) * i_stSettings.fTravelTollerance * 1000);
			s_cmPalletConveyor.m_StartBackward(i_rTargetSpeed := i_stSettings.fSpeedGoToInfeed);
		END_IF
		
		IF s_bStaAtInfeedRearPosition THEN
			eSeqTransport := E_SeqTransport.STOP;
		ELSIF fbSeqTransportControl.q_tmStepTime > tMaxTravelTime THEN
			s_bErrTravelTimeOut := TRUE;
			s_sReason := 'Moving to infeed';
			eSeqTransport := E_SeqTransport.ERROR;
		END_IF
	
	E_SeqTransport.TB_TO_CENTRING:
		IF fbSeqTransportControl.q_bStaEntry THEN
			tMaxTravelTime := LREAL_TO_TIME((i_stSettings.fDistanceToCentring / i_stSettings.fSpeedGoToCentering) * i_stSettings.fTravelTollerance * 1000);
			tDoorCheckTime := LREAL_TO_TIME((i_stSettings.fDistanceOuteDoorCheck / i_stSettings.fSpeedGoToCentering) * 1000);
			s_cmPalletConveyor.m_StartForward(i_rTargetSpeed := i_stSettings.fSpeedGoToCentering);
		END_IF
		
		IF s_bStaAtCentringPosition THEN
			bDoorCheckTimeDisabled := FALSE;
			eSeqTransport := E_SeqTransport.STOP;
		
		ELSIF fbSeqTransportControl.q_tmStepTime < tDoorCheckTime 
			AND NOT(s_bStaDoorOpened) THEN
			s_bWrnOuterDoorNotOpened := TRUE;
			bDoorCheckTimeDisabled := TRUE; //Disable error after first occurance (to prevent invalid retriggering at reties)
			eSeqTransport := E_SeqTransport.ERROR;
			
		ELSIF fbSeqTransportControl.q_tmStepTime > tMaxTravelTime THEN
			s_bErrTravelTimeOut := TRUE;
			s_sReason := 'Moving to centring';
			eSeqTransport := E_SeqTransport.ERROR;		
		END_IF
	
	E_SeqTransport.TB_TO_DOCKING:
		IF fbSeqTransportControl.q_bStaEntry THEN
			tMaxTravelTime := LREAL_TO_TIME((i_stSettings.fDistanceToDocking / i_stSettings.fSpeedGoToDocking) * i_stSettings.fTravelTollerance * 1000);
			s_cmPalletConveyor.m_StartForward(i_rTargetSpeed := i_stSettings.fSpeedGoToDocking);
		END_IF
		
		IF s_bStaAtDockingPosition THEN
			eSeqTransport := E_SeqTransport.STOP;
		ELSIF fbSeqTransportControl.q_tmStepTime > tMaxTravelTime THEN
			s_bErrTravelTimeOut := TRUE;
			s_sReason := 'Moving to docking';
			eSeqTransport := E_SeqTransport.ERROR;		
		END_IF
		
	E_SeqTransport.STOP:
		IF fbSeqTransportControl.q_bStaEntry THEN
			s_cmPalletConveyor.m_Stop();
		END_IF
		
		IF s_cmPalletConveyor.p_bStaMotorStopped THEN
			eSeqTransport := E_SeqTransport.IDLE;
		END_IF
		
	E_SeqTransport.READY:
		;
	
	E_SeqTransport.ERROR:
		s_cmPalletConveyor.m_Stop();	
		
	//--E_SeqTransport.ERROR:
	//--	IF fbSeqTransportControl.q_bStaEntry THEN
	//--		s_cmPalletConveyor.m_Stop();
	//--	END_IF
		
	//--	IF i_bCmdReset THEN
	//--		eSeqTransport := E_SeqTransport.IDLE;
	//--	END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_Main" Id="{aa6670a8-50a5-40e7-bcf1-bbb60244f9de}">
      <Declaration><![CDATA[METHOD PUBLIC m_Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT SUPER^.m_Main() THEN
	RETURN;
END_IF

// Pallet Conveyor
//??IF i_refTB.p_eLocation = E_Location.INFEED
//??	AND i_refTB.p_eDestination > E_Location.INFEED
//??	THEN
	
//??	s_cmPalletConveyor.m_ReleaseBrake(TRUE);

//??	IF s_cmPalletConveyor.p_bStaBrakeReleased THEN
//??		s_cmPalletConveyor.m_StartForward(i_stSettings.rSpeedGoToCentering);
//??	END_IF
	
//??END_IF

//??CASE i_refTB.p_eLocation OF
//??	E_Location.INFEED :

//??	E_Location.CENTRING :

//??	E_Location.DOCKING :	
		
//??		IF i_refTB.p_eDestination < E_Location.DOCKING 
//??			AND NOT(i_refTB. Docked)
//??			THEN
//??			 s_cmPalletConveyor.m_StartBackward(i_stSettings.rSpeedReturnToInfeed);
//??		END_IF

//??END_CASE


// Centering
//??IF i_refTB.p_eLocation = E_Location.CENTRING
//??	AND s_diStaAtCentringPosition.p_bStaInputDelayed
//??	AND NOT(i_refTB.p_bAlligned)
//??	THEN
//??		s_cmCentringUnit.m_On();
		
//??		IF s_cmCentringUnit.p_bStaIsOn THEN
//??			i_refTB.p_bAlligned := TRUE;
//??		END_IF
//??ELSE
//??	s_cmCentringUnit.m_Off();
//??END_IF

CASE i_eCtrlMode OF

	E_CtrlMode.IDLE:
	
		eSeqCentring := E_SeqCentring.IDLE;
		
	E_CtrlMode.AUTOMATIC:
	
		//Pallet Conveyor
		_m_SeqTransport();
		
		//Pallet Centring
		_m_SeqCentring();
		
	
				
	

	
(*		s_fbSeqDockingInterface(
			i_nSeqStep := s_eSeqDockingInterface, 
			i_sStepName := TO_STRING(s_fbSeqDockingInterface.q_eActState), 
			i_bCmdReset := i_bCmdReset, 
			i_bStaError := s_bStaError);
	
		CASE s_eSeqDockingInterface OF
			
			E_SeqDockingInterface.IDLE:
			
				IF s_bReqDockBox THEN
					//--IF s_diStaBoxAtPreDockingPosition.p_bStaInputDelayed THEN
					IF s_bStaBoxAtPreDockingPosition THEN	
						s_bStaUndockingDone := FALSE;
						s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_CLOSE_CLAMPS;
					ELSE
						s_bWrnNoBoxPresentAtPreDockingPosition := TRUE;	
					END_IF
				END_IF
				
				IF s_bReqUndockBox THEN
					IF s_diStaBoxAtDockedPosition.p_bStaInputDelayed THEN
						s_bStaDockingDone := FALSE;
						s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_LOCK_DOOR;
					ELSE
						s_bWrnNoBoxPresentAtDockedPosition := TRUE;	
					END_IF	
				END_IF
			
				// Seperatly opening/closing the clamps is nessescary to move these out of the way for moving of the outer door
				// Clamps must be closed before the outer door can be moved
				IF s_bReqClosDockingClamps THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.ONLY_CLOSE_CLAMPS;
				END_IF
				
				IF s_bReqOpenDockingClamps THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.ONLY_OPEN_CLAMPS;
				END_IF
				
			E_SeqDockingInterface.DOCKING_CLOSE_CLAMPS:
				
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmDockingClamps.m_Close();
				END_IF
				
				IF s_cmDockingClamps.p_bStaIsClosed THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_UNLOCK_DOOR;
				ELSIF s_cmDockingClamps.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.DOCKING_UNLOCK_DOOR:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmUnlockingPins.m_Unlock();
				END_IF
				
				IF s_cmUnlockingPins.p_bStaIsUnlocked THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.DOCKING_DONE;
				ELSIF s_cmUnlockingPins.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tReleasePinsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.DOCKING_DONE:
				s_bStaDockingDone := TRUE;
				s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
			
			E_SeqDockingInterface.UNDOCKING_LOCK_DOOR:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmUnlockingPins.m_Lock();
				END_IF
				
				IF s_cmUnlockingPins.p_bStaIsLocked THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_OPEN_CLAMPS;
				ELSIF s_cmUnlockingPins.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tReleasePinsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.UNDOCKING_OPEN_CLAMPS:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN 
					s_cmDockingClamps.m_Open();
				END_IF
				
				IF s_cmDockingClamps.p_bStaIsOpened THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.UNDOCKING_DONE;
				ELSIF s_cmDockingClamps.p_bStaError THEN 
					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.UNDOCKING_DONE:
				s_bStaUndockingDone := TRUE;
				s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				
			E_SeqDockingInterface.ONLY_CLOSE_CLAMPS:
			
				IF s_fbSeqDockingInterface.q_bStaEntry THEN
					s_cmDockingClamps.m_Close();
				END_IF
			
				IF s_cmDockingClamps.p_bStaIsClosed THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
			
			E_SeqDockingInterface.ONLY_OPEN_CLAMPS:	
				
				IF s_fbSeqDockingInterface.q_bStaEntry THEN
					s_cmDockingClamps.m_Open();
				END_IF
			
				IF s_cmDockingClamps.p_bStaIsOpened THEN
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				ELSIF (s_fbSeqDockingInterface.q_tmStepTime >= i_stSettings.tClampsTimeout) THEN
 					s_eSeqDockingInterface := E_SeqDockingInterface.ERROR;
					// write down some info?
				END_IF
				
			E_SeqDockingInterface.READY:
				;
			
			E_SeqDockingInterface.ERROR:
				
				IF i_bCmdReset THEN
					//Reset errors (probebly alredy done in the methode devices)
					//--cmValveDockingClampsUpper.i_bCmdReset := TRUE;
				
					s_eSeqDockingInterface := E_SeqDockingInterface.IDLE;
				END_IF
				
		END_CASE		
*)	
		
	E_CtrlMode.MANUAL:
		;
	
		// Manual control placed inside the lower layer control modles
	
		{warning '#TODO: Add manual control from hmi'}
		//Is het de bedoeling om op deze plekken de hmi knoppen aan te sturen, OF moet dat gedaan worden in METHOD hmi?		
(*		s_fbHmiBtnManualConveyorApplyBrake.p_bStaVisible := TRUE;
		s_fbHmiBtnManualConveyorApplyBrake.p_bStaEnabled := s_cmPalletConveyor.p_bStaMotorStopped;
	
		s_fbHmiBtnManualConveyorReleaseBrake.p_bStaVisible := TRUE;
		s_fbHmiBtnManualConveyorReleaseBrake.p_bStaEnabled := s_cmPalletConveyor.p_bStaMotorStopped;
		
		s_fbHmiBtnManualConveyorStop.p_bStaVisible := TRUE;
		s_fbHmiBtnManualConveyorStop.p_bStaEnabled := TRUE;
	
		s_fbHmiBtnManualConveyorForward.p_bStaVisible := TRUE;
		s_fbHmiBtnManualConveyorForward.p_bStaEnabled := s_cmPalletConveyor.p_bStaMotorStopped;
	
		s_fbHmiBtnManualConveyorBackward.p_bStaVisible := TRUE;
		s_fbHmiBtnManualConveyorBackward.p_bStaEnabled := s_cmPalletConveyor.p_bStaMotorStopped;
		
		IF s_fbHmiBtnManualConveyorApplyBrake.p_osrBtnPress THEN
			s_cmPalletConveyor.m_ReleaseBrake(i_bValue := FALSE);
		END_IF
		
		IF s_fbHmiBtnManualConveyorReleaseBrake.p_osrBtnPress THEN
			s_cmPalletConveyor.m_ReleaseBrake(i_bValue := TRUE);
		END_IF
	
		IF s_fbHmiBtnReset.p_osrBtnPress THEN
			s_cmPalletConveyor.m_Reset();
		END_IF
			
		IF s_fbHmiBtnManualConveyorStop.p_osrBtnPress THEN
			s_cmPalletConveyor.m_Stop();	
		ELSIF s_fbHmiBtnManualConveyorForward.p_osrBtnPress THEN
			s_cmPalletConveyor.m_StartForward(i_rTargetSpeed := i_stSettings.rSpeedManual);
		ELSIF s_fbHmiBtnManualConveyorBackward.p_osrBtnPress THEN
			s_cmPalletConveyor.m_StartBackward(i_rTargetSpeed := i_stSettings.rSpeedManual);
		END_IF
*)		
END_CASE

m_Main := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="EM_PalletConveyor">
      <LineId Id="567" Count="1" />
      <LineId Id="221" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="222" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Alarms">
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="45" Count="2" />
      <LineId Id="44" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Devices">
      <LineId Id="41" Count="0" />
      <LineId Id="6" Count="7" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="14" Count="9" />
      <LineId Id="25" Count="0" />
      <LineId Id="27" Count="13" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Hmi">
      <LineId Id="222" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="246" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="248" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="271" Count="4" />
      <LineId Id="278" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Init">
      <LineId Id="203" Count="0" />
      <LineId Id="5" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="327" Count="1" />
      <LineId Id="342" Count="0" />
      <LineId Id="331" Count="3" />
      <LineId Id="343" Count="0" />
      <LineId Id="335" Count="2" />
      <LineId Id="341" Count="0" />
      <LineId Id="339" Count="1" />
      <LineId Id="353" Count="1" />
      <LineId Id="344" Count="0" />
      <LineId Id="348" Count="3" />
      <LineId Id="346" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="35" Count="3" />
      <LineId Id="396" Count="2" />
      <LineId Id="395" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="400" Count="2" />
      <LineId Id="399" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="404" Count="2" />
      <LineId Id="403" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="408" Count="2" />
      <LineId Id="407" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="424" Count="1" />
      <LineId Id="415" Count="0" />
      <LineId Id="426" Count="1" />
      <LineId Id="416" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="429" Count="2" />
      <LineId Id="445" Count="0" />
      <LineId Id="444" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="97" Count="3" />
      <LineId Id="314" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="1" />
      <LineId Id="323" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Inputs">
      <LineId Id="46" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="56" Count="1" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Outputs">
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_Params">
      <LineId Id="291" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="6" Count="8" />
      <LineId Id="159" Count="3" />
      <LineId Id="35" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="235" Count="7" />
      <LineId Id="40" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="191" Count="2" />
      <LineId Id="190" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="196" Count="2" />
      <LineId Id="195" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="222" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="230" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="256" Count="2" />
      <LineId Id="253" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="261" Count="2" />
      <LineId Id="260" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="266" Count="2" />
      <LineId Id="265" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="271" Count="2" />
      <LineId Id="270" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="210" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="274" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="292" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_SeqCentring">
      <LineId Id="8" Count="7" />
      <LineId Id="92" Count="0" />
      <LineId Id="16" Count="10" />
      <LineId Id="82" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="86" Count="5" />
      <LineId Id="33" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="75" Count="6" />
      <LineId Id="74" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="35" Count="17" />
      <LineId Id="62" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="63" Count="8" />
      <LineId Id="5" Count="0" />
      <LineId Id="72" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor._m_SeqTransport">
      <LineId Id="140" Count="1" />
      <LineId Id="110" Count="1" />
      <LineId Id="108" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="6" Count="5" />
      <LineId Id="139" Count="0" />
      <LineId Id="12" Count="9" />
      <LineId Id="23" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="120" Count="12" />
      <LineId Id="119" Count="0" />
      <LineId Id="29" Count="17" />
      <LineId Id="99" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="106" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="52" Count="28" />
      <LineId Id="133" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="81" Count="7" />
      <LineId Id="5" Count="0" />
      <LineId Id="89" Count="0" />
    </LineIds>
    <LineIds Name="EM_PalletConveyor.m_Main">
      <LineId Id="2483" Count="54" />
      <LineId Id="2892" Count="0" />
      <LineId Id="2538" Count="0" />
      <LineId Id="2890" Count="0" />
      <LineId Id="2893" Count="0" />
      <LineId Id="2891" Count="0" />
      <LineId Id="2539" Count="1" />
      <LineId Id="2623" Count="1" />
      <LineId Id="2690" Count="156" />
      <LineId Id="2895" Count="0" />
      <LineId Id="2894" Count="0" />
      <LineId Id="2850" Count="39" />
      <LineId Id="179" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>