<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CM_AX5000" Id="{29dfdbae-f16d-497a-b262-2baea4701d77}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CM_AX5000 EXTENDS CM_Base IMPLEMENTS I_AX5000
VAR_INPUT
	i_refAxis : REFERENCE TO Tc2_MC2.AXIS_REF;
	i_mcHomingMode : Tc2_MC2.MC_HomingMode := Tc2_MC2.MC_HomingMode.MC_Direct;
	i_bIclkForward : BOOL := TRUE; //TRUE = interlocked
	i_bIclkBackward : BOOL := TRUE; //TRUE = interlocked
	
	i_ref_setting : REFERENCE TO ST_SpeedProfile;
	
	i_ref_eCtrlState : REFERENCE TO E_CtrlState;
END_VAR

VAR
	fbPower : Tc2_MC2.MC_Power;
	fbReset : Tc2_MC2.MC_Reset;
	fbHome : Tc2_MC2.MC_Home;
	fbJog : Tc2_MC2.MC_Jog;
	fbMoveVelocity : Tc2_MC2.MC_MoveVelocity;
	fbMoveAbsolute : Tc2_MC2.MC_MoveAbsolute;
	fbMoveRelative : Tc2_MC2.MC_MoveRelative;
	fbStop : Tc2_MC2.MC_Stop;
	fbWriteParamter : Tc2_MC2.MC_WriteParameter;

	s_bSetPoweOn : BOOL;
	s_fSetTargetPosition : LREAL;
	
	// Inputs
	I_bDetReferenceSwitch AT %I* : BOOL; //Reference-/home switch
	I_bDetLimitSwitchPositive AT %I* : BOOL; //Limit switch positive-/CW- direction
	I_bDetLimitSwitchNegative AT %I* : BOOL; //Limit switch negative-/CCW- direction
	
	//Properties
	s_bStatus : BOOL;
	s_bDone : BOOL; 
	s_bBusy : BOOL; 
	s_bActive : BOOL; 
	s_bCommandAborted : BOOL;
	s_bInVelocity : BOOL; 
	s_bError : BOOL; 
	s_nErrorID : UDINT;
	
	// Requests
	{warning '#TODO: Chcek / update during develiping'}
	s_bReqStop : BOOL;
	s_bReqStartForward : BOOL;
	s_bReqStartBackward : BOOL;
	s_bReqReset : BOOL;
	
	// Commands
	s_bCmdEnable : BOOL;
	s_bCmdReset : BOOL;
	s_bCmdForward : BOOL;
	s_bCmdBackward : BOOL;
	s_bCmdReleaseBrake : BOOL;
		
	// States
	s_bStaReferenceSwitch : BOOL;
	s_bStaLimitSwitchPositive : BOOL;
	s_bStaLimitSwitchNegative : BOOL;
	
	s_bStaEnabledControl : BOOL;
	s_bStaEnabledForward : BOOL;
	s_bStaEnabledBackward : BOOL;
	s_bStaReady : BOOL;
	s_bStaHomed : BOOL;
	s_bStaStandstill : BOOL;
	s_bStaMoving : BOOL;
	s_bStaAtPosition : BOOL;
	s_bStaDriveError : BOOL;
	s_bStaWarning : BOOL;
	
	s_bIclkForward : BOOL;
	s_bIclkBackward : BOOL;
	s_sInterlockedReasonForward : STRING; //External interlocked reason for clarifying reason
	s_sInterlockedReasonBackward : STRING; //External interlocked reason for clarifying reason
	
	// Setpoints
	s_fTargetSpeed : LREAL; // Target speed [mm/s]
	
	// Timers
	
	// Alarms
	s_fbAlarmHandlerDriveError : FB_AlarmHandler;
	s_fbAlarmHandlerStartMotorNotAllowed : FB_AlarmHandler;
	s_fbAlarmHandlerMotorForwardInterlocked : FB_AlarmHandler;
	s_fbAlarmHandlerMotorBackwardInterlocked : FB_AlarmHandler;
	
	s_errDriveError : BOOL;
	s_wrnStartMotorNotAllowed : BOOL;
	s_wrnMotorForwardInterlocked : BOOL;
	s_wrnMotorBackwardInterlocked : BOOL;
	
	//Hmi
	s_fbHmiBtnHome : FB_HmiBtn;
	s_fbHmiBtnJogPos : FB_HmiBtn;
	s_fbHmiBtnJogNeg : FB_HmiBtn;
	s_fbHmiBtnMoveAbs : FB_HmiBtn;
	s_fbHmiBtnPower	: FB_HmiBtn;
	s_fbHmiBtnReset	: FB_HmiBtn;
	s_fbHmiBtnStop: FB_HmiBtn;
	
	s_fbHmiLedEnabledControl : FB_HmiLed;
	s_fbHmiLedEnabledForward : FB_HmiLed;
	s_fbHmiLedEnabledBackward : FB_HmiLed;
	s_fbHmiLedReady : FB_HmiLed;
	s_fbHmiLedHomed : FB_HmiLed;
	s_fbHmiLedStandstill : FB_HmiLed;
	s_fbHmiLedMoving : FB_HmiLed;
	s_fbHmiLedAtPosition : FB_HmiLed;
	s_fbHmiLedDriveError : FB_HmiLed;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
SUPER^();

]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{c7dc02dc-f2cb-44e5-89eb-2e4085b6a909}" />
    <Folder Name="Properties" Id="{c3e008a7-9dfe-49e0-9cc5-18c79327535a}" />
    <Method Name="_m_Alarms" Id="{c522f959-6f84-4a96-b11e-07b34d6dcd1a}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Alarms : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Alarms() THEN
	RETURN;
END_IF

// Set error bits
s_errDriveError := i_bReqEnable AND s_bStaDriveError;// AND NOT(i_bCmdReset);

// Interlock warnings
IF s_bIclkForward AND NOT(s_bStaMotorStopped) THEN	
	s_wrnMotorForwardInterlocked := TRUE;
	m_Stop();
ELSIF NOT(s_bIclkForward) OR i_bCmdReset THEN
	s_wrnMotorForwardInterlocked := FALSE;
END_IF

IF s_bIclkBackward AND NOT(s_bStaMotorStopped) THEN
	s_wrnMotorBackwardInterlocked := TRUE;
	m_Stop();
ELSIF NOT(s_bIclkBackward) OR i_bCmdReset THEN
	s_wrnMotorBackwardInterlocked := FALSE;
END_IF

// Alarm Handlers
s_fbAlarmHandlerDriveError(
	i_bStaActive := s_errDriveError,
	i_eAlarmLevel := E_AlarmLevel.Alarm,
	i_sAlarmText := CONCAT(i_sCmName, ': Drive - has error (check drive).'));
	
s_fbAlarmHandlerApplyingBrakeNotAllowed(
	i_bStaActive := s_wrnApplyingBrakeNotAllowed,
	i_eAlarmLevel := E_AlarmLevel.Warning,
	i_sAlarmText := CONCAT(i_sCmName, ': Brake - not allowed to be applied (motor not stopped).'));
	
s_wrnApplyingBrakeNotAllowed R= s_bStaMotorStopped;
	
s_fbAlarmHandlerStartMotorNotAllowed(
	i_bStaActive := s_wrnStartMotorNotAllowed,
	i_eAlarmLevel := E_AlarmLevel.Warning,
	i_sAlarmText := CONCAT(i_sCmName, ': Motor - not allowed to start (brake not released).'));
	
s_wrnStartMotorNotAllowed R= s_bStaBrakeReleased;
	
s_fbAlarmHandlerMotorForwardInterlocked(
	i_bStaActive := s_wrnMotorForwardInterlocked,
	i_eAlarmLevel := E_AlarmLevel.Warning,
	i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Motor - interlocked to move forward, Reason: ',CONCAT(s_sInterlockedReasonForward, '.'))));
	//--i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Motor - interlocked to move forward, Reason: ',CONCAT(i_fbInterlockConvFwd.p_sReason, '.'))));
	
s_fbAlarmHandlerMotorBackwardInterlocked(
	i_bStaActive := s_wrnMotorBackwardInterlocked,
	i_eAlarmLevel := E_AlarmLevel.Warning,
	i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Motor - interlocked to move backward, Reason: ',CONCAT(s_sInterlockedReasonBackward, '.'))));
	//--i_sAlarmText := CONCAT(i_sCmName, CONCAT(': Motor - interlocked to move backward, Reason: ',CONCAT(i_fbInterlockConvBwd.p_sReason, '.'))));
	
// Alarm collector	
s_bStaError := 
	s_fbAlarmHandlerDriveError.q_bStaActive;

// Warning collector
s_bStaWarning := 
	s_fbAlarmHandlerApplyingBrakeNotAllowed.q_bStaActive
	OR s_fbAlarmHandlerStartMotorNotAllowed.q_bStaActive
	OR s_fbAlarmHandlerMotorForwardInterlocked.q_bStaActive
	OR s_fbAlarmHandlerMotorBackwardInterlocked.q_bStaActive;	
	
_m_Alarms := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Devices" Id="{9e243b00-6ff1-489e-8f7b-4b8502bb7008}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Devices : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Devices() THEN
	RETURN;
END_IF

s_bStaReady := i_refAxis.NcToPlc.StateDWord.0;
s_bStaHomed := i_refAxis.NcToPlc.StateDWord.1;
s_bStaStandstill := i_refAxis.NcToPlc.StateDWord.2;
s_bStaMoving := NOT(i_refAxis.NcToPlc.StateDWord.2);
s_bStaAtPosition := i_refAxis.NcToPlc.StateDWord.4;
s_bStaDriveError := i_refAxis.NcToPlc.StateDWord.31;

_m_Devices := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Hmi" Id="{d347e6d1-38a6-4faa-8926-d4b86b27fe7e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Hmi : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Hmi() THEN
	RETURN;
END_IF

//Buttons
s_fbHmiBtnHome();
s_fbHmiBtnJogPos();
s_fbHmiBtnJogNeg();
s_fbHmiBtnMoveAbs();
s_fbHmiBtnPower();
s_fbHmiBtnReset();
s_fbHmiBtnStop();

//Leds
s_fbHmiLedEnabledControl(i_bStaLed := s_bStaEnabledControl);
s_fbHmiLedEnabledForward(i_bStaLed := s_bStaEnabledForward);
s_fbHmiLedEnabledBackward(i_bStaLed := s_bStaEnabledBackward);
s_fbHmiLedReady(i_bStaLed := s_bStaReady);
s_fbHmiLedHomed(i_bStaLed := s_bStaHomed);
s_fbHmiLedStandstill(i_bStaLed := s_bStaStandstill);
s_fbHmiLedMoving(i_bStaLed := s_bStaMoving);
s_fbHmiLedAtPosition(i_bStaLed := s_bStaAtPosition);
s_fbHmiLedDriveError(i_bStaLed := s_bStaDriveError);

IF __ISVALIDREF(i_ref_eCtrlState) THEN
	//MAINTENANCE-mode is running
	IF (i_eCtrlMode = E_CtrlMode.MAINTENANCE) AND (i_ref_eCtrlState = E_CtrlState.RUNNING) THEN
		s_fbHmiBtnHome.p_bStaVisible := TRUE;
		s_fbHmiBtnHome.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaStandstill;	

		s_fbHmiBtnJogPos.p_bStaVisible := TRUE;
		s_fbHmiBtnJogPos.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaEnabledForward AND NOT(i_bIclkForward);
		
		s_fbHmiBtnJogNeg.p_bStaVisible := TRUE;
		s_fbHmiBtnJogNeg.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaEnabledBackward AND NOT(i_bIclkBackward);
	
		s_fbHmiBtnMoveAbs.p_bStaVisible := TRUE;
		s_fbHmiBtnMoveAbs.p_bStaEnabled := i_bReqEnable AND s_bStaEnabledControl AND s_bStaEnabledForward AND s_bStaEnabledBackward AND s_bStaStandstill AND s_bStaHomed;
		
		s_fbHmiBtnPower.p_bStaVisible := TRUE;
		s_fbHmiBtnPower.p_bStaEnabled := TRUE;
		
		s_fbHmiBtnReset.p_bStaVisible := TRUE;
		s_fbHmiBtnReset.p_bStaEnabled := TRUE;
		
		s_fbHmiBtnStop.p_bStaVisible := TRUE;
		s_fbHmiBtnStop.p_bStaEnabled := TRUE;
		
		//Actions
		m_MC_Home(
			i_bExecute := s_fbHmiBtnHome.p_osrBtnPress,
			i_fPosition := 0.0,
			i_eHomingMode := i_mcHomingMode,
			i_eBufferMode := Tc2_MC2.MC_BufferMode.MC_Aborting);
		
		m_MC_Jog(
			i_bExecute := s_fbHmiBtnJogPos.p_bStaBtn OR s_fbHmiBtnJogNeg.p_bStaBtn,
			i_bJogForward := s_fbHmiBtnJogPos.p_bStaBtn,
			i_bJogBackward := s_fbHmiBtnJogNeg.p_bStaBtn,
			i_eJogMode := Tc2_MC2.MC_JOGMODE_CONTINOUS,
			i_fPosition := 0.0,
			i_fVelocity := i_ref_setting.fVelocity,
			i_fAcceleration := i_ref_setting.fAcceleration,
			i_fDeceleration := i_ref_setting.fDeceleration,
			i_fJerk := i_ref_setting.fJerk);
		
		m_MC_MoveAbsolute(
			i_bExecute := s_fbHmiBtnMoveAbs.p_osrBtnPress,
			i_fPosition := s_fSetTargetPosition,
			i_fVelocity := i_ref_setting.fVelocity,
			i_fAcceleration := i_ref_setting.fAcceleration,
			i_fDeceleration := i_ref_setting.fDeceleration,
			i_fJerk := i_ref_setting.fJerk,
			i_eBufferMode := TC2_MC2.MC_BufferMode.MC_Aborting);
	
			IF s_fbHmiBtnPower.p_osrBtnPress THEN 
				s_bSetPoweOn := NOT(s_bSetPoweOn);
			END_IF
				
		m_MC_Power(
			i_bEnable := s_bSetPoweOn,
			i_bEnablePositive := I_bDetLimitSwitchPositive,
			i_bEnableNegative := I_bDetLimitSwitchPositive,
			i_fOverride	:= 100.0,
			i_eBufferMode := TC2_MC2.MC_BufferMode.MC_Aborting);
			
		m_MC_Reset(
			i_bExecute := s_fbHmiBtnReset.p_osrBtnPress);	
	
		m_MC_Stop(
			i_bExecute :=  s_fbHmiBtnStop.p_osrBtnPress,
			i_fDeceleration := i_ref_setting.fDeceleration,
			i_fJerk := i_ref_setting.fJerk);
		
	//other-mode	
	ELSE
		s_fbHmiBtnHome.p_bStaVisible := FALSE;
		s_fbHmiBtnHome.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnJogPos.p_bStaVisible := FALSE;
		s_fbHmiBtnJogPos.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnJogNeg.p_bStaVisible := FALSE;
		s_fbHmiBtnJogNeg.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnMoveAbs.p_bStaVisible := FALSE;
		s_fbHmiBtnMoveAbs.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnPower.p_bStaVisible := FALSE;
		s_fbHmiBtnPower.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnReset.p_bStaVisible := FALSE;
		s_fbHmiBtnReset.p_bStaEnabled := FALSE;
		
		s_fbHmiBtnStop.p_bStaVisible := FALSE;
		s_fbHmiBtnStop.p_bStaEnabled := FALSE;
	END_IF
END_IF
	
_m_Hmi := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Init" Id="{04dfb054-6b11-4b5e-a48d-10fd0c5ab89c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Init() THEN
	RETURN;
END_IF

//Hmi 
	//Buttons
	s_fbHmiBtnHome.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnHome.p_bStaVisible := FALSE;
	s_fbHmiBtnHome.p_bStaEnabled := FALSE;		
	s_fbHmiBtnHome.p_sBtnText := 'Home';
	
	s_fbHmiBtnJogPos.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnJogPos.p_bStaVisible := FALSE;
	s_fbHmiBtnJogPos.p_bStaEnabled := FALSE;		
	s_fbHmiBtnJogPos.p_sBtnText := 'Jog Positive';
	
	s_fbHmiBtnJogNeg.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnJogNeg.p_bStaVisible := FALSE;
	s_fbHmiBtnJogNeg.p_bStaEnabled := FALSE;		
	s_fbHmiBtnJogNeg.p_sBtnText := 'Jog Negative';
	
	s_fbHmiBtnMoveAbs.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnMoveAbs.p_bStaVisible := FALSE;
	s_fbHmiBtnMoveAbs.p_bStaEnabled := FALSE;		
	s_fbHmiBtnMoveAbs.p_sBtnText := 'Move Absolute';
	
	s_fbHmiBtnPower.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnPower.p_bStaVisible := FALSE;
	s_fbHmiBtnPower.p_bStaEnabled := FALSE;		
	s_fbHmiBtnPower.p_sBtnText := 'Power/Enable';

	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	s_fbHmiBtnReset.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnReset.p_bStaVisible := FALSE;
	s_fbHmiBtnReset.p_bStaEnabled := FALSE;		
	s_fbHmiBtnReset.p_sBtnText := 'Reset';
	
	s_fbHmiBtnStop.p_eButtontype := E_HmiButtonType.PUSHBUTTON;
	s_fbHmiBtnStop.p_bStaVisible := FALSE;
	s_fbHmiBtnStop.p_bStaEnabled := FALSE;		
	s_fbHmiBtnStop.p_sBtnText := 'Stop';
	
	//Leds
	s_fbHmiLedEnabledControl.p_bStaVisible := FALSE;
	s_fbHmiLedEnabledControl.p_sToHmiDescriptionLed := 'Enabled Control';
	
	s_fbHmiLedEnabledForward.p_bStaVisible := FALSE;
	s_fbHmiLedEnabledForward.p_sToHmiDescriptionLed := 'Enabled Forward';
	
	s_fbHmiLedEnabledBackward.p_bStaVisible := FALSE;
	s_fbHmiLedEnabledBackward.p_sToHmiDescriptionLed := 'Enabled Backward';
	
	s_fbHmiLedReady.p_bStaVisible := FALSE;
	s_fbHmiLedReady.p_sToHmiDescriptionLed := 'Ready';
	
	s_fbHmiLedHomed.p_bStaVisible := FALSE;
	s_fbHmiLedHomed.p_sToHmiDescriptionLed := 'Homed';
	
	s_fbHmiLedStandstill.p_bStaVisible := FALSE;
	s_fbHmiLedStandstill.p_sToHmiDescriptionLed := 'Standstill';
	
	s_fbHmiLedMoving.p_bStaVisible := FALSE;
	s_fbHmiLedMoving.p_sToHmiDescriptionLed := 'Moving';

	s_fbHmiLedAtPosition.p_bStaVisible := FALSE;
	s_fbHmiLedAtPosition.p_sToHmiDescriptionLed := 'At Position';
	
	s_fbHmiLedDriveError.p_bStaVisible := FALSE;
	s_fbHmiLedDriveError.p_sToHmiDescriptionLed := 'Drive Error';
	
_m_Init := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Inputs" Id="{6f1bac9d-85af-4aa0-99cc-0441d85b988e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Inputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Inputs() THEN
	RETURN;
END_IF

s_bStaReferenceSwitch := I_bDetReferenceSwitch;
s_bStaLimitSwitchPositive := I_bDetLimitSwitchPositive;
s_bStaLimitSwitchNegative := I_bDetLimitSwitchNegative;

s_bIclkForward := i_bIclkForward;
s_bIclkBackward := i_bIclkBackward;

_m_Inputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Outputs" Id="{705beffa-2023-4b46-ae05-94ae1d9439ab}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED _m_Outputs : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^._m_Outputs() THEN
	RETURN;
END_IF

_m_Outputs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MC_Home" Id="{953753d2-b56b-4416-8bfe-ffc202c2c66e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_MC_Home : BOOL
VAR_INPUT
	i_bExecute : BOOL;
	i_fPosition : REAL;
	i_eHomingMode : TC2_MC2.MC_HomingMode;
	i_eBufferMode : TC2_MC2.MC_BufferMode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbHome(
	Axis := i_refAxis,
	Execute := i_bExecute AND NOT(fbHome.Done OR fbHome.Busy OR fbHome.Error),
	Position := i_fPosition,
	HomingMode := i_eHomingMode,
	BufferMode := i_eBufferMode,
	Options := ,
	bCalibrationCam := I_bDetReferenceSwitch,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);
	
m_MC_Home := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MC_Jog" Id="{0b34f7cb-ad06-475a-9339-58c1a8e417e5}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_MC_Jog : BOOL
VAR_INPUT
	i_bExecute : BOOL;
	i_bJogForward : BOOL;
	i_bJogBackward : BOOL;
	i_eJogMode : TC2_MC2.E_JogMode;
	i_fPosition : LREAL; 
	i_fVelocity : LREAL; 
	i_fAcceleration : LREAL; 
	i_fDeceleration : LREAL; 
	i_fJerk : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbJog(
	Axis := i_refAxis,
	JogForward := i_bJogForward AND NOT(fbJog.Busy OR fbJog.Error),
	JogBackwards := i_bJogBackward AND NOT(fbJog.Busy OR fbJog.Error),
	Mode := i_eJogMode,
	Position := i_fPosition,
	Velocity := i_fVelocity,
	Acceleration := i_fAcceleration,
	Deceleration := i_fDeceleration,
	Jerk := i_fJerk,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);
	
m_MC_Jog := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MC_MoveAbsolute" Id="{0f6a7ef6-bbb9-453d-8d82-3eac920331b1}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_MC_MoveAbsolute : BOOL
VAR_INPUT
	i_bExecute : BOOL;
	i_fPosition : LREAL; 
	i_fVelocity : LREAL; 
	i_fAcceleration : LREAL; 
	i_fDeceleration : LREAL; 
	i_fJerk : LREAL;
	i_eBufferMode : TC2_MC2.MC_BufferMode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbMoveAbsolute(
	Axis := i_refAxis,
	Execute := i_bExecute AND NOT(fbMoveAbsolute.Done OR fbMoveAbsolute.Busy OR fbMoveAbsolute.Error), 
	Position := i_fPosition,
	Velocity := i_fVelocity,
	Acceleration := i_fAcceleration,
	Deceleration := i_fDeceleration,
	Jerk := i_fJerk,
	BufferMode := i_eBufferMode,
	Options := ,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);
	
m_MC_MoveAbsolute := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MC_MoveRelative" Id="{e88d3f53-895e-4d90-93a1-00c818a65e17}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_MC_MoveRelative : BOOL
VAR_INPUT
	i_bExecute : BOOL;
	i_fDistance : LREAL; 
	i_fVelocity : LREAL; 
	i_fAcceleration : LREAL; 
	i_fDeceleration : LREAL; 
	i_fJerk : LREAL;
	i_eBufferMode : TC2_MC2.MC_BufferMode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbMoveRelative(
	Axis := i_refAxis,
	Execute := i_bExecute AND NOT(fbMoveRelative.Done OR fbMoveRelative.Busy OR fbMoveRelative.Error),
	Distance := i_fDistance,
	Velocity := i_fVelocity,
	Acceleration := i_fAcceleration,
	Deceleration := i_fDeceleration,
	Jerk := i_fJerk,
	BufferMode := i_eBufferMode,
	Options := ,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);
	
m_MC_MoveRelative := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MC_MoveVelocity" Id="{03a3c1b8-6ef6-4f3e-9a88-25dabb25696f}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_MC_MoveVelocity : BOOL
VAR_INPUT
	i_bExecute : BOOL;
	i_fVelocity : LREAL; 
	i_fAcceleration : LREAL; 
	i_fDeceleration : LREAL; 
	i_fJerk : LREAL;
	i_eDirection : TC2_MC2.MC_Direction;
	i_eBufferMode : TC2_MC2.MC_BufferMode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbMoveVelocity(
	Axis := i_refAxis,
	Execute := i_bExecute AND NOT(fbMoveVelocity.InVelocity OR fbMoveVelocity.Busy OR fbMoveVelocity.Error),
	Velocity := i_fVelocity,
	Acceleration := i_fAcceleration,
	Deceleration := i_fDeceleration,
	Jerk := i_fJerk,
	Direction := i_eDirection, 
	BufferMode := i_eBufferMode,
	Options := ,
	InVelocity => s_bInVelocity,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);
	
m_MC_MoveVelocity := s_bInVelocity;]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MC_Power" Id="{fd1fc676-b701-4a26-938f-ef477da725d4}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_MC_Power : BOOL
VAR_INPUT
	i_bEnable : BOOL;
	i_bEnablePositive : BOOL;
	i_bEnableNegative : BOOL;
	i_fOverride : LREAL;
	i_eBufferMode : TC2_MC2.MC_BufferMode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbPower(
	Axis := i_refAxis,
	Enable := i_bEnable,
	Enable_Positive := i_bEnablePositive,
	Enable_Negative := i_bEnableNegative,
	Override := i_fOverride,
	BufferMode := i_eBufferMode,
	Options := ,
	Status => s_bStatus,
	Busy => s_bBusy,
	Active => s_bActive,
	Error => s_bError,
	ErrorID => s_nErrorID);

m_MC_Power := s_bDone;
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MC_Reset" Id="{78a60c41-19c8-4eb1-aa13-d3edbd9b9522}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_MC_Reset : BOOL
VAR_INPUT
	i_bExecute : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbReset(
	Axis := i_refAxis,
	Execute := i_bExecute,
	Done => s_bDone,
	Busy => s_bBusy,
	Error => s_bError,
	ErrorID => s_nErrorID);

m_MC_Reset := s_bDone;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MC_Stop" Id="{6c6294b9-0bc1-4c87-8f3e-41d07e1a757c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_MC_Stop : BOOL
VAR_INPUT
	i_bExecute : BOOL;
	i_fDeceleration : LREAL;
	i_fJerk : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbStop(
	Axis := i_refAxis,
	Execute := i_bExecute AND NOT(fbStop.Busy OR fbStop.Error),
	Deceleration := i_fDeceleration,
	Jerk := i_fJerk,
	Options := ,
	Done => s_bDone,
	Busy => s_bBusy,
	Active => s_bActive,
	CommandAborted => s_bCommandAborted,
	Error => s_bError,
	ErrorID => s_nErrorID);

m_MC_Stop := s_bDone;
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="m_MC_WriteParameter" Id="{bd735f20-59c2-4742-93e6-7fe0c71a0a69}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC m_MC_WriteParameter : BOOL
VAR_INPUT
	i_bExecute : BOOL;
	i_nParameterNumber : INT;
	i_fValue : LREAL;
	
	i_fDeceleration : LREAL;
	i_fJerk : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbWriteParamter(
	Axis := i_refAxis,
	Execute := i_bExecute,
	ParameterNumber := i_nParameterNumber,
	Value := i_fValue,
	Done => s_bDone,
	Busy => s_bBusy,
	Error => s_bError,
	ErrorID => s_nErrorID);

m_MC_WriteParameter := s_bDone;
	]]></ST>
      </Implementation>
    </Method>
    <Property Name="p_bActive" Id="{fdebd466-4355-4961-86f7-17cb1e74e332}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bActive : BOOL
]]></Declaration>
      <Get Name="Get" Id="{12554b68-dea8-473b-b98f-bf82edb9ad16}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bActive := s_bActive;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bBusy" Id="{a6bb4214-9e42-46dd-a8f3-995e364772d0}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bBusy : BOOL]]></Declaration>
      <Get Name="Get" Id="{7080bc48-c94e-419b-9e7d-df95694c753e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bBusy := s_bBusy;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bCommandAborted" Id="{32bd9d7d-f5a3-4f89-9a59-0294a826c560}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bCommandAborted : BOOL]]></Declaration>
      <Get Name="Get" Id="{a39acfdd-fde9-4118-9e65-bd86ad5a94af}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bCommandAborted := s_bCommandAborted;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bDone" Id="{09a3960b-0e70-4e33-a3d6-ff5a57122d42}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{e656286c-fa2b-43ef-a794-1f2819d97be9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bDone := s_bDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bError" Id="{7759aec3-bd8b-4f0c-9913-656b2c70cf6a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bError : BOOL
]]></Declaration>
      <Get Name="Get" Id="{67b5f8fe-c6e4-4145-9f0e-f9d36c480d63}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bError := s_bError;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bHomed" Id="{29d86fc1-be45-4333-91ce-9bdc79739fba}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bHomed : BOOL
]]></Declaration>
      <Get Name="Get" Id="{3bff5f71-c84f-4863-9be2-8ae02d95a4db}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bHomed := i_refAxis.Status.Homed;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bInVelocity" Id="{ad6f06b2-9004-44cf-b2f5-69658322b253}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bInVelocity : BOOL]]></Declaration>
      <Get Name="Get" Id="{74cf3db6-e8a3-4deb-a51f-3d6592feea66}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bInVelocity := s_bInVelocity;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_bStandstill" Id="{06fe4adf-3a6b-49c2-a8e8-c5de29d0c1af}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_bStandstill : BOOL
]]></Declaration>
      <Get Name="Get" Id="{e4db3dbb-9fbf-4ca7-ba91-332924a328ae}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_bStandstill := i_refAxis.Status.StandStill;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_fPosition" Id="{e5ef2cba-1955-4270-98db-4d1260096b27}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_fPosition : LREAL
]]></Declaration>
      <Get Name="Get" Id="{440682b1-07c0-42c1-8793-ae28db2834f6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_fPosition := i_refAxis.NcToPlc.ActPos;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_fVelocity" Id="{e4d08808-aacd-469e-bccf-b788a2ac516e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_fVelocity : LREAL
]]></Declaration>
      <Get Name="Get" Id="{a4e61425-56d9-43cd-b7a5-921c2a97d144}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_fVelocity := i_refAxis.NcToPlc.ActVelo;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_nErrorID" Id="{063f18f8-6320-4761-b8fc-9920f5ec0c3a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC p_nErrorID : UDINT
]]></Declaration>
      <Get Name="Get" Id="{fa545b5b-0766-4028-bde3-78e42d22c7e0}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_nErrorID := s_nErrorID;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="p_sInterlockedReasonBackward" Id="{2cbc61be-2980-49ea-9737-516b9cc082cc}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_sInterlockedReasonBackward : STRING(GVL.g_MAX_LEN_INTERLOCK_REASON)]]></Declaration>
      <Get Name="Get" Id="{6302c11b-5d35-483e-93f6-02d7e278d314}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_sInterlockedReasonBackward := s_sInterlockedReasonBackward;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{736eeda3-1c6b-466b-a8c9-83add0319e61}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_sInterlockedReasonBackward := p_sInterlockedReasonBackward;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="p_sInterlockedReasonForward" Id="{54c2d2dd-7915-4fa3-818c-250a80b85813}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC p_sInterlockedReasonForward : STRING(GVL.g_MAX_LEN_INTERLOCK_REASON)]]></Declaration>
      <Get Name="Get" Id="{c021f6d7-6c1d-45d2-8cf8-029294050c22}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
p_sInterlockedReasonForward := s_sInterlockedReasonForward;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ae73b161-60cd-49c4-958c-4f84879e0c7c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
s_sInterlockedReasonForward := p_sInterlockedReasonForward;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="CM_AX5000">
      <LineId Id="410" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="633" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000._m_Alarms">
      <LineId Id="28" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="103" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="159" Count="2" />
      <LineId Id="158" Count="0" />
      <LineId Id="163" Count="5" />
      <LineId Id="162" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="122" Count="3" />
      <LineId Id="128" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="129" Count="3" />
      <LineId Id="121" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="143" Count="2" />
      <LineId Id="140" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="148" Count="2" />
      <LineId Id="180" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="174" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000._m_Devices">
      <LineId Id="6" Count="3" />
      <LineId Id="296" Count="0" />
      <LineId Id="301" Count="4" />
      <LineId Id="297" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000._m_Hmi">
      <LineId Id="17" Count="3" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="310" Count="6" />
      <LineId Id="137" Count="1" />
      <LineId Id="320" Count="7" />
      <LineId Id="319" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="224" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="341" Count="3" />
      <LineId Id="330" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="280" Count="2" />
      <LineId Id="351" Count="1" />
      <LineId Id="355" Count="0" />
      <LineId Id="365" Count="1" />
      <LineId Id="373" Count="1" />
      <LineId Id="362" Count="0" />
      <LineId Id="377" Count="8" />
      <LineId Id="376" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="388" Count="2" />
      <LineId Id="398" Count="2" />
      <LineId Id="394" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="403" Count="4" />
      <LineId Id="358" Count="0" />
      <LineId Id="401" Count="1" />
      <LineId Id="409" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="411" Count="3" />
      <LineId Id="240" Count="2" />
      <LineId Id="252" Count="15" />
      <LineId Id="250" Count="0" />
      <LineId Id="423" Count="2" />
      <LineId Id="251" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="87" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000._m_Init">
      <LineId Id="21" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="76" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="34" Count="22" />
      <LineId Id="27" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="85" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="91" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="6" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="4" />
      <LineId Id="115" Count="0" />
      <LineId Id="117" Count="6" />
      <LineId Id="116" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="124" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000._m_Inputs">
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000._m_Outputs">
      <LineId Id="29" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="212" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.m_MC_Home">
      <LineId Id="113" Count="0" />
      <LineId Id="98" Count="11" />
      <LineId Id="112" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.m_MC_Jog">
      <LineId Id="269" Count="0" />
      <LineId Id="253" Count="15" />
      <LineId Id="270" Count="1" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.m_MC_MoveAbsolute">
      <LineId Id="226" Count="0" />
      <LineId Id="210" Count="15" />
      <LineId Id="227" Count="1" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.m_MC_MoveRelative">
      <LineId Id="221" Count="0" />
      <LineId Id="205" Count="15" />
      <LineId Id="222" Count="1" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.m_MC_MoveVelocity">
      <LineId Id="15" Count="0" />
      <LineId Id="36" Count="14" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.m_MC_Power">
      <LineId Id="130" Count="0" />
      <LineId Id="117" Count="10" />
      <LineId Id="131" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="133" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.m_MC_Reset">
      <LineId Id="37" Count="0" />
      <LineId Id="30" Count="6" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.m_MC_Stop">
      <LineId Id="11" Count="11" />
      <LineId Id="8" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.m_MC_WriteParameter">
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="7" />
      <LineId Id="59" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_bActive.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_bBusy.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_bCommandAborted.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_bDone.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_bError.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_bHomed.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_bInVelocity.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_bStandstill.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_fPosition.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_fVelocity.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_nErrorID.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_sInterlockedReasonBackward.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_sInterlockedReasonBackward.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_sInterlockedReasonForward.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CM_AX5000.p_sInterlockedReasonForward.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>